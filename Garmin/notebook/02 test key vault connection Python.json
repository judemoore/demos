{
	"name": "02 test keyvault connection Python",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "personalsparkp",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "1",
				"spark.autotune.trackingId": "c043e8be-2123-4224-9340-421f4e5f5366"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/91972177-b241-4547-980b-98433788152e/resourceGroups/personalprojectsrg/providers/Microsoft.Synapse/workspaces/personalprojectsrgsynapse/bigDataPools/personalsparkp",
				"name": "personalsparkp",
				"type": "Spark",
				"endpoint": "https://personalprojectsrgsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/personalsparkp",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# Test connecting to Azure Key Vault in Python\r\n",
					"# If in VS Code, then \"Connect-AzAccount\" within the Terminal Powershell to log into Azure so Key Vault can authenticate the request using Entra ID\r\n",
					"# How authetication works in Azure Key Vault # How authentication works https://learn.microsoft.com/en-us/python/api/overview/azure/identity-readme?view=azure-python#authenticating-a-user-assigned-managed-identity-with-defaultazurecredential\r\n",
					"# Install the package using pip: pip3 install garminconnect azure-identity azure-keyvault-secrets azure-keyvault or\r\n",
					"#%pip install garminconnect azure-identity azure-keyvault-secrets azure-keyvault\r\n",
					"\r\n",
					"from azure.identity import DefaultAzureCredential\r\n",
					"from azure.keyvault.secrets import SecretClient\r\n",
					"\r\n",
					"def get_api_key_from_keyvault(key_vault_name, secret_name, secret_version=None): \r\n",
					"    try:\r\n",
					"        # Initialize Azure Key Vault client\r\n",
					"        #key_vault_name = \"judeskv\"\r\n",
					"        kv_uri = f\"https://{key_vault_name}.vault.azure.net\"\r\n",
					"        credential = DefaultAzureCredential()\r\n",
					"        secret_client = SecretClient(vault_url=kv_uri, credential=credential)\r\n",
					"\r\n",
					"        # Retrieve your API credentials (secret) from Key Vault\r\n",
					"        #secret_name = \"GarminPassword\"\r\n",
					"        api_key = secret_client.get_secret(secret_name).value\r\n",
					"        return api_key\r\n",
					"    except Exception as e:\r\n",
					"        print(f\"Error retrieving API key from Key Vault: {e}\")\r\n",
					"        return None\r\n",
					"    \r\n",
					"# Test and bring back and sow the key vaul secrete (beware!)\r\n",
					"# Replace judeskv with your own key_vault_name and GarminUsername with your own secret_name\r\n",
					"print(get_api_key_from_keyvault(\"judeskv\",\"GarminUsername\"))"
				],
				"execution_count": 11
			}
		]
	}
}