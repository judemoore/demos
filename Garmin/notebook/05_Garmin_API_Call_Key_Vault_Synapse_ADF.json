{
	"name": "05_Garmin_API_Call_Key_Vault_Synapse_ADF",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "personalsparkp",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "1",
				"spark.autotune.trackingId": "5dac5d0b-896a-4944-9add-e4fe49c3fdd7"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/91972177-b241-4547-980b-98433788152e/resourceGroups/personalprojectsrg/providers/Microsoft.Synapse/workspaces/personalprojectsrgsynapse/bigDataPools/personalsparkp",
				"name": "personalsparkp",
				"type": "Spark",
				"endpoint": "https://personalprojectsrgsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/personalsparkp",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Test connecting to Azure Key Vault in Python and gt Garmin data from Garmin API\r\n",
					"# Follow this to create a linked service to the Key vault on Azure, then apply permission to the App ID from the Synapse Instance https://stackoverflow.com/questions/77846845/access-key-vault-in-azure-synapse-analytical-pipeline-notebook\r\n",
					"# Install the package using pip: pip3 install garminconnect azure-identity azure-keyvault-secrets azure-keyvault \r\n",
					"\r\n",
					"API = 'Activities'\r\n",
					"DAYS_AGO = 730\r\n",
					"DAYS_UNTIL  = 0\r\n",
					"KEYVAULTNAME = 'judeskv'\r\n",
					"GARMIN_UNAME_KEY = 'GarminUsername'\r\n",
					"GARMIN_PASSW_KEY = 'GarminPassword'\r\n",
					"ABFS_DEST_BLOB = 'https://personalprojectsrslake.blob.core.windows.net/personalprojectsfs'\r\n",
					"ABFS_DEST_FOLDER = 'personalprojectsfs/synapse/workspaces/personalprojectsrgsynapse/DataFiles/Garmin'\r\n",
					"  # df.to_parquet('abfs[s]://file_system_name@account_name.dfs.core.windows.net/   parquet_file_path')\r\n",
					""
				],
				"execution_count": 52
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Install the Garmin library if required. Used to log into the Garmin API, so critical.\r\n",
					"# The mssarkutils to retreive the Data Vault secrets. \r\n",
					"# The json and pandas for downstream data manipulation only\r\n",
					"!pip install garminconnect \r\n",
					"import garminconnect\r\n",
					"from datetime import datetime, timedelta\r\n",
					"from notebookutils import mssparkutils\r\n",
					"import json\r\n",
					"from pyspark.sql import SparkSession\r\n",
					"import pandas as pd\r\n",
					"import os"
				],
				"execution_count": 53
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Function to fetch keys from keyvault\r\n",
					"def get_api_key_from_keyvault(key_vault_name, secret_name): \r\n",
					"    try:\r\n",
					"        api_key = mssparkutils.credentials.getSecret(key_vault_name,secret_name)\r\n",
					"        return api_key\r\n",
					"    except Exception as e:\r\n",
					"        print(f\"Error retrieving API key from Key Vault: {e}\")\r\n",
					"        return None"
				],
				"execution_count": 54
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Get API password from Key Vault. Replace with hard-coded values to avoid the KeyVault request\r\n",
					"try:\r\n",
					"    Garmin_Username = get_api_key_from_keyvault(KEYVAULTNAME, GARMIN_UNAME_KEY)\r\n",
					"except Exception as e:\r\n",
					"    print(\"Garmin_Username retrieval/initialisation failed. Check your Key Vault configuration/python. {e}\")\r\n",
					"\r\n",
					"try:\r\n",
					"    Garmin_Password = get_api_key_from_keyvault(KEYVAULTNAME, GARMIN_PASSW_KEY)\r\n",
					"except Exception as e:\r\n",
					"    print(\"Garmin_Password retrieval/initialisation failed. Check your Key Vault configuration/python. {e}\")"
				],
				"execution_count": 55
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Initialize Garmin Connect client\r\n",
					"try:\r\n",
					"    # Attempt to login\r\n",
					"\r\n",
					"    client = garminconnect.Garmin(Garmin_Username, Garmin_Password)\r\n",
					"    client.login()\r\n",
					"    print(\"Login successful.\")\r\n",
					"except Exception as e:\r\n",
					"        print(f\"Error logging into Garmin API: {e}\")"
				],
				"execution_count": 56
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Calculate start and end dates for the last three months\r\n",
					"to_date = datetime.today()-timedelta(days=DAYS_UNTIL)\r\n",
					"from_date = to_date - timedelta(days=DAYS_AGO)"
				],
				"execution_count": 57
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Get activity data for the last x days from garmin\r\n",
					"try:\r\n",
					"    activities_data = client.get_activities_by_date(from_date.isoformat(), to_date.isoformat())\r\n",
					"    # match API:\r\n",
					"    #     case \"Activities\":\r\n",
					"    #         activities_data = client.get_activities_by_date(from_date.isoformat(), to_date.isoformat())\r\n",
					"    #     case _:\r\n",
					"    #         activities_data = client.get_activities_by_date(from_date.isoformat(), to_date.isoformat())\r\n",
					"    print(f\"Fetched {len(activities_data)} activities.\")\r\n",
					"except Exception as e:\r\n",
					"    print(f\"Error feteching data from Garmin API: Call was: client.get_activities_by_date({from_date.isoformat()}, {to_date.isoformat()}\")"
				],
				"execution_count": 58
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Show the raw dta using json formatting\r\n",
					"# print(json.dumps(activities_df, indent = 1))"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Frame the retreived data in PySpark\r\n",
					"#df = spark.sparkContext.parallelize(activities_data)\r\n",
					"#print(df.take(10))\r\n",
					"#df = df.toDF()\r\n",
					"#df.show()\r\n",
					"#activities_df = pd.DataFrame(activities_data)\r\n",
					"#print(activities_df.head)\r\n",
					"#print(activities_df.columns)"
				],
				"execution_count": 59
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Frame the retreived data in Python\r\n",
					"df = pd.DataFrame(activities_data)\r\n",
					"\r\n",
					"df.to_parquet(\"datafgarminonetime.parquet\")\r\n",
					"print(\"Listing the contents of the current directory:\")\r\n",
					"print(os.listdir('.'))\r\n",
					"#print(activities_df.head)\r\n",
					"#print(activities_df.columns)"
				],
				"execution_count": 62
			},
			{
				"cell_type": "code",
				"source": [
					"# Show the retreived data\r\n",
					"\r\n",
					"# pathway = \"abfss://cdf6e060-d604-4869-9fdb-b4afea0ab27e@onelake.dfs.fabric.microsoft.com/1a5d0aaf-573b-472b-b0b3-48c8afeb4ff2/Files/DI-Connect-Fitness/\"\r\n",
					"# file = \"activities.parquet\"\r\n",
					"# full_path = f\"{pathway}{file}\"\r\n",
					"# activities_df.to_parquet(full_path, engine='pyarrow')\r\n",
					"# dfp = spark.read.parquet(\"Files/DI-Connect-Fitness/activities.parquet\")\r\n",
					"# # dfp now is a Spark DataFrame containing parquet data from \"Files/DI-Connect-Fitness/activities.parquet\".\r\n",
					"# display(dfp)\r\n",
					"\r\n",
					"#dfp.write.mode(\"overwrite\").format(\"delta\").saveAsTable(\"N_G_Table\")\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"# # Example: Get body composition data for the last three months\r\n",
					"# body_composition_data = client.get_body_composition_data(from_date.strftime(\"%Y-%m-%d\"), to_date.strftime(\"%Y-%m-%d\"))\r\n",
					"# print(f\"Body composition data for the last three months: {body_composition_data}\")\r\n",
					"\r\n",
					"# Example: Get sleep data for the last three months\r\n",
					"# sleep_data = client.get_sleep_data(from_date.strftime(\"%Y-%m-%d\"), to_date.strftime(\"%Y-%m-%d\"))\r\n",
					"# print(f\"Sleep data for the last three months: {sleep_data}\")\r\n",
					"\r\n",
					"# Add more API calls as needed for other statistics and activities\r\n",
					""
				],
				"execution_count": null
			}
		]
	}
}