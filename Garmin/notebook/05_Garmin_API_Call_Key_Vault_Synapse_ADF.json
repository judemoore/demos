{
	"name": "05_Garmin_API_Call_Key_Vault_Synapse_ADF",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "personalsparkp",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "1",
				"spark.autotune.trackingId": "0d4d6c56-e875-40db-8d02-f30fc1119529"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/91972177-b241-4547-980b-98433788152e/resourceGroups/personalprojectsrg/providers/Microsoft.Synapse/workspaces/personalprojectsrgsynapse/bigDataPools/personalsparkp",
				"name": "personalsparkp",
				"type": "Spark",
				"endpoint": "https://personalprojectsrgsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/personalsparkp",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Test connecting to Azure Key Vault in Python and gt Garmin data from Garmin API ref: https://pypi.org/project/garminconnect/\r\n",
					"# Follow this to create a linked service to the Key vault on Azure, then apply permission to the App ID from the Synapse Instance https://stackoverflow.com/questions/77846845/access-key-vault-in-azure-synapse-analytical-pipeline-notebook\r\n",
					"# Install the package using pip: pip3 install garminconnect azure-identity azure-keyvault-secrets azure-keyvault \r\n",
					"\r\n",
					"GARMIN_API_DS = 'get_sleep_data' # get_activities_by_date, get_sleep_data\r\n",
					"DAYS_AGO = 730\r\n",
					"DAYS_UNTIL  = 1\r\n",
					"KEYVAULTNAME = 'judeskv'\r\n",
					"GARMIN_UNAME_KEY = 'GarminUsername'\r\n",
					"GARMIN_PASSW_KEY = 'GarminPassword'\r\n",
					"ABFS_DEST_ACCOUNT = 'abfss://personalprojectsfs@personalprojectsrslake.dfs.core.windows.net'\r\n",
					"ABFS_DEST_FOLDER = '/synapse/workspaces/personalprojectsrgsynapse/DataFiles/Garmin/'\r\n",
					"  # df.to_parquet('abfs[s]://file_system_name@account_name.dfs.core.windows.net/   parquet_file_path')\r\n",
					""
				],
				"execution_count": 150
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Install the Garmin library if required. Used to log into the Garmin API, so critical.\r\n",
					"# The mssarkutils to retreive the Data Vault secrets. \r\n",
					"# The json and pandas for downstream data manipulation only\r\n",
					"!pip install garminconnect \r\n",
					"from garminconnect import (\r\n",
					"    Garmin,\r\n",
					"    GarminConnectAuthenticationError,\r\n",
					"    GarminConnectConnectionError,\r\n",
					"    GarminConnectTooManyRequestsError,\r\n",
					")\r\n",
					"from datetime import datetime, timedelta\r\n",
					"from notebookutils import mssparkutils\r\n",
					"import json\r\n",
					"import requests\r\n",
					"from garth.exc import GarthHTTPError\r\n",
					"from pyspark.sql import SparkSession\r\n",
					"import pandas as pd\r\n",
					"#import os"
				],
				"execution_count": 151
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Function to fetch keys from keyvault\r\n",
					"def get_api_key_from_keyvault(key_vault_name, secret_name): \r\n",
					"    try:\r\n",
					"        api_key = mssparkutils.credentials.getSecret(key_vault_name,secret_name)\r\n",
					"        return api_key\r\n",
					"    except Exception as e:\r\n",
					"        print(f\"Error retrieving API key from Key Vault: {e}\")\r\n",
					"        return None\r\n",
					"# Get API password from Key Vault. Replace with hard-coded values to avoid the KeyVault request\r\n",
					"try:\r\n",
					"    Garmin_Username = get_api_key_from_keyvault(KEYVAULTNAME, GARMIN_UNAME_KEY)\r\n",
					"except Exception as e:\r\n",
					"    print(\"Garmin_Username retrieval/initialisation failed. Check your Key Vault configuration/python. {e}\")\r\n",
					"\r\n",
					"try:\r\n",
					"    Garmin_Password = get_api_key_from_keyvault(KEYVAULTNAME, GARMIN_PASSW_KEY)\r\n",
					"except Exception as e:\r\n",
					"    print(\"Garmin_Password retrieval/initialisation failed. Check your Key Vault configuration/python. {e}\")"
				],
				"execution_count": 155
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Initialize Garmin Connect client\r\n",
					"try:\r\n",
					"    # Attempt to login\r\n",
					"\r\n",
					"    api = garminconnect.Garmin(Garmin_Username, Garmin_Password)\r\n",
					"    api.login()\r\n",
					"    print(\"Login successful.\")\r\n",
					"except Exception as e:\r\n",
					"        print(f\"Error logging into Garmin API: {e}\")"
				],
				"execution_count": 156
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Get activity data for the last x days from garmin\r\n",
					"\r\n",
					"def display_json(api_call, output):\r\n",
					"    \"\"\"Format API output for better readability.\"\"\"\r\n",
					"\r\n",
					"    dashed = \"-\"*20\r\n",
					"    header = f\"{dashed} {api_call} {dashed}\"\r\n",
					"    footer = \"-\"*len(header)\r\n",
					"\r\n",
					"    print(header)\r\n",
					"    print(json.dumps(output, indent=4))\r\n",
					"    print(footer)\r\n",
					"\r\n",
					"\r\n",
					"try:\r\n",
					"    # Calculate start and end dates for the period specified\r\n",
					"    to_date = datetime.today()-timedelta(days=DAYS_UNTIL)\r\n",
					"    from_date = to_date - timedelta(days=DAYS_AGO)\r\n",
					"    daterange = pd.date_range(from_date, to_date)\r\n",
					"    # You can then loop over the daterange to print the date:\r\n",
					"\r\n",
					"    match GARMIN_API_DS:\r\n",
					"        case \"get_activities_by_date\":\r\n",
					"            garmin_ds_data = client.get_activities_by_date(from_date.isoformat(), to_date.isoformat())\r\n",
					"        case \"get_sleep_data\":\r\n",
					"            #garmin_ds_data = client.get_sleep_data(from_date.isoformat())\r\n",
					"            # for single_date in daterange:\r\n",
					"            #     print (single_date.strftime(\"%Y-%m-%d\"))\r\n",
					"            #     #json_data[\"data\"][\"items\"].append(i)\r\n",
					"            #     garmin_ds_data = client.get_sleep_data(single_date.isoformat())\r\n",
					"            #print(json.dumps(garmin_ds_data, indent = 1))\r\n",
					"            display_json(f\"api.get_sleep_data('{to_date.isoformat()}')\", api.get_sleep_data(to_date.isoformat()))\r\n",
					"        case _:\r\n",
					"            garmin_ds_data = client.get_activities_by_date(from_date.isoformat(), to_date.isoformat())\r\n",
					"    print(f\"Fetched {len(garmin_ds_data)} records.\")\r\n",
					"except (\r\n",
					"        GarminConnectConnectionError,\r\n",
					"        GarminConnectAuthenticationError,\r\n",
					"        GarminConnectTooManyRequestsError,\r\n",
					"        requests.exceptions.HTTPError,\r\n",
					"        ) as err:\r\n",
					"            logger.error(\"Error occurred during Garmin Connect communication: %s\", err)"
				],
				"execution_count": 157
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Frame the data\r\n",
					"#print(json.dumps(garmin_ds_data, indent = 1))\r\n",
					"df = pd.DataFrame(garmin_ds_data)\r\n",
					"# jsondata = json.load(garmin_ds_data)\r\n",
					"# print(jsondata)\r\n",
					"# df = pd.DataFrame(jsondata[\"data\"])\r\n",
					"df.show()"
				],
				"execution_count": 112
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Frame the retreived data in PySpark\r\n",
					"#df = spark.sparkContext.parallelize(garmin_ds_data)\r\n",
					"#print(df.take(10))\r\n",
					"#df = df.toDF()\r\n",
					"#df.show()\r\n",
					"#activities_df = pd.DataFrame(garmin_ds_data)\r\n",
					"#print(activities_df.head)\r\n",
					"#print(activities_df.columns)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Write the data to parquet file\r\n",
					"# https://personalprojectsrslake.dfs.core.windows.net/personalprojectsfs/synapse/workspaces/personalprojectsrgsynapse/DataFiles/Garmin/\r\n",
					"# abfss://<containername>@<storageaccountname>.dfs.core.windows.net</path/>\r\n",
					"pathacc = ABFS_DEST_ACCOUNT #\"abfss://personalprojectsfs@personalprojectsrslake.dfs.core.windows.net/synapse/workspaces/personalprojectsrgsynapse/DataFiles/Garmin/\"\r\n",
					"pathfolder = ABFS_DEST_FOLDER\r\n",
					"file = \"garmin_garmin_ds_data-\" + to_date.isoformat() + \"-.parquet\"\r\n",
					"full_path = f\"{pathacc}{pathfolder}{file}\"\r\n",
					"df.to_parquet(full_path, engine='pyarrow')\r\n",
					"#dfp.write.mode(\"overwrite\").format(\"delta\").saveAsTable(\"tbl_activities\")\r\n",
					"\r\n",
					"# print(\"Listing the contents of the current directory:\")\r\n",
					"# print(os.listdir('.'))\r\n",
					"\r\n",
					"#print(activities_df.head)\r\n",
					"#print(activities_df.columns)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"dfp = spark.read.parquet(full_path)\r\n",
					"# # dfp now is a Spark DataFrame containing parquet data from \"Files/DI-Connect-Fitness/activities.parquet\".\r\n",
					"display(dfp)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Show the retreived data\r\n",
					"\r\n",
					"# pathway = \"abfss://cdf6e060-d604-4869-9fdb-b4afea0ab27e@onelake.dfs.fabric.microsoft.com/1a5d0aaf-573b-472b-b0b3-48c8afeb4ff2/Files/DI-Connect-Fitness/\"\r\n",
					"# file = \"activities.parquet\"\r\n",
					"# full_path = f\"{pathway}{file}\"\r\n",
					"# activities_df.to_parquet(full_path, engine='pyarrow')\r\n",
					"# dfp = spark.read.parquet(\"Files/DI-Connect-Fitness/activities.parquet\")\r\n",
					"# # dfp now is a Spark DataFrame containing parquet data from \"Files/DI-Connect-Fitness/activities.parquet\".\r\n",
					"# display(dfp)\r\n",
					"\r\n",
					"#dfp.write.mode(\"overwrite\").format(\"delta\").saveAsTable(\"N_G_Table\")\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"# # Example: Get body composition data for the last three months\r\n",
					"# body_composition_data = client.get_body_composition_data(from_date.strftime(\"%Y-%m-%d\"), to_date.strftime(\"%Y-%m-%d\"))\r\n",
					"# print(f\"Body composition data for the last three months: {body_composition_data}\")\r\n",
					"\r\n",
					"# Example: Get sleep data for the last three months\r\n",
					"# sleep_data = client.get_sleep_data(from_date.strftime(\"%Y-%m-%d\"), to_date.strftime(\"%Y-%m-%d\"))\r\n",
					"# print(f\"Sleep data for the last three months: {sleep_data}\")\r\n",
					"\r\n",
					"# Add more API calls as needed for other statistics and activities\r\n",
					""
				],
				"execution_count": null
			}
		]
	}
}