{
	"name": "07_Garmin_API_Synapse_Pipeline",
	"properties": {
		"description": "https://pypi.org/project/garminconnect/#description",
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "personalsparkp",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "4",
				"spark.autotune.trackingId": "c8c1cce4-1950-4638-93a3-d5b692aa5795"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/91972177-b241-4547-980b-98433788152e/resourceGroups/personalprojectsrg/providers/Microsoft.Synapse/workspaces/personalprojectsrgsynapse/bigDataPools/personalsparkp",
				"name": "personalsparkp",
				"type": "Spark",
				"endpoint": "https://personalprojectsrgsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/personalsparkp",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 5
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"GARMIN_API_OPTION = 'act' # see list below\r\n",
					"DAYS_BEFORETODAY = 0 # end date as offset from today. IE today = 0, yesterday is 1.. \r\n",
					"DAYS_AGO =  0  # start date as offset from today. IE today = 0, yesterday is 1.. \r\n",
					"KEYVAULTNAME = 'judeskv'\r\n",
					"KEYVAULTLINKEDSERVICE = 'judeskvlinked'\r\n",
					"GARMIN_UNAME_KEY = 'GarminUsername' # Key vzult secret\r\n",
					"GARMIN_PASSW_KEY = 'GarminPassword' # Key vzult secret\r\n",
					"ABFS_DEST_ACCOUNT = 'abfss://personalprojectsfs@personalprojectsrslake.dfs.core.windows.net'\r\n",
					"ABFS_DEST_FOLDER = '/synapse/workspaces/personalprojectsrgsynapse/DataFiles/Garmin/'"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": []
				},
				"source": [
					"# Test connecting to Azure Key Vault in Python and gt Garmin data from Garmin API ref: https://pypi.org/project/garminconnect/\r\n",
					"# Follow this to create a linked service to the Key vault on Azure, then apply permission to the App ID from the Synapse Instance https://stackoverflow.com/questions/77846845/access-key-vault-in-azure-synapse-analytical-pipeline-notebook\r\n",
					"# Install the package using pip: pip3 install garminconnect azure-identity azure-keyvault-secrets azure-keyvault \r\n",
					"\r\n",
					"#!/usr/bin/env python3\r\n",
					"!pip install garminconnect \r\n",
					"\r\n",
					"import datetime\r\n",
					"import json\r\n",
					"import logging\r\n",
					"import pandas as pd\r\n",
					"# import os\r\n",
					"# import sys\r\n",
					"# from getpass import getpass\r\n",
					"\r\n",
					"#import readchar\r\n",
					"import requests\r\n",
					"from garth.exc import GarthHTTPError\r\n",
					"\r\n",
					"from garminconnect import (\r\n",
					"    Garmin,\r\n",
					"    GarminConnectAuthenticationError,\r\n",
					"    GarminConnectConnectionError,\r\n",
					"    GarminConnectTooManyRequestsError,\r\n",
					")"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Configure debug logging\r\n",
					"# logging.basicConfig(level=logging.DEBUG)\r\n",
					"logging.basicConfig(level=logging.INFO)\r\n",
					"logger = logging.getLogger(__name__)\r\n",
					"\r\n",
					"# # Load environment variables if defined\r\n",
					"# email = # os.getenv(\"EMAIL\")\r\n",
					"# password =  # os.getenv(\"PASSWORD\")\r\n",
					"\r\n",
					"# Example selections and settings\r\n",
					"today = datetime.date.today() \r\n",
					"\r\n",
					"if DAYS_BEFORETODAY > 0:\r\n",
					"    enddate = today - datetime.timedelta(days=DAYS_BEFORETODAY)\r\n",
					"else:\r\n",
					"    enddate = today \r\n",
					"\r\n",
					"if DAYS_AGO > 0:\r\n",
					"    startdate = today - datetime.timedelta(days=DAYS_AGO)  \r\n",
					"else:\r\n",
					"    startdate = today\r\n",
					"\r\n",
					"start = 0\r\n",
					"limit = 300\r\n",
					"start_badge = 1  # Badge related calls calls start counting at 1\r\n",
					"activitytype = \"\"  # Possible values are: cycling, running, swimming, multi_sport, fitness_equipment, hiking, walking, other\r\n",
					"activityfile = \"MY_ACTIVITY.fit\"  # Supported file types are: .fit .gpx .tcx\r\n",
					"weight = 79.9\r\n",
					"weightunit = 'kg'\r\n",
					"# workout_example = \"\"\"\r\n",
					"# {\r\n",
					"#     'workoutId': \"random_id\",\r\n",
					"#     'ownerId': \"random\",\r\n",
					"#     'workoutName': 'Any workout name',\r\n",
					"#     'description': 'FTP 200, TSS 1, NP 114, IF 0.57',\r\n",
					"#     'sportType': {'sportTypeId': 2, 'sportTypeKey': 'cycling'},\r\n",
					"#     'workoutSegments': [\r\n",
					"#         {\r\n",
					"#             'segmentOrder': 1,\r\n",
					"#             'sportType': {'sportTypeId': 2, 'sportTypeKey': 'cycling'},\r\n",
					"#             'workoutSteps': [\r\n",
					"#                 {'type': 'ExecutableStepDTO', 'stepOrder': 1,\r\n",
					"#                     'stepType': {'stepTypeId': 3, 'stepTypeKey': 'interval'}, 'childStepId': None,\r\n",
					"#                     'endCondition': {'conditionTypeId': 2, 'conditionTypeKey': 'time'}, 'endConditionValue': 60,\r\n",
					"#                     'targetType': {'workoutTargetTypeId': 2, 'workoutTargetTypeKey': 'power.zone'},\r\n",
					"#                     'targetValueOne': 95, 'targetValueTwo': 105},\r\n",
					"#                 {'type': 'ExecutableStepDTO', 'stepOrder': 2,\r\n",
					"#                     'stepType': {'stepTypeId': 3, 'stepTypeKey': 'interval'}, 'childStepId': None,\r\n",
					"#                     'endCondition': {'conditionTypeId': 2, 'conditionTypeKey': 'time'}, 'endConditionValue': 120,\r\n",
					"#                     'targetType': {'workoutTargetTypeId': 2, 'workoutTargetTypeKey': 'power.zone'},\r\n",
					"#                     'targetValueOne': 114, 'targetValueTwo': 126}\r\n",
					"#             ]\r\n",
					"#         }\r\n",
					"#     ]\r\n",
					"# }\r\n",
					"# \"\"\"\r\n",
					"\r\n",
					"menu_options = {\r\n",
					"    \"act\":\"Activities between dates\",\r\n",
					"    \"1\": \"Get full name\",\r\n",
					"    \"2\": \"Get unit system\",\r\n",
					"    \"3\": f\"Get activity data for '{today.isoformat()}'\",\r\n",
					"    \"4\": f\"Get activity data for '{today.isoformat()}' (compatible with garminconnect-ha)\",\r\n",
					"    \"5\": f\"Get body composition data for '{today.isoformat()}' (compatible with garminconnect-ha)\",\r\n",
					"    \"6\": f\"Get body composition data for from '{startdate.isoformat()}' to '{today.isoformat()}' (to be compatible with garminconnect-ha)\",\r\n",
					"    \"7\": f\"Get stats and body composition data for '{today.isoformat()}'\",\r\n",
					"    \"8\": f\"Get steps data for '{today.isoformat()}'\",\r\n",
					"    \"9\": f\"Get heart rate data for '{today.isoformat()}'\",\r\n",
					"    \"0\": f\"Get training readiness data for '{today.isoformat()}'\",\r\n",
					"    \"-\": f\"Get daily step data for '{startdate.isoformat()}' to '{today.isoformat()}'\",\r\n",
					"    \"/\": f\"Get body battery data for '{startdate.isoformat()}' to '{today.isoformat()}'\",\r\n",
					"    \"!\": f\"Get floors data for '{startdate.isoformat()}'\",\r\n",
					"    \"?\": f\"Get blood pressure data for '{startdate.isoformat()}' to '{today.isoformat()}'\",\r\n",
					"    \".\": f\"Get training status data for '{today.isoformat()}'\",\r\n",
					"    \"a\": f\"Get resting heart rate data for {today.isoformat()}'\",\r\n",
					"    \"b\": f\"Get hydration data for '{today.isoformat()}'\",\r\n",
					"    \"c\": f\"Get sleep data for '{today.isoformat()}'\",\r\n",
					"    \"d\": f\"Get stress data for '{today.isoformat()}'\",\r\n",
					"    \"e\": f\"Get respiration data for '{today.isoformat()}'\",\r\n",
					"    \"f\": f\"Get SpO2 data for '{today.isoformat()}'\",\r\n",
					"    \"g\": f\"Get max metric data (like vo2MaxValue and fitnessAge) for '{today.isoformat()}'\",\r\n",
					"    \"h\": \"Get personal record for user\",\r\n",
					"    \"i\": \"Get earned badges for user\",\r\n",
					"    \"j\": f\"Get adhoc challenges data from start '{start}' and limit '{limit}'\",\r\n",
					"    \"k\": f\"Get available badge challenges data from '{start_badge}' and limit '{limit}'\",\r\n",
					"    \"l\": f\"Get badge challenges data from '{start_badge}' and limit '{limit}'\",\r\n",
					"    \"m\": f\"Get non completed badge challenges data from '{start_badge}' and limit '{limit}'\",\r\n",
					"    \"n\": f\"Get activities data from start '{start}' and limit '{limit}'\",\r\n",
					"    \"o\": \"Get last activity\",\r\n",
					"    \"p\": f\"Download activities data by date from '{startdate.isoformat()}' to '{today.isoformat()}'\",\r\n",
					"    \"r\": f\"Get all kinds of activities data from '{start}'\",\r\n",
					"    \"s\": f\"Upload activity data from file '{activityfile}'\",\r\n",
					"    \"t\": \"Get all kinds of Garmin device info\",\r\n",
					"    \"u\": \"Get active goals\",\r\n",
					"    \"v\": \"Get future goals\",\r\n",
					"    \"w\": \"Get past goals\",\r\n",
					"    \"y\": \"Get all Garmin device alarms\",\r\n",
					"    \"x\": f\"Get Heart Rate Variability data (HRV) for '{today.isoformat()}'\",\r\n",
					"    \"z\": f\"Get progress summary from '{startdate.isoformat()}' to '{today.isoformat()}' for all metrics\",\r\n",
					"    \"A\": \"Get gear, the defaults, activity types and statistics\",\r\n",
					"    \"B\": f\"Get weight-ins from '{startdate.isoformat()}' to '{today.isoformat()}'\",\r\n",
					"    \"C\": f\"Get daily weigh-ins for '{today.isoformat()}'\",\r\n",
					"    \"D\": f\"Delete all weigh-ins for '{today.isoformat()}'\",\r\n",
					"    \"E\": f\"Add a weigh-in of {weight}{weightunit} on '{today.isoformat()}'\",\r\n",
					"    \"F\": f\"Get virtual challenges/expeditions from '{startdate.isoformat()}' to '{today.isoformat()}'\",\r\n",
					"    \"G\": f\"Get hill score data from '{startdate.isoformat()}' to '{today.isoformat()}'\",\r\n",
					"    \"H\": f\"Get endurance score data from '{startdate.isoformat()}' to '{today.isoformat()}'\",\r\n",
					"    \"I\": f\"Get activities for date '{today.isoformat()}'\",\r\n",
					"    \"J\": \"Get race predictions\",\r\n",
					"    \"K\": f\"Get all day stress data for '{today.isoformat()}'\",\r\n",
					"    \"L\": f\"Add body composition for '{today.isoformat()}'\",\r\n",
					"    \"M\": \"Set blood pressure '120,80,80,notes='Testing with example.py'\",\r\n",
					"    \"N\": \"Get user profile/settings\",\r\n",
					"    \"O\": f\"Reload epoch data for {today.isoformat()}\",\r\n",
					"    \"P\": \"Get workouts 0-100, get and download last one to .FIT file\",\r\n",
					"    # \"Q\": \"Upload workout from json data\",\r\n",
					"    \"R\": \"Get solar data from your devices\",\r\n",
					"    \"S\": \"Get pregnancy summary data\",\r\n",
					"    \"Z\": \"Remove stored login tokens (logout)\",\r\n",
					"    \"q\": \"Exit\",\r\n",
					"}\r\n",
					""
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"source": [
					"def print_menu():\r\n",
					"    \"\"\"Print examples menu.\"\"\"\r\n",
					"    for key in menu_options.keys():\r\n",
					"        print(f\"{key} -- {menu_options[key]}\")\r\n",
					"\r\n",
					"def display_json(api_call, output):\r\n",
					"    \"\"\"Format API output for better readability.\"\"\"\r\n",
					"\r\n",
					"    dashed = \"-\" * 20\r\n",
					"    header = f\"{dashed} {api_call} {dashed}\"\r\n",
					"    footer = \"-\" * len(header)\r\n",
					"\r\n",
					"    print(header)\r\n",
					"\r\n",
					"    if isinstance(output, (int, str, dict, list)):\r\n",
					"        print(json.dumps(output, indent=4))\r\n",
					"    else:\r\n",
					"        print(output)\r\n",
					"\r\n",
					"    print(footer)\r\n",
					"\r\n",
					"\r\n",
					"def display_text(output):\r\n",
					"    \"\"\"Format API output for better readability.\"\"\"\r\n",
					"\r\n",
					"    dashed = \"-\" * 60\r\n",
					"    header = f\"{dashed}\"\r\n",
					"    footer = \"-\" * len(header)\r\n",
					"\r\n",
					"    print(header)\r\n",
					"    print(json.dumps(output, indent=4))\r\n",
					"    print(footer)\r\n",
					"\r\n",
					"\r\n",
					"def get_credentials():\r\n",
					"    \"\"\"Get user credentials.\"\"\"\r\n",
					"\r\n",
					"    email = input(\"Login e-mail: \")\r\n",
					"    password = getpass(\"Enter password: \")\r\n",
					"\r\n",
					"    return email, password\r\n",
					"\r\n",
					"\r\n",
					"def init_api(email, password):\r\n",
					"    \"\"\"Initialize Garmin API with your credentials.\"\"\"\r\n",
					"\r\n",
					"    try:\r\n",
					"        print(\r\n",
					"            f\"Trying to login to Garmin Connect...'\\n\"\r\n",
					"        )\r\n",
					"        garmin = Garmin(email=email, password=password, is_cn=False, prompt_mfa=get_mfa)\r\n",
					"        #garmin = Garmin(email, password)\r\n",
					"        garmin.login()\r\n",
					"        if garmin:\r\n",
					"            print('Login successful.')\r\n",
					"    except (FileNotFoundError, GarthHTTPError, GarminConnectAuthenticationError, requests.exceptions.HTTPError) as err:\r\n",
					"            logger.error(err)\r\n",
					"            print('Login failed.')\r\n",
					"            return None\r\n",
					"\r\n",
					"    return garmin\r\n",
					"\r\n",
					"\r\n",
					"def get_mfa():\r\n",
					"    \"\"\"Get MFA.\"\"\"\r\n",
					"\r\n",
					"    return input(\"MFA one-time code: \")\r\n",
					"\r\n",
					"\r\n",
					"def print_menu():\r\n",
					"    \"\"\"Print examples menu.\"\"\"\r\n",
					"    for key in menu_options.keys():\r\n",
					"        print(f\"{key} -- {menu_options[key]}\")\r\n",
					"    print(\"Make your selection: \", end=\"\", flush=True)\r\n",
					"\r\n",
					"\r\n",
					"def switch(api, i):\r\n",
					"    \"\"\"Run selected API call.\"\"\"\r\n",
					"\r\n",
					"    # Exit example program\r\n",
					"    if i == \"q\":\r\n",
					"        print(\"Be active, generate some data to fetch next time ;-) Bye!\")\r\n",
					"        sys.exit()\r\n",
					"\r\n",
					"    # Skip requests if login failed\r\n",
					"    if api:\r\n",
					"        try:\r\n",
					"            print(f\"\\n\\nExecuting: {menu_options[i]}\\n\")\r\n",
					"\r\n",
					"            # CUSTOM\r\n",
					"            if i == \"act\":\r\n",
					"                startofdata = startdate\r\n",
					"                endofdatadate = enddate\r\n",
					"                # Get sleep data for 'YYYY-MM-DD'\r\n",
					"                # display_json(\r\n",
					"                #     f\"api.get_activities_by_date('{startofdata.isoformat()},{endofdatadate.isoformat()}')\",\r\n",
					"                #     api.get_activities_by_date(startofdata.isoformat(),endofdatadate.isoformat()),\r\n",
					"                # )\r\n",
					"                write_dataframe_to_parquet(\r\n",
					"                    f\"api.get_activities_by_date('{startofdata.isoformat()},{endofdatadate.isoformat()}')\",\r\n",
					"                    api.get_activities_by_date(startofdata.isoformat(),endofdatadate.isoformat()),\r\n",
					"                    \"get_activities_by_date\",\r\n",
					"                    endofdatadate.isoformat(),\r\n",
					"                    ABFS_DEST_ACCOUNT,\r\n",
					"                    ABFS_DEST_FOLDER\r\n",
					"                )\r\n",
					"\r\n",
					"            # USER BASICS\r\n",
					"            if i == \"1\":\r\n",
					"                # Get full name from profile\r\n",
					"                display_json(\"api.get_full_name()\", api.get_full_name())\r\n",
					"            elif i == \"2\":\r\n",
					"                # Get unit system from profile\r\n",
					"                display_json(\"api.get_unit_system()\", api.get_unit_system())\r\n",
					"\r\n",
					"            # USER STATISTIC SUMMARIES\r\n",
					"            elif i == \"3\":\r\n",
					"                # Get activity data for 'YYYY-MM-DD'\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_stats('{today.isoformat()}')\",\r\n",
					"                    api.get_stats(today.isoformat()),\r\n",
					"                )\r\n",
					"            elif i == \"4\":\r\n",
					"                # Get activity data (to be compatible with garminconnect-ha)\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_user_summary('{today.isoformat()}')\",\r\n",
					"                    api.get_user_summary(today.isoformat()),\r\n",
					"                )\r\n",
					"            elif i == \"5\":\r\n",
					"                # Get body composition data for 'YYYY-MM-DD' (to be compatible with garminconnect-ha)\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_body_composition('{today.isoformat()}')\",\r\n",
					"                    api.get_body_composition(today.isoformat()),\r\n",
					"                )\r\n",
					"            elif i == \"6\":\r\n",
					"                # Get body composition data for multiple days 'YYYY-MM-DD' (to be compatible with garminconnect-ha)\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_body_composition('{startdate.isoformat()}', '{today.isoformat()}')\",\r\n",
					"                    api.get_body_composition(startdate.isoformat(), today.isoformat()),\r\n",
					"                )\r\n",
					"            elif i == \"7\":\r\n",
					"                # Get stats and body composition data for 'YYYY-MM-DD'\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_stats_and_body('{today.isoformat()}')\",\r\n",
					"                    api.get_stats_and_body(today.isoformat()),\r\n",
					"                )\r\n",
					"\r\n",
					"            # USER STATISTICS LOGGED\r\n",
					"            elif i == \"8\":\r\n",
					"                # Get steps data for 'YYYY-MM-DD'\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_steps_data('{today.isoformat()}')\",\r\n",
					"                    api.get_steps_data(today.isoformat()),\r\n",
					"                )\r\n",
					"            elif i == \"9\":\r\n",
					"                # Get heart rate data for 'YYYY-MM-DD'\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_heart_rates('{today.isoformat()}')\",\r\n",
					"                    api.get_heart_rates(today.isoformat()),\r\n",
					"                )\r\n",
					"            elif i == \"0\":\r\n",
					"                # Get training readiness data for 'YYYY-MM-DD'\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_training_readiness('{today.isoformat()}')\",\r\n",
					"                    api.get_training_readiness(today.isoformat()),\r\n",
					"                )\r\n",
					"            elif i == \"/\":\r\n",
					"                # Get daily body battery data for 'YYYY-MM-DD' to 'YYYY-MM-DD'\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_body_battery('{startdate.isoformat()}, {today.isoformat()}')\",\r\n",
					"                    api.get_body_battery(startdate.isoformat(), today.isoformat()),\r\n",
					"                )\r\n",
					"            elif i == \"?\":\r\n",
					"                # Get daily blood pressure data for 'YYYY-MM-DD' to 'YYYY-MM-DD'\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_blood_pressure('{startdate.isoformat()}, {today.isoformat()}')\",\r\n",
					"                    api.get_blood_pressure(startdate.isoformat(), today.isoformat()),\r\n",
					"                )\r\n",
					"            elif i == \"-\":\r\n",
					"                # Get daily step data for 'YYYY-MM-DD'\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_daily_steps('{startdate.isoformat()}, {today.isoformat()}')\",\r\n",
					"                    api.get_daily_steps(startdate.isoformat(), today.isoformat()),\r\n",
					"                )\r\n",
					"            elif i == \"!\":\r\n",
					"                # Get daily floors data for 'YYYY-MM-DD'\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_floors('{today.isoformat()}')\",\r\n",
					"                    api.get_floors(today.isoformat()),\r\n",
					"                )\r\n",
					"            elif i == \".\":\r\n",
					"                # Get training status data for 'YYYY-MM-DD'\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_training_status('{today.isoformat()}')\",\r\n",
					"                    api.get_training_status(today.isoformat()),\r\n",
					"                )\r\n",
					"            elif i == \"a\":\r\n",
					"                # Get resting heart rate data for 'YYYY-MM-DD'\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_rhr_day('{today.isoformat()}')\",\r\n",
					"                    api.get_rhr_day(today.isoformat()),\r\n",
					"                )\r\n",
					"            elif i == \"b\":\r\n",
					"                # Get hydration data 'YYYY-MM-DD'\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_hydration_data('{today.isoformat()}')\",\r\n",
					"                    api.get_hydration_data(today.isoformat()),\r\n",
					"                )\r\n",
					"            elif i == \"c\":\r\n",
					"                endofdatadate = enddate\r\n",
					"                # Get sleep data for 'YYYY-MM-DD'\r\n",
					"                # display_json(\r\n",
					"                #     f\"api.get_sleep_data('{today.isoformat()}')\",\r\n",
					"                #     api.get_sleep_data(today.isoformat()),\r\n",
					"                # )\r\n",
					"                write_dataframe_to_parquet(\r\n",
					"                    f\"api.get_sleep_data('{endofdatadate.isoformat()}')\",\r\n",
					"                    api.get_sleep_data(endofdatadate.isoformat()),\r\n",
					"                    \"get_sleep_data\",\r\n",
					"                    endofdatadate.isoformat(),\r\n",
					"                    ABFS_DEST_ACCOUNT,\r\n",
					"                    ABFS_DEST_FOLDER\r\n",
					"                )\r\n",
					"\r\n",
					"            elif i == \"d\":\r\n",
					"                # Get stress data for 'YYYY-MM-DD'\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_stress_data('{today.isoformat()}')\",\r\n",
					"                    api.get_stress_data(today.isoformat()),\r\n",
					"                )\r\n",
					"            elif i == \"e\":\r\n",
					"                # Get respiration data for 'YYYY-MM-DD'\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_respiration_data('{today.isoformat()}')\",\r\n",
					"                    api.get_respiration_data(today.isoformat()),\r\n",
					"                )\r\n",
					"            elif i == \"f\":\r\n",
					"                # Get SpO2 data for 'YYYY-MM-DD'\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_spo2_data('{today.isoformat()}')\",\r\n",
					"                    api.get_spo2_data(today.isoformat()),\r\n",
					"                )\r\n",
					"            elif i == \"g\":\r\n",
					"                # Get max metric data (like vo2MaxValue and fitnessAge) for 'YYYY-MM-DD'\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_max_metrics('{today.isoformat()}')\",\r\n",
					"                    api.get_max_metrics(today.isoformat()),\r\n",
					"                )\r\n",
					"            elif i == \"h\":\r\n",
					"                # Get personal record for user\r\n",
					"                display_json(\"api.get_personal_record()\", api.get_personal_record())\r\n",
					"            elif i == \"i\":\r\n",
					"                # Get earned badges for user\r\n",
					"                display_json(\"api.get_earned_badges()\", api.get_earned_badges())\r\n",
					"            elif i == \"j\":\r\n",
					"                # Get adhoc challenges data from start and limit\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_adhoc_challenges({start},{limit})\",\r\n",
					"                    api.get_adhoc_challenges(start, limit),\r\n",
					"                )  # 1=start, 100=limit\r\n",
					"            elif i == \"k\":\r\n",
					"                # Get available badge challenges data from start and limit\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_available_badge_challenges({start_badge}, {limit})\",\r\n",
					"                    api.get_available_badge_challenges(start_badge, limit),\r\n",
					"                )  # 1=start, 100=limit\r\n",
					"            elif i == \"l\":\r\n",
					"                # Get badge challenges data from start and limit\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_badge_challenges({start_badge}, {limit})\",\r\n",
					"                    api.get_badge_challenges(start_badge, limit),\r\n",
					"                )  # 1=start, 100=limit\r\n",
					"            elif i == \"m\":\r\n",
					"                # Get non completed badge challenges data from start and limit\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_non_completed_badge_challenges({start_badge}, {limit})\",\r\n",
					"                    api.get_non_completed_badge_challenges(start_badge, limit),\r\n",
					"                )  # 1=start, 100=limit\r\n",
					"\r\n",
					"            # ACTIVITIES\r\n",
					"            elif i == \"n\":\r\n",
					"                # Get activities data from start and limit\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_activities({start}, {limit})\",\r\n",
					"                    api.get_activities(start, limit),\r\n",
					"                )  # 0=start, 1=limit\r\n",
					"            elif i == \"o\":\r\n",
					"                # Get last activity\r\n",
					"                display_json(\"api.get_last_activity()\", api.get_last_activity())\r\n",
					"            elif i == \"p\":\r\n",
					"                # Get activities data from startdate 'YYYY-MM-DD' to enddate 'YYYY-MM-DD', with (optional) activitytype\r\n",
					"                # Possible values are: cycling, running, swimming, multi_sport, fitness_equipment, hiking, walking, other\r\n",
					"                activities = api.get_activities_by_date(\r\n",
					"                    startdate.isoformat(), today.isoformat(), activitytype\r\n",
					"                )\r\n",
					"\r\n",
					"                # Download activities\r\n",
					"                for activity in activities:\r\n",
					"                    activity_id = activity[\"activityId\"]\r\n",
					"                    activity_name = activity[\"activityName\"]\r\n",
					"                    display_text(activity)\r\n",
					"\r\n",
					"                    print(\r\n",
					"                        f\"api.download_activity({activity_id}, dl_fmt=api.ActivityDownloadFormat.GPX)\"\r\n",
					"                    )\r\n",
					"                    gpx_data = api.download_activity(\r\n",
					"                        activity_id, dl_fmt=api.ActivityDownloadFormat.GPX\r\n",
					"                    )\r\n",
					"                    output_file = f\"./{str(activity_name)}.gpx\"\r\n",
					"                    with open(output_file, \"wb\") as fb:\r\n",
					"                        fb.write(gpx_data)\r\n",
					"                    print(f\"Activity data downloaded to file {output_file}\")\r\n",
					"\r\n",
					"                    print(\r\n",
					"                        f\"api.download_activity({activity_id}, dl_fmt=api.ActivityDownloadFormat.TCX)\"\r\n",
					"                    )\r\n",
					"                    tcx_data = api.download_activity(\r\n",
					"                        activity_id, dl_fmt=api.ActivityDownloadFormat.TCX\r\n",
					"                    )\r\n",
					"                    output_file = f\"./{str(activity_name)}.tcx\"\r\n",
					"                    with open(output_file, \"wb\") as fb:\r\n",
					"                        fb.write(tcx_data)\r\n",
					"                    print(f\"Activity data downloaded to file {output_file}\")\r\n",
					"\r\n",
					"                    print(\r\n",
					"                        f\"api.download_activity({activity_id}, dl_fmt=api.ActivityDownloadFormat.ORIGINAL)\"\r\n",
					"                    )\r\n",
					"                    zip_data = api.download_activity(\r\n",
					"                        activity_id, dl_fmt=api.ActivityDownloadFormat.ORIGINAL\r\n",
					"                    )\r\n",
					"                    output_file = f\"./{str(activity_name)}.zip\"\r\n",
					"                    with open(output_file, \"wb\") as fb:\r\n",
					"                        fb.write(zip_data)\r\n",
					"                    print(f\"Activity data downloaded to file {output_file}\")\r\n",
					"\r\n",
					"                    print(\r\n",
					"                        f\"api.download_activity({activity_id}, dl_fmt=api.ActivityDownloadFormat.CSV)\"\r\n",
					"                    )\r\n",
					"                    csv_data = api.download_activity(\r\n",
					"                        activity_id, dl_fmt=api.ActivityDownloadFormat.CSV\r\n",
					"                    )\r\n",
					"                    output_file = f\"./{str(activity_name)}.csv\"\r\n",
					"                    with open(output_file, \"wb\") as fb:\r\n",
					"                        fb.write(csv_data)\r\n",
					"                    print(f\"Activity data downloaded to file {output_file}\")\r\n",
					"\r\n",
					"            elif i == \"r\":\r\n",
					"                # Get activities data from start and limit\r\n",
					"                activities = api.get_activities(start, limit)  # 0=start, 1=limit\r\n",
					"\r\n",
					"                # Get activity splits\r\n",
					"                first_activity_id = activities[0].get(\"activityId\")\r\n",
					"\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_activity_splits({first_activity_id})\",\r\n",
					"                    api.get_activity_splits(first_activity_id),\r\n",
					"                )\r\n",
					"\r\n",
					"                # Get activity split summaries for activity id\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_activity_split_summaries({first_activity_id})\",\r\n",
					"                    api.get_activity_split_summaries(first_activity_id),\r\n",
					"                )\r\n",
					"\r\n",
					"                # Get activity weather data for activity\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_activity_weather({first_activity_id})\",\r\n",
					"                    api.get_activity_weather(first_activity_id),\r\n",
					"                )\r\n",
					"\r\n",
					"                # Get activity hr timezones id\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_activity_hr_in_timezones({first_activity_id})\",\r\n",
					"                    api.get_activity_hr_in_timezones(first_activity_id),\r\n",
					"                )\r\n",
					"\r\n",
					"                # Get activity details for activity id\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_activity_details({first_activity_id})\",\r\n",
					"                    api.get_activity_details(first_activity_id),\r\n",
					"                )\r\n",
					"\r\n",
					"                # Get gear data for activity id\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_activity_gear({first_activity_id})\",\r\n",
					"                    api.get_activity_gear(first_activity_id),\r\n",
					"                )\r\n",
					"\r\n",
					"                # Activity data for activity id\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_activity({first_activity_id})\",\r\n",
					"                    api.get_activity(first_activity_id),\r\n",
					"                )\r\n",
					"\r\n",
					"                # Get exercise sets in case the activity is a strength_training\r\n",
					"                if activities[0][\"activityType\"][\"typeKey\"] == \"strength_training\":\r\n",
					"                    display_json(\r\n",
					"                        f\"api.get_activity_exercise_sets({first_activity_id})\",\r\n",
					"                        api.get_activity_exercise_sets(first_activity_id),\r\n",
					"                    )\r\n",
					"\r\n",
					"            elif i == \"s\":\r\n",
					"                try:\r\n",
					"                    # Upload activity from file\r\n",
					"                    display_json(\r\n",
					"                        f\"api.upload_activity({activityfile})\",\r\n",
					"                        api.upload_activity(activityfile),\r\n",
					"                    )\r\n",
					"                except FileNotFoundError:\r\n",
					"                    print(f\"File to upload not found: {activityfile}\")\r\n",
					"\r\n",
					"            # DEVICES\r\n",
					"            elif i == \"t\":\r\n",
					"                # Get Garmin devices\r\n",
					"                devices = api.get_devices()\r\n",
					"                display_json(\"api.get_devices()\", devices)\r\n",
					"\r\n",
					"                # Get device last used\r\n",
					"                device_last_used = api.get_device_last_used()\r\n",
					"                display_json(\"api.get_device_last_used()\", device_last_used)\r\n",
					"\r\n",
					"                # Get settings per device\r\n",
					"                for device in devices:\r\n",
					"                    device_id = device[\"deviceId\"]\r\n",
					"                    display_json(\r\n",
					"                        f\"api.get_device_settings({device_id})\",\r\n",
					"                        api.get_device_settings(device_id),\r\n",
					"                    )\r\n",
					"\r\n",
					"                # Get primary training device information\r\n",
					"                primary_training_device = api.get_primary_training_device()\r\n",
					"                display_json(\"api.get_primary_training_device()\", primary_training_device)\r\n",
					"\r\n",
					"            elif i == \"R\":\r\n",
					"                # Get solar data from Garmin devices\r\n",
					"                devices = api.get_devices()\r\n",
					"                display_json(\"api.get_devices()\", devices)\r\n",
					"\r\n",
					"                # Get device last used\r\n",
					"                device_last_used = api.get_device_last_used()\r\n",
					"                display_json(\"api.get_device_last_used()\", device_last_used)\r\n",
					"\r\n",
					"                # Get settings per device\r\n",
					"                for device in devices:\r\n",
					"                    device_id = device[\"deviceId\"]\r\n",
					"                    display_json(\r\n",
					"                        f\"api.get_device_solar_data({device_id}, {today.isoformat()})\",\r\n",
					"                        api.get_device_solar_data(device_id, today.isoformat()),\r\n",
					"                    )\r\n",
					"            # GOALS\r\n",
					"            elif i == \"u\":\r\n",
					"                # Get active goals\r\n",
					"                goals = api.get_goals(\"active\")\r\n",
					"                display_json('api.get_goals(\"active\")', goals)\r\n",
					"\r\n",
					"            elif i == \"v\":\r\n",
					"                # Get future goals\r\n",
					"                goals = api.get_goals(\"future\")\r\n",
					"                display_json('api.get_goals(\"future\")', goals)\r\n",
					"\r\n",
					"            elif i == \"w\":\r\n",
					"                # Get past goals\r\n",
					"                goals = api.get_goals(\"past\")\r\n",
					"                display_json('api.get_goals(\"past\")', goals)\r\n",
					"\r\n",
					"            # ALARMS\r\n",
					"            elif i == \"y\":\r\n",
					"                # Get Garmin device alarms\r\n",
					"                alarms = api.get_device_alarms()\r\n",
					"                for alarm in alarms:\r\n",
					"                    alarm_id = alarm[\"alarmId\"]\r\n",
					"                    display_json(f\"api.get_device_alarms({alarm_id})\", alarm)\r\n",
					"\r\n",
					"            elif i == \"x\":\r\n",
					"                # Get Heart Rate Variability (hrv) data\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_hrv_data({today.isoformat()})\",\r\n",
					"                    api.get_hrv_data(today.isoformat()),\r\n",
					"                )\r\n",
					"\r\n",
					"            elif i == \"z\":\r\n",
					"                # Get progress summary\r\n",
					"                for metric in [\r\n",
					"                    \"elevationGain\",\r\n",
					"                    \"duration\",\r\n",
					"                    \"distance\",\r\n",
					"                    \"movingDuration\",\r\n",
					"                ]:\r\n",
					"                    display_json(\r\n",
					"                        f\"api.get_progress_summary_between_dates({today.isoformat()})\",\r\n",
					"                        api.get_progress_summary_between_dates(\r\n",
					"                            startdate.isoformat(), today.isoformat(), metric\r\n",
					"                        ),\r\n",
					"                    )\r\n",
					"            # GEAR\r\n",
					"            elif i == \"A\":\r\n",
					"                last_used_device = api.get_device_last_used()\r\n",
					"                display_json(\"api.get_device_last_used()\", last_used_device)\r\n",
					"                userProfileNumber = last_used_device[\"userProfileNumber\"]\r\n",
					"                gear = api.get_gear(userProfileNumber)\r\n",
					"                display_json(\"api.get_gear()\", gear)\r\n",
					"                display_json(\r\n",
					"                    \"api.get_gear_defaults()\", api.get_gear_defaults(userProfileNumber)\r\n",
					"                )\r\n",
					"                display_json(\"api.get()\", api.get_activity_types())\r\n",
					"                for gear in gear:\r\n",
					"                    uuid = gear[\"uuid\"]\r\n",
					"                    name = gear[\"displayName\"]\r\n",
					"                    display_json(\r\n",
					"                        f\"api.get_gear_stats({uuid}) / {name}\", api.get_gear_stats(uuid)\r\n",
					"                    )\r\n",
					"\r\n",
					"            # WEIGHT-INS\r\n",
					"            elif i == \"B\":\r\n",
					"                # Get weigh-ins data\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_weigh_ins({startdate.isoformat()}, {today.isoformat()})\",\r\n",
					"                    api.get_weigh_ins(startdate.isoformat(), today.isoformat())\r\n",
					"                )\r\n",
					"            elif i == \"C\":\r\n",
					"                # Get daily weigh-ins data\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_daily_weigh_ins({today.isoformat()})\",\r\n",
					"                    api.get_daily_weigh_ins(today.isoformat())\r\n",
					"                )\r\n",
					"            elif i == \"D\":\r\n",
					"                # Delete weigh-ins data for today\r\n",
					"                display_json(\r\n",
					"                    f\"api.delete_weigh_ins({today.isoformat()}, delete_all=True)\",\r\n",
					"                    api.delete_weigh_ins(today.isoformat(), delete_all=True)\r\n",
					"                )\r\n",
					"            elif i == \"E\":\r\n",
					"                # Add a weigh-in\r\n",
					"                weight = 89.6\r\n",
					"                unit = 'kg'\r\n",
					"                display_json(\r\n",
					"                    f\"api.add_weigh_in(weight={weight}, unitKey={unit})\",\r\n",
					"                    api.add_weigh_in(weight=weight, unitKey=unit)\r\n",
					"                )\r\n",
					"\r\n",
					"            # CHALLENGES/EXPEDITIONS\r\n",
					"            elif i == \"F\":\r\n",
					"                # Get virtual challenges/expeditions\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_inprogress_virtual_challenges({startdate.isoformat()}, {today.isoformat()})\",\r\n",
					"                    api.get_inprogress_virtual_challenges(startdate.isoformat(), today.isoformat())\r\n",
					"                )\r\n",
					"            elif i == \"G\":\r\n",
					"                # Get hill score data\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_hill_score({startdate.isoformat()}, {today.isoformat()})\",\r\n",
					"                    api.get_hill_score(startdate.isoformat(), today.isoformat())\r\n",
					"                )\r\n",
					"            elif i == \"H\":\r\n",
					"                # Get endurance score data\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_endurance_score({startdate.isoformat()}, {today.isoformat()})\",\r\n",
					"                    api.get_endurance_score(startdate.isoformat(), today.isoformat())\r\n",
					"                )\r\n",
					"            elif i == \"I\":\r\n",
					"                # Get activities for date\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_activities_fordate({today.isoformat()})\",\r\n",
					"                    api.get_activities_fordate(today.isoformat())\r\n",
					"                )\r\n",
					"            elif i == \"J\":\r\n",
					"                # Get race predictions\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_race_predictions()\",\r\n",
					"                    api.get_race_predictions()\r\n",
					"                )\r\n",
					"            elif i == \"K\":\r\n",
					"                # Get all day stress data for date\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_all_day_stress({today.isoformat()})\",\r\n",
					"                    api.get_all_day_stress(today.isoformat())\r\n",
					"                )\r\n",
					"            elif i == \"L\":\r\n",
					"                # Add body composition\r\n",
					"                weight = 70.0\r\n",
					"                percent_fat = 15.4\r\n",
					"                percent_hydration = 54.8\r\n",
					"                visceral_fat_mass = 10.8\r\n",
					"                bone_mass = 2.9\r\n",
					"                muscle_mass = 55.2\r\n",
					"                basal_met = 1454.1\r\n",
					"                active_met = None\r\n",
					"                physique_rating = None\r\n",
					"                metabolic_age = 33.0\r\n",
					"                visceral_fat_rating = None\r\n",
					"                bmi = 22.2\r\n",
					"                display_json(\r\n",
					"                    f\"api.add_body_composition({today.isoformat()}, {weight}, {percent_fat}, {percent_hydration}, {visceral_fat_mass}, {bone_mass}, {muscle_mass}, {basal_met}, {active_met}, {physique_rating}, {metabolic_age}, {visceral_fat_rating}, {bmi})\",\r\n",
					"                    api.add_body_composition(\r\n",
					"                        today.isoformat(),\r\n",
					"                        weight=weight,\r\n",
					"                        percent_fat=percent_fat,\r\n",
					"                        percent_hydration=percent_hydration,\r\n",
					"                        visceral_fat_mass=visceral_fat_mass,\r\n",
					"                        bone_mass=bone_mass,\r\n",
					"                        muscle_mass=muscle_mass,\r\n",
					"                        basal_met=basal_met,\r\n",
					"                        active_met=active_met,\r\n",
					"                        physique_rating=physique_rating,\r\n",
					"                        metabolic_age=metabolic_age,\r\n",
					"                        visceral_fat_rating=visceral_fat_rating,\r\n",
					"                        bmi=bmi,\r\n",
					"                    )\r\n",
					"                )\r\n",
					"            elif i == \"M\":\r\n",
					"                # Set blood pressure values\r\n",
					"                display_json(\r\n",
					"                    f\"api.set_blood_pressure(120,80,80,notes=`Testing with example.py`)\",\r\n",
					"                    api.set_blood_pressure(120,80,80,notes=\"Testing with example.py\")\r\n",
					"                )\r\n",
					"            elif i == \"N\":\r\n",
					"                # Get user profile\r\n",
					"                display_json(\r\n",
					"                    \"api.get_user_profile()\",\r\n",
					"                    api.get_user_profile()\r\n",
					"                )\r\n",
					"            elif i == \"O\":\r\n",
					"                # Reload epoch data for date\r\n",
					"                display_json(\r\n",
					"                    f\"api.request_reload({today.isoformat()})\",\r\n",
					"                    api.request_reload(today.isoformat())\r\n",
					"                )\r\n",
					"\r\n",
					"            # WORKOUTS\r\n",
					"            elif i == \"P\":\r\n",
					"                workouts = api.get_workouts()\r\n",
					"                # Get workout 0-100\r\n",
					"                display_json(\r\n",
					"                    \"api.get_workouts()\",\r\n",
					"                    api.get_workouts()\r\n",
					"                )\r\n",
					"\r\n",
					"                # Get last fetched workout\r\n",
					"                workout_id = workouts[-1]['workoutId']\r\n",
					"                workout_name = workouts[-1][\"workoutName\"]\r\n",
					"                display_json(\r\n",
					"                    f\"api.get_workout_by_id({workout_id})\",\r\n",
					"                    api.get_workout_by_id(workout_id))\r\n",
					"\r\n",
					"                # Download last fetched workout\r\n",
					"                print(\r\n",
					"                    f\"api.download_workout({workout_id})\"\r\n",
					"                )\r\n",
					"                workout_data = api.download_workout(\r\n",
					"                    workout_id\r\n",
					"                )\r\n",
					"                \r\n",
					"                output_file = f\"./{str(workout_name)}.fit\"\r\n",
					"                with open(output_file, \"wb\") as fb:\r\n",
					"                    fb.write(workout_data)\r\n",
					"\r\n",
					"                print(f\"Workout data downloaded to file {output_file}\")\r\n",
					"\r\n",
					"            # elif i == \"Q\":\r\n",
					"            #     display_json(\r\n",
					"            #         f\"api.upload_workout({workout_example})\",\r\n",
					"            #         api.upload_workout(workout_example))\r\n",
					"\r\n",
					"            # WOMEN'S HEALTH\r\n",
					"            elif i == \"S\":\r\n",
					"                # Get pregnancy summary data\r\n",
					"                display_json(\r\n",
					"                    \"api.get_pregnancy_summary()\",\r\n",
					"                    api.get_pregnancy_summary()\r\n",
					"                )\r\n",
					"\r\n",
					"            # Additional related calls:\r\n",
					"            # get_menstrual_data_for_date(self, fordate: str): takes a single date and returns the Garmin Menstrual Summary data for that date\r\n",
					"            # get_menstrual_calendar_data(self, startdate: str, enddate: str) takes two dates and returns summaries of cycles that have days between the two days\r\n",
					"\r\n",
					"            elif i == \"Z\":\r\n",
					"                # Remove stored login tokens for Garmin Connect portal\r\n",
					"                tokendir = os.path.expanduser(tokenstore)\r\n",
					"                print(f\"Removing stored login tokens from: {tokendir}\")\r\n",
					"                \r\n",
					"                try:\r\n",
					"                    for root, dirs, files in os.walk(tokendir, topdown=False):\r\n",
					"                        for name in files:\r\n",
					"                            os.remove(os.path.join(root, name))\r\n",
					"                        for name in dirs:\r\n",
					"                            os.rmdir(os.path.join(root, name))\r\n",
					"                    print(f\"Directory {tokendir} removed\")\r\n",
					"                except FileNotFoundError:\r\n",
					"                    print(f\"Directory not found: {tokendir}\")\r\n",
					"                api = None\r\n",
					"\r\n",
					"        except (\r\n",
					"            GarminConnectConnectionError,\r\n",
					"            GarminConnectAuthenticationError,\r\n",
					"            GarminConnectTooManyRequestsError,\r\n",
					"            requests.exceptions.HTTPError,\r\n",
					"            GarthHTTPError\r\n",
					"        ) as err:\r\n",
					"            logger.error(err)\r\n",
					"        except KeyError:\r\n",
					"            # Invalid menu option chosen\r\n",
					"            pass\r\n",
					"    else:\r\n",
					"        status=\"Could not login to Garmin Connect, try again later.\"\r\n",
					"        print(status)\r\n",
					"\r\n",
					"# Function to fetch keys from keyvault\r\n",
					"def get_api_key_from_keyvault(key_vault_name, secret_name, linked_service_name): \r\n",
					"    try:\r\n",
					"        api_key = mssparkutils.credentials.getSecret(key_vault_name,secret_name, linked_service_name)\r\n",
					"        return api_key\r\n",
					"    except Exception as e:\r\n",
					"        print(f\"Error retrieving API key from Key Vault: {e}\")\r\n",
					"        return None\r\n",
					"\r\n",
					"# Function to write Dartaframe to parquet\r\n",
					"def write_dataframe_to_parquet(api_call, output, garmin_api_endpoint, endofdatadate ,pathacc, pathfolder ): \r\n",
					"    try:\r\n",
					"        # pathacc = ABFS_DEST_ACCOUNT #\"abfss://personalprojectsfs@personalprojectsrslake.dfs.core.windows.net/synapse/workspaces/personalprojectsrgsynapse/DataFiles/Garmin/\"\r\n",
					"        # pathfolder = ABFS_DEST_FOLDER\r\n",
					"        #df = pd.DataFrame(output)\r\n",
					"        df = pd.json_normalize(output)\r\n",
					"        #df.json_normalize(output, max_level=1)\r\n",
					"        file = \"garmin_\" +garmin_api_endpoint+\"-\" + endofdatadate + \".parquet\"\r\n",
					"        full_path = f\"{pathacc}{pathfolder}{file}\"\r\n",
					"        df.to_parquet(full_path, engine='pyarrow')\r\n",
					"        status = f\"SUCCESS: Data written to :\\n{full_path}\"\r\n",
					"        #print(status)\r\n",
					"        logger.error(status)\r\n",
					"    except Exception as e:\r\n",
					"        status = f\"Error writing data to :\\n{full_path}\\n {e}\"\r\n",
					"        print(status)\r\n",
					"        return None"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Main program \r\n",
					"print(\"\\n*** Script by Jude Moore May 2024. Original Garmin Connect API code by cyberjunky ***\\n\")\r\n",
					"\r\n",
					"# Get API password from Key Vault. Replace with hard-coded values to avoid the KeyVault request\r\n",
					"try:\r\n",
					"    email = get_api_key_from_keyvault(KEYVAULTNAME, GARMIN_UNAME_KEY, KEYVAULTLINKEDSERVICE)\r\n",
					"except Exception as e:\r\n",
					"    print(\"Garmin_Username retrieval/initialisation failed. Check your Key Vault configuration/python. {e}\")\r\n",
					"\r\n",
					"try:\r\n",
					"    password = get_api_key_from_keyvault(KEYVAULTNAME, GARMIN_PASSW_KEY, KEYVAULTLINKEDSERVICE)\r\n",
					"except Exception as e:\r\n",
					"    print(\"Garmin_Password retrieval/initialisation failed. Check your Key Vault configuration/python. {e}\")\r\n",
					"\r\n",
					"api = init_api(email, password)\r\n",
					"\r\n",
					"if api:\r\n",
					"    # Display menu\r\n",
					"    #print_menu() \r\n",
					"    #option = readchar.readkey() # jm\r\n",
					"    option = GARMIN_API_OPTION\r\n",
					"    switch(api, option)\r\n",
					"    outputval = f'<html><body><h1>My First Heading TEST</h1><p> TEST message.</p></body></html>' # https://stackoverflow.com/questions/75862049/easily-access-notebook-output-run-in-synapse-pipeline\r\n",
					"    mssparkutils.notebook.exit(outputval)\r\n",
					"else:\r\n",
					"    status = 'Issue logging in.'\r\n",
					"    print(status)\r\n",
					"    logger.error(status)"
				],
				"execution_count": 18
			}
		]
	}
}