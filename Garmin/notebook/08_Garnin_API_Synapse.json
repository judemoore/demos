{
	"name": "08_Garnin_API_Synapse",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "1f3f5d53-ac8c-4858-bdeb-3ff3918171a1"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"GARMIN_API_OPTION = 'act' # see list below\n",
					"DAYS_BEFORETODAY = 15 # end date as offset from today. IE today = 0, yesterday is 1.. \n",
					"DAYS_AGO =  0  # start date as offset from today. IE today = 0, yesterday is 1.. \n",
					"USERCREDS= 'keyvault' # choices are text or keyvault\n",
					"KEYVAULTNAME = 'judeskv'\n",
					"KEYVAULTLINKEDSERVICE = 'judeskvlinked'\n",
					"GARMIN_UNAME_KEY = 'GarminUsername' # Key vzult secret\n",
					"GARMIN_PASSW_KEY = 'GarminPassword' # Key vzult secret\n",
					"ABFS_DEST_ACCOUNT = 'abfss://personalprojectsfs@personalprojectsrslake.dfs.core.windows.net'\n",
					"#ABFS_DEST_ACCOUNT = 'abfss://Garmin@onelake.dfs.fabric.microsoft.com/GarminLakeHouse.Lakehouse/Files' # Fabric\n",
					"ABFS_DEST_FOLDER = '/synapse/workspaces/personalprojectsrgsynapse/DataFiles/Garmin/'\n",
					"#ABFS_DEST_FOLDER = '/Garmin/' # Fabric"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"#!/usr/bin/env python3\n",
					"\"\"\"\n",
					"pip3 install garth requests readchar\n",
					"\n",
					"export EMAIL=<your garmin email>\n",
					"export PASSWORD=<your garmin password>\n",
					"\n",
					"\"\"\"\n",
					"#!/usr/bin/env python3\n",
					"!pip install garminconnect \n",
					"\n",
					"import datetime\n",
					"import json\n",
					"import logging\n",
					"import os\n",
					"import sys\n",
					"from getpass import getpass\n",
					"import pandas as pd\n",
					"\n",
					"import readchar\n",
					"import requests\n",
					"from garth.exc import GarthHTTPError\n",
					"\n",
					"from garminconnect import (\n",
					"    Garmin,\n",
					"    GarminConnectAuthenticationError,\n",
					"    GarminConnectConnectionError,\n",
					"    GarminConnectTooManyRequestsError,\n",
					")\n",
					"\n",
					"# Configure debug logging\n",
					"# logging.basicConfig(level=logging.DEBUG)\n",
					"logging.basicConfig(level=logging.INFO)\n",
					"logger = logging.getLogger(__name__)\n",
					"\n",
					"# # Load environment variables if defined\n",
					"# email = os.getenv(\"EMAIL\")\n",
					"# password = os.getenv(\"PASSWORD\")\n",
					"\n",
					"\n",
					"# Example selections and settings\n",
					"today = datetime.date.today() \n",
					"\n",
					"if DAYS_BEFORETODAY > 0:\n",
					"    enddate = today - datetime.timedelta(days=DAYS_BEFORETODAY)\n",
					"else:\n",
					"    enddate = today \n",
					"\n",
					"if DAYS_AGO > 0:\n",
					"    startdate = today - datetime.timedelta(days=DAYS_AGO)  \n",
					"else:\n",
					"    startdate = today\n",
					"\n",
					"\n",
					"tokenstore = os.getenv(\"GARMINTOKENS\") or \"~/.garminconnect\"\n",
					"tokenstore_base64 = os.getenv(\"GARMINTOKENS_BASE64\") or \"~/.garminconnect_base64\"\n",
					"api = None\n",
					"\n",
					"# Example selections and settings\n",
					"today = datetime.date.today()\n",
					"startdate = today - datetime.timedelta(days=7)  # Select past week\n",
					"start = 0\n",
					"limit = 100\n",
					"start_badge = 1  # Badge related calls calls start counting at 1\n",
					"activitytype = \"\"  # Possible values are: cycling, running, swimming, multi_sport, fitness_equipment, hiking, walking, other\n",
					"activityfile = \"MY_ACTIVITY.fit\"  # Supported file types are: .fit .gpx .tcx\n",
					"weight = 89.6\n",
					"weightunit = 'kg'\n",
					"# workout_example = \"\"\"\n",
					"# {\n",
					"#     'workoutId': \"random_id\",\n",
					"#     'ownerId': \"random\",\n",
					"#     'workoutName': 'Any workout name',\n",
					"#     'description': 'FTP 200, TSS 1, NP 114, IF 0.57',\n",
					"#     'sportType': {'sportTypeId': 2, 'sportTypeKey': 'cycling'},\n",
					"#     'workoutSegments': [\n",
					"#         {\n",
					"#             'segmentOrder': 1,\n",
					"#             'sportType': {'sportTypeId': 2, 'sportTypeKey': 'cycling'},\n",
					"#             'workoutSteps': [\n",
					"#                 {'type': 'ExecutableStepDTO', 'stepOrder': 1,\n",
					"#                     'stepType': {'stepTypeId': 3, 'stepTypeKey': 'interval'}, 'childStepId': None,\n",
					"#                     'endCondition': {'conditionTypeId': 2, 'conditionTypeKey': 'time'}, 'endConditionValue': 60,\n",
					"#                     'targetType': {'workoutTargetTypeId': 2, 'workoutTargetTypeKey': 'power.zone'},\n",
					"#                     'targetValueOne': 95, 'targetValueTwo': 105},\n",
					"#                 {'type': 'ExecutableStepDTO', 'stepOrder': 2,\n",
					"#                     'stepType': {'stepTypeId': 3, 'stepTypeKey': 'interval'}, 'childStepId': None,\n",
					"#                     'endCondition': {'conditionTypeId': 2, 'conditionTypeKey': 'time'}, 'endConditionValue': 120,\n",
					"#                     'targetType': {'workoutTargetTypeId': 2, 'workoutTargetTypeKey': 'power.zone'},\n",
					"#                     'targetValueOne': 114, 'targetValueTwo': 126}\n",
					"#             ]\n",
					"#         }\n",
					"#     ]\n",
					"# }\n",
					"# \"\"\"\n",
					"\n",
					"menu_options = {\n",
					"    \"1\": \"Get full name\",\n",
					"    \"2\": \"Get unit system\",\n",
					"    \"3\": f\"Get activity data for '{today.isoformat()}'\",\n",
					"    \"4\": f\"Get activity data for '{today.isoformat()}' (compatible with garminconnect-ha)\",\n",
					"    \"5\": f\"Get body composition data for '{today.isoformat()}' (compatible with garminconnect-ha)\",\n",
					"    \"6\": f\"Get body composition data for from '{startdate.isoformat()}' to '{today.isoformat()}' (to be compatible with garminconnect-ha)\",\n",
					"    \"7\": f\"Get stats and body composition data for '{today.isoformat()}'\",\n",
					"    \"8\": f\"Get steps data for '{today.isoformat()}'\",\n",
					"    \"9\": f\"Get heart rate data for '{today.isoformat()}'\",\n",
					"    \"0\": f\"Get training readiness data for '{today.isoformat()}'\",\n",
					"    \"-\": f\"Get daily step data for '{startdate.isoformat()}' to '{today.isoformat()}'\",\n",
					"    \"/\": f\"Get body battery data for '{startdate.isoformat()}' to '{today.isoformat()}'\",\n",
					"    \"!\": f\"Get floors data for '{startdate.isoformat()}'\",\n",
					"    \"?\": f\"Get blood pressure data for '{startdate.isoformat()}' to '{today.isoformat()}'\",\n",
					"    \".\": f\"Get training status data for '{today.isoformat()}'\",\n",
					"    \"a\": f\"Get resting heart rate data for {today.isoformat()}'\",\n",
					"    \"b\": f\"Get hydration data for '{today.isoformat()}'\",\n",
					"    \"c\": f\"Get sleep data for '{today.isoformat()}'\",\n",
					"    \"d\": f\"Get stress data for '{today.isoformat()}'\",\n",
					"    \"e\": f\"Get respiration data for '{today.isoformat()}'\",\n",
					"    \"f\": f\"Get SpO2 data for '{today.isoformat()}'\",\n",
					"    \"g\": f\"Get max metric data (like vo2MaxValue and fitnessAge) for '{today.isoformat()}'\",\n",
					"    \"h\": \"Get personal record for user\",\n",
					"    \"i\": \"Get earned badges for user\",\n",
					"    \"j\": f\"Get adhoc challenges data from start '{start}' and limit '{limit}'\",\n",
					"    \"k\": f\"Get available badge challenges data from '{start_badge}' and limit '{limit}'\",\n",
					"    \"l\": f\"Get badge challenges data from '{start_badge}' and limit '{limit}'\",\n",
					"    \"m\": f\"Get non completed badge challenges data from '{start_badge}' and limit '{limit}'\",\n",
					"    \"n\": f\"Get activities data from start '{start}' and limit '{limit}'\",\n",
					"    \"o\": \"Get last activity\",\n",
					"    \"p\": f\"Download activities data by date from '{startdate.isoformat()}' to '{today.isoformat()}'\",\n",
					"    \"r\": f\"Get all kinds of activities data from '{start}'\",\n",
					"    \"s\": f\"Upload activity data from file '{activityfile}'\",\n",
					"    \"t\": \"Get all kinds of Garmin device info\",\n",
					"    \"u\": \"Get active goals\",\n",
					"    \"v\": \"Get future goals\",\n",
					"    \"w\": \"Get past goals\",\n",
					"    \"y\": \"Get all Garmin device alarms\",\n",
					"    \"x\": f\"Get Heart Rate Variability data (HRV) for '{today.isoformat()}'\",\n",
					"    \"z\": f\"Get progress summary from '{startdate.isoformat()}' to '{today.isoformat()}' for all metrics\",\n",
					"    \"A\": \"Get gear, the defaults, activity types and statistics\",\n",
					"    \"B\": f\"Get weight-ins from '{startdate.isoformat()}' to '{today.isoformat()}'\",\n",
					"    \"C\": f\"Get daily weigh-ins for '{today.isoformat()}'\",\n",
					"    \"D\": f\"Delete all weigh-ins for '{today.isoformat()}'\",\n",
					"    \"E\": f\"Add a weigh-in of {weight}{weightunit} on '{today.isoformat()}'\",\n",
					"    \"F\": f\"Get virtual challenges/expeditions from '{startdate.isoformat()}' to '{today.isoformat()}'\",\n",
					"    \"G\": f\"Get hill score data from '{startdate.isoformat()}' to '{today.isoformat()}'\",\n",
					"    \"H\": f\"Get endurance score data from '{startdate.isoformat()}' to '{today.isoformat()}'\",\n",
					"    \"I\": f\"Get activities for date '{today.isoformat()}'\",\n",
					"    \"J\": \"Get race predictions\",\n",
					"    \"K\": f\"Get all day stress data for '{today.isoformat()}'\",\n",
					"    \"L\": f\"Add body composition for '{today.isoformat()}'\",\n",
					"    \"M\": \"Set blood pressure '120,80,80,notes='Testing with example.py'\",\n",
					"    \"N\": \"Get user profile/settings\",\n",
					"    \"O\": f\"Reload epoch data for {today.isoformat()}\",\n",
					"    \"P\": \"Get workouts 0-100, get and download last one to .FIT file\",\n",
					"    # \"Q\": \"Upload workout from json data\",\n",
					"    \"R\": \"Get solar data from your devices\",\n",
					"    \"S\": \"Get pregnancy summary data\",\n",
					"    \"T\": \"Add hydration data\",\n",
					"    \"U\": f\"Get Fitness Age data for {today.isoformat()}\",\n",
					"    \"Z\": \"Remove stored login tokens (logout)\",\n",
					"    \"q\": \"Exit\",\n",
					"}\n",
					"\n",
					"\n",
					"def display_json(api_call, output):\n",
					"    \"\"\"Format API output for better readability.\"\"\"\n",
					"\n",
					"    dashed = \"-\" * 20\n",
					"    header = f\"{dashed} {api_call} {dashed}\"\n",
					"    footer = \"-\" * len(header)\n",
					"\n",
					"    print(header)\n",
					"\n",
					"    if isinstance(output, (int, str, dict, list)):\n",
					"        print(json.dumps(output, indent=4))\n",
					"    else:\n",
					"        print(output)\n",
					"\n",
					"    print(footer)\n",
					"\n",
					"\n",
					"def display_text(output):\n",
					"    \"\"\"Format API output for better readability.\"\"\"\n",
					"\n",
					"    dashed = \"-\" * 60\n",
					"    header = f\"{dashed}\"\n",
					"    footer = \"-\" * len(header)\n",
					"\n",
					"    print(header)\n",
					"    print(json.dumps(output, indent=4))\n",
					"    print(footer)\n",
					"\n",
					"\n",
					"def get_credentials():\n",
					"    \"\"\"Get user credentials.\"\"\"\n",
					"\n",
					"    email = input(\"Login e-mail: \")\n",
					"    password = getpass(\"Enter password: \")\n",
					"\n",
					"    return email, password\n",
					"\n",
					"\n",
					"def init_api(email, password):\n",
					"    \"\"\"Initialize Garmin API with your credentials.\"\"\"\n",
					"\n",
					"    try:\n",
					"        # Using Oauth1 and OAuth2 token files from directory\n",
					"        print(\n",
					"            f\"Trying to login to Garmin Connect using token data from directory '{tokenstore}'...\\n\"\n",
					"        )\n",
					"\n",
					"        # Using Oauth1 and Oauth2 tokens from base64 encoded string\n",
					"        # print(\n",
					"        #     f\"Trying to login to Garmin Connect using token data from file '{tokenstore_base64}'...\\n\"\n",
					"        # )\n",
					"        # dir_path = os.path.expanduser(tokenstore_base64)\n",
					"        # with open(dir_path, \"r\") as token_file:\n",
					"        #     tokenstore = token_file.read()\n",
					"\n",
					"        garmin = Garmin()\n",
					"        garmin.login(tokenstore)\n",
					"\n",
					"    except (FileNotFoundError, GarthHTTPError, GarminConnectAuthenticationError):\n",
					"        # Session is expired. You'll need to log in again\n",
					"        print(\n",
					"            \"Login tokens not present, login with your Garmin Connect credentials to generate them.\\n\"\n",
					"            f\"They will be stored in '{tokenstore}' for future use.\\n\"\n",
					"        )\n",
					"        try:\n",
					"            # Ask for credentials if not set as environment variables\n",
					"            if not email or not password:\n",
					"                email, password = get_credentials()\n",
					"\n",
					"            garmin = Garmin(email=email, password=password, is_cn=False, prompt_mfa=get_mfa)\n",
					"            garmin.login()\n",
					"            # Save Oauth1 and Oauth2 token files to directory for next login\n",
					"            garmin.garth.dump(tokenstore)\n",
					"            print(\n",
					"                f\"Oauth tokens stored in '{tokenstore}' directory for future use. (first method)\\n\"\n",
					"            )\n",
					"            # Encode Oauth1 and Oauth2 tokens to base64 string and safe to file for next login (alternative way)\n",
					"            token_base64 = garmin.garth.dumps()\n",
					"            dir_path = os.path.expanduser(tokenstore_base64)\n",
					"            with open(dir_path, \"w\") as token_file:\n",
					"                token_file.write(token_base64)\n",
					"            print(\n",
					"                f\"Oauth tokens encoded as base64 string and saved to '{dir_path}' file for future use. (second method)\\n\"\n",
					"            )\n",
					"        except (FileNotFoundError, GarthHTTPError, GarminConnectAuthenticationError, requests.exceptions.HTTPError) as err:\n",
					"            logger.error(err)\n",
					"            return None\n",
					"\n",
					"    return garmin\n",
					"\n",
					"\n",
					"def get_mfa():\n",
					"    \"\"\"Get MFA.\"\"\"\n",
					"\n",
					"    return input(\"MFA one-time code: \")\n",
					"\n",
					"\n",
					"def print_menu():\n",
					"    \"\"\"Print examples menu.\"\"\"\n",
					"    for key in menu_options.keys():\n",
					"        print(f\"{key} -- {menu_options[key]}\")\n",
					"    print(\"Make your selection: \", end=\"\", flush=True)\n",
					"\n",
					"\n",
					"def switch(api, i, mode):\n",
					"    \"\"\"Run selected API call.\"\"\"\n",
					"\n",
					"    # Exit example program\n",
					"    if i == \"q\":\n",
					"        print(\"Be active, generate some data to fetch next time ;-) Bye!\")\n",
					"        sys.exit()\n",
					"\n",
					"    # Skip requests if login failed\n",
					"    if api:\n",
					"        try:\n",
					"            print(f\"\\n\\nExecuting: {menu_options[i]}\\n\")\n",
					"\n",
					"            # USER BASICS\n",
					"            if i == \"1\":\n",
					"                # Get full name from profile\n",
					"                display_json(\"api.get_full_name()\", api.get_full_name())\n",
					"            elif i == \"2\":\n",
					"                # Get unit system from profile\n",
					"                display_json(\"api.get_unit_system()\", api.get_unit_system())\n",
					"\n",
					"            # USER STATISTIC SUMMARIES\n",
					"            elif i == \"3\":\n",
					"                # Get activity data for 'YYYY-MM-DD'\n",
					"                display_json(\n",
					"                    f\"api.get_stats('{today.isoformat()}')\",\n",
					"                    api.get_stats(today.isoformat()),\n",
					"                )\n",
					"            elif i == \"4\":\n",
					"                # Get activity data (to be compatible with garminconnect-ha)\n",
					"                display_json(\n",
					"                    f\"api.get_user_summary('{today.isoformat()}')\",\n",
					"                    api.get_user_summary(today.isoformat()),\n",
					"                )\n",
					"            elif i == \"5\":\n",
					"                # Get body composition data for 'YYYY-MM-DD' (to be compatible with garminconnect-ha)\n",
					"                display_json(\n",
					"                    f\"api.get_body_composition('{today.isoformat()}')\",\n",
					"                    api.get_body_composition(today.isoformat()),\n",
					"                )\n",
					"            elif i == \"6\":\n",
					"                # Get body composition data for multiple days 'YYYY-MM-DD' (to be compatible with garminconnect-ha)\n",
					"                display_json(\n",
					"                    f\"api.get_body_composition('{startdate.isoformat()}', '{today.isoformat()}')\",\n",
					"                    api.get_body_composition(startdate.isoformat(), today.isoformat()),\n",
					"                )\n",
					"            elif i == \"7\":\n",
					"                # Get stats and body composition data for 'YYYY-MM-DD'\n",
					"                display_json(\n",
					"                    f\"api.get_stats_and_body('{today.isoformat()}')\",\n",
					"                    api.get_stats_and_body(today.isoformat()),\n",
					"                )\n",
					"\n",
					"            # USER STATISTICS LOGGED\n",
					"            elif i == \"8\":\n",
					"                # Get steps data for 'YYYY-MM-DD'\n",
					"                display_json(\n",
					"                    f\"api.get_steps_data('{today.isoformat()}')\",\n",
					"                    api.get_steps_data(today.isoformat()),\n",
					"                )\n",
					"            elif i == \"9\":\n",
					"                # Get heart rate data for 'YYYY-MM-DD'\n",
					"                display_json(\n",
					"                    f\"api.get_heart_rates('{today.isoformat()}')\",\n",
					"                    api.get_heart_rates(today.isoformat()),\n",
					"                )\n",
					"            elif i == \"0\":\n",
					"                # Get training readiness data for 'YYYY-MM-DD'\n",
					"                display_json(\n",
					"                    f\"api.get_training_readiness('{today.isoformat()}')\",\n",
					"                    api.get_training_readiness(today.isoformat()),\n",
					"                )\n",
					"            elif i == \"/\":\n",
					"                # Get daily body battery data for 'YYYY-MM-DD' to 'YYYY-MM-DD'\n",
					"                display_json(\n",
					"                    f\"api.get_body_battery('{startdate.isoformat()}, {today.isoformat()}')\",\n",
					"                    api.get_body_battery(startdate.isoformat(), today.isoformat()),\n",
					"                )\n",
					"            elif i == \"?\":\n",
					"                # Get daily blood pressure data for 'YYYY-MM-DD' to 'YYYY-MM-DD'\n",
					"                display_json(\n",
					"                    f\"api.get_blood_pressure('{startdate.isoformat()}, {today.isoformat()}')\",\n",
					"                    api.get_blood_pressure(startdate.isoformat(), today.isoformat()),\n",
					"                )\n",
					"            elif i == \"-\":\n",
					"                # Get daily step data for 'YYYY-MM-DD'\n",
					"                display_json(\n",
					"                    f\"api.get_daily_steps('{startdate.isoformat()}, {today.isoformat()}')\",\n",
					"                    api.get_daily_steps(startdate.isoformat(), today.isoformat()),\n",
					"                )\n",
					"            elif i == \"!\":\n",
					"                # Get daily floors data for 'YYYY-MM-DD'\n",
					"                display_json(\n",
					"                    f\"api.get_floors('{today.isoformat()}')\",\n",
					"                    api.get_floors(today.isoformat()),\n",
					"                )\n",
					"            elif i == \".\":\n",
					"                # Get training status data for 'YYYY-MM-DD'\n",
					"                display_json(\n",
					"                    f\"api.get_training_status('{today.isoformat()}')\",\n",
					"                    api.get_training_status(today.isoformat()),\n",
					"                )\n",
					"            elif i == \"a\":\n",
					"                # Get resting heart rate data for 'YYYY-MM-DD'\n",
					"                display_json(\n",
					"                    f\"api.get_rhr_day('{today.isoformat()}')\",\n",
					"                    api.get_rhr_day(today.isoformat()),\n",
					"                )\n",
					"            elif i == \"b\":\n",
					"                # Get hydration data 'YYYY-MM-DD'\n",
					"                display_json(\n",
					"                    f\"api.get_hydration_data('{today.isoformat()}')\",\n",
					"                    api.get_hydration_data(today.isoformat()),\n",
					"                )\n",
					"            elif i == \"c\":\n",
					"                # Get sleep data for 'YYYY-MM-DD'\n",
					"                display_json(\n",
					"                    f\"api.get_sleep_data('{today.isoformat()}')\",\n",
					"                    api.get_sleep_data(today.isoformat()),\n",
					"                )\n",
					"            elif i == \"d\":\n",
					"                # Get stress data for 'YYYY-MM-DD'\n",
					"                display_json(\n",
					"                    f\"api.get_stress_data('{today.isoformat()}')\",\n",
					"                    api.get_stress_data(today.isoformat()),\n",
					"                )\n",
					"            elif i == \"e\":\n",
					"                # Get respiration data for 'YYYY-MM-DD'\n",
					"                display_json(\n",
					"                    f\"api.get_respiration_data('{today.isoformat()}')\",\n",
					"                    api.get_respiration_data(today.isoformat()),\n",
					"                )\n",
					"            elif i == \"f\":\n",
					"                # Get SpO2 data for 'YYYY-MM-DD'\n",
					"                display_json(\n",
					"                    f\"api.get_spo2_data('{today.isoformat()}')\",\n",
					"                    api.get_spo2_data(today.isoformat()),\n",
					"                )\n",
					"            elif i == \"g\":\n",
					"                # Get max metric data (like vo2MaxValue and fitnessAge) for 'YYYY-MM-DD'\n",
					"                display_json(\n",
					"                    f\"api.get_max_metrics('{today.isoformat()}')\",\n",
					"                    api.get_max_metrics(today.isoformat()),\n",
					"                )\n",
					"            elif i == \"h\":\n",
					"                # Get personal record for user\n",
					"                display_json(\"api.get_personal_record()\", api.get_personal_record())\n",
					"            elif i == \"i\":\n",
					"                # Get earned badges for user\n",
					"                display_json(\"api.get_earned_badges()\", api.get_earned_badges())\n",
					"            elif i == \"j\":\n",
					"                # Get adhoc challenges data from start and limit\n",
					"                display_json(\n",
					"                    f\"api.get_adhoc_challenges({start},{limit})\",\n",
					"                    api.get_adhoc_challenges(start, limit),\n",
					"                )  # 1=start, 100=limit\n",
					"            elif i == \"k\":\n",
					"                # Get available badge challenges data from start and limit\n",
					"                display_json(\n",
					"                    f\"api.get_available_badge_challenges({start_badge}, {limit})\",\n",
					"                    api.get_available_badge_challenges(start_badge, limit),\n",
					"                )  # 1=start, 100=limit\n",
					"            elif i == \"l\":\n",
					"                # Get badge challenges data from start and limit\n",
					"                display_json(\n",
					"                    f\"api.get_badge_challenges({start_badge}, {limit})\",\n",
					"                    api.get_badge_challenges(start_badge, limit),\n",
					"                )  # 1=start, 100=limit\n",
					"            elif i == \"m\":\n",
					"                # Get non completed badge challenges data from start and limit\n",
					"                display_json(\n",
					"                    f\"api.get_non_completed_badge_challenges({start_badge}, {limit})\",\n",
					"                    api.get_non_completed_badge_challenges(start_badge, limit),\n",
					"                )  # 1=start, 100=limit\n",
					"\n",
					"            # ACTIVITIES\n",
					"            elif i == \"n\":\n",
					"                # Get activities data from start and limit\n",
					"                display_json(\n",
					"                    f\"api.get_activities({start}, {limit})\",\n",
					"                    api.get_activities(start, limit),\n",
					"                )  # 0=start, 1=limit\n",
					"\n",
					"            elif i == \"o\":\n",
					"                # Get last activity\n",
					"                display_json(\"api.get_last_activity()\", api.get_last_activity())\n",
					"            elif i == \"p\":\n",
					"                # Get activities data from startdate 'YYYY-MM-DD' to enddate 'YYYY-MM-DD', with (optional) activitytype\n",
					"                # Possible values are: cycling, running, swimming, multi_sport, fitness_equipment, hiking, walking, other\n",
					"                activities = api.get_activities_by_date(\n",
					"                    startdate.isoformat(), today.isoformat(), activitytype\n",
					"                )\n",
					"\n",
					"                # Download activities\n",
					"                for activity in activities:\n",
					"                    activity_id = activity[\"activityId\"]\n",
					"                    activity_name = activity[\"activityName\"]\n",
					"                    display_text(activity)\n",
					"\n",
					"                    print(\n",
					"                        f\"api.download_activity({activity_id}, dl_fmt=api.ActivityDownloadFormat.GPX)\"\n",
					"                    )\n",
					"                    gpx_data = api.download_activity(\n",
					"                        activity_id, dl_fmt=api.ActivityDownloadFormat.GPX\n",
					"                    )\n",
					"                    output_file = f\"./{str(activity_name)}.gpx\"\n",
					"                    with open(output_file, \"wb\") as fb:\n",
					"                        fb.write(gpx_data)\n",
					"                    print(f\"Activity data downloaded to file {output_file}\")\n",
					"\n",
					"                    print(\n",
					"                        f\"api.download_activity({activity_id}, dl_fmt=api.ActivityDownloadFormat.TCX)\"\n",
					"                    )\n",
					"                    tcx_data = api.download_activity(\n",
					"                        activity_id, dl_fmt=api.ActivityDownloadFormat.TCX\n",
					"                    )\n",
					"                    output_file = f\"./{str(activity_name)}.tcx\"\n",
					"                    with open(output_file, \"wb\") as fb:\n",
					"                        fb.write(tcx_data)\n",
					"                    print(f\"Activity data downloaded to file {output_file}\")\n",
					"\n",
					"                    print(\n",
					"                        f\"api.download_activity({activity_id}, dl_fmt=api.ActivityDownloadFormat.ORIGINAL)\"\n",
					"                    )\n",
					"                    zip_data = api.download_activity(\n",
					"                        activity_id, dl_fmt=api.ActivityDownloadFormat.ORIGINAL\n",
					"                    )\n",
					"                    output_file = f\"./{str(activity_name)}.zip\"\n",
					"                    with open(output_file, \"wb\") as fb:\n",
					"                        fb.write(zip_data)\n",
					"                    print(f\"Activity data downloaded to file {output_file}\")\n",
					"\n",
					"                    print(\n",
					"                        f\"api.download_activity({activity_id}, dl_fmt=api.ActivityDownloadFormat.CSV)\"\n",
					"                    )\n",
					"                    csv_data = api.download_activity(\n",
					"                        activity_id, dl_fmt=api.ActivityDownloadFormat.CSV\n",
					"                    )\n",
					"                    output_file = f\"./{str(activity_name)}.csv\"\n",
					"                    with open(output_file, \"wb\") as fb:\n",
					"                        fb.write(csv_data)\n",
					"                    print(f\"Activity data downloaded to file {output_file}\")\n",
					"\n",
					"            elif i == \"r\":\n",
					"                # Get activities data from start and limit\n",
					"                activities = api.get_activities(start, limit)  # 0=start, 1=limit\n",
					"\n",
					"                # Get activity splits\n",
					"                first_activity_id = activities[0].get(\"activityId\")\n",
					"\n",
					"                display_json(\n",
					"                    f\"api.get_activity_splits({first_activity_id})\",\n",
					"                    api.get_activity_splits(first_activity_id),\n",
					"                )\n",
					"\n",
					"                # Get activity split summaries for activity id\n",
					"                display_json(\n",
					"                    f\"api.get_activity_split_summaries({first_activity_id})\",\n",
					"                    api.get_activity_split_summaries(first_activity_id),\n",
					"                )\n",
					"\n",
					"                # Get activity weather data for activity\n",
					"                display_json(\n",
					"                    f\"api.get_activity_weather({first_activity_id})\",\n",
					"                    api.get_activity_weather(first_activity_id),\n",
					"                )\n",
					"\n",
					"                # Get activity hr timezones id\n",
					"                display_json(\n",
					"                    f\"api.get_activity_hr_in_timezones({first_activity_id})\",\n",
					"                    api.get_activity_hr_in_timezones(first_activity_id),\n",
					"                )\n",
					"\n",
					"                # Get activity details for activity id\n",
					"                display_json(\n",
					"                    f\"api.get_activity_details({first_activity_id})\",\n",
					"                    api.get_activity_details(first_activity_id),\n",
					"                )\n",
					"\n",
					"                # Get gear data for activity id\n",
					"                display_json(\n",
					"                    f\"api.get_activity_gear({first_activity_id})\",\n",
					"                    api.get_activity_gear(first_activity_id),\n",
					"                )\n",
					"\n",
					"                # Activity data for activity id\n",
					"                display_json(\n",
					"                    f\"api.get_activity({first_activity_id})\",\n",
					"                    api.get_activity(first_activity_id),\n",
					"                )\n",
					"\n",
					"                # Get exercise sets in case the activity is a strength_training\n",
					"                if activities[0][\"activityType\"][\"typeKey\"] == \"strength_training\":\n",
					"                    display_json(\n",
					"                        f\"api.get_activity_exercise_sets({first_activity_id})\",\n",
					"                        api.get_activity_exercise_sets(first_activity_id),\n",
					"                    )\n",
					"\n",
					"            elif i == \"s\":\n",
					"                try:\n",
					"                    # Upload activity from file\n",
					"                    display_json(\n",
					"                        f\"api.upload_activity({activityfile})\",\n",
					"                        api.upload_activity(activityfile),\n",
					"                    )\n",
					"                except FileNotFoundError:\n",
					"                    print(f\"File to upload not found: {activityfile}\")\n",
					"\n",
					"            # DEVICES\n",
					"            elif i == \"t\":\n",
					"                # Get Garmin devices\n",
					"                devices = api.get_devices()\n",
					"                display_json(\"api.get_devices()\", devices)\n",
					"\n",
					"                # Get device last used\n",
					"                device_last_used = api.get_device_last_used()\n",
					"                display_json(\"api.get_device_last_used()\", device_last_used)\n",
					"\n",
					"                # Get settings per device\n",
					"                for device in devices:\n",
					"                    device_id = device[\"deviceId\"]\n",
					"                    display_json(\n",
					"                        f\"api.get_device_settings({device_id})\",\n",
					"                        api.get_device_settings(device_id),\n",
					"                    )\n",
					"\n",
					"                # Get primary training device information\n",
					"                primary_training_device = api.get_primary_training_device()\n",
					"                display_json(\"api.get_primary_training_device()\", primary_training_device)\n",
					"\n",
					"            elif i == \"R\":\n",
					"                # Get solar data from Garmin devices\n",
					"                devices = api.get_devices()\n",
					"                display_json(\"api.get_devices()\", devices)\n",
					"\n",
					"                # Get device last used\n",
					"                device_last_used = api.get_device_last_used()\n",
					"                display_json(\"api.get_device_last_used()\", device_last_used)\n",
					"\n",
					"                # Get settings per device\n",
					"                for device in devices:\n",
					"                    device_id = device[\"deviceId\"]\n",
					"                    display_json(\n",
					"                        f\"api.get_device_solar_data({device_id}, {today.isoformat()})\",\n",
					"                        api.get_device_solar_data(device_id, today.isoformat()),\n",
					"                    )\n",
					"            # GOALS\n",
					"            elif i == \"u\":\n",
					"                # Get active goals\n",
					"                goals = api.get_goals(\"active\")\n",
					"                display_json('api.get_goals(\"active\")', goals)\n",
					"\n",
					"            elif i == \"v\":\n",
					"                # Get future goals\n",
					"                goals = api.get_goals(\"future\")\n",
					"                display_json('api.get_goals(\"future\")', goals)\n",
					"\n",
					"            elif i == \"w\":\n",
					"                # Get past goals\n",
					"                goals = api.get_goals(\"past\")\n",
					"                display_json('api.get_goals(\"past\")', goals)\n",
					"\n",
					"            # ALARMS\n",
					"            elif i == \"y\":\n",
					"                # Get Garmin device alarms\n",
					"                alarms = api.get_device_alarms()\n",
					"                for alarm in alarms:\n",
					"                    alarm_id = alarm[\"alarmId\"]\n",
					"                    display_json(f\"api.get_device_alarms({alarm_id})\", alarm)\n",
					"\n",
					"            elif i == \"x\":\n",
					"                # Get Heart Rate Variability (hrv) data\n",
					"                display_json(\n",
					"                    f\"api.get_hrv_data({today.isoformat()})\",\n",
					"                    api.get_hrv_data(today.isoformat()),\n",
					"                )\n",
					"\n",
					"            elif i == \"z\":\n",
					"                # Get progress summary\n",
					"                for metric in [\n",
					"                    \"elevationGain\",\n",
					"                    \"duration\",\n",
					"                    \"distance\",\n",
					"                    \"movingDuration\",\n",
					"                ]:\n",
					"                    display_json(\n",
					"                        f\"api.get_progress_summary_between_dates({today.isoformat()})\",\n",
					"                        api.get_progress_summary_between_dates(\n",
					"                            startdate.isoformat(), today.isoformat(), metric\n",
					"                        ),\n",
					"                    )\n",
					"            # GEAR\n",
					"            elif i == \"A\":\n",
					"                last_used_device = api.get_device_last_used()\n",
					"                display_json(\"api.get_device_last_used()\", last_used_device)\n",
					"                userProfileNumber = last_used_device[\"userProfileNumber\"]\n",
					"                gear = api.get_gear(userProfileNumber)\n",
					"                display_json(\"api.get_gear()\", gear)\n",
					"                display_json(\n",
					"                    \"api.get_gear_defaults()\", api.get_gear_defaults(userProfileNumber)\n",
					"                )\n",
					"                display_json(\"api.get()\", api.get_activity_types())\n",
					"                for gear in gear:\n",
					"                    uuid = gear[\"uuid\"]\n",
					"                    name = gear[\"displayName\"]\n",
					"                    display_json(\n",
					"                        f\"api.get_gear_stats({uuid}) / {name}\", api.get_gear_stats(uuid)\n",
					"                    )\n",
					"\n",
					"            # WEIGHT-INS\n",
					"            elif i == \"B\":\n",
					"                # Get weigh-ins data\n",
					"                display_json(\n",
					"                    f\"api.get_weigh_ins({startdate.isoformat()}, {today.isoformat()})\",\n",
					"                    api.get_weigh_ins(startdate.isoformat(), today.isoformat())\n",
					"                )\n",
					"            elif i == \"C\":\n",
					"                # Get daily weigh-ins data\n",
					"                display_json(\n",
					"                    f\"api.get_daily_weigh_ins({today.isoformat()})\",\n",
					"                    api.get_daily_weigh_ins(today.isoformat())\n",
					"                )\n",
					"            elif i == \"D\":\n",
					"                # Delete weigh-ins data for today\n",
					"                display_json(\n",
					"                    f\"api.delete_weigh_ins({today.isoformat()}, delete_all=True)\",\n",
					"                    api.delete_weigh_ins(today.isoformat(), delete_all=True)\n",
					"                )\n",
					"            elif i == \"E\":\n",
					"                # Add a weigh-in\n",
					"                weight = 89.6\n",
					"                unit = 'kg'\n",
					"                display_json(\n",
					"                    f\"api.add_weigh_in(weight={weight}, unitKey={unit})\",\n",
					"                    api.add_weigh_in(weight=weight, unitKey=unit)\n",
					"                )\n",
					"\n",
					"            # CHALLENGES/EXPEDITIONS\n",
					"            elif i == \"F\":\n",
					"                # Get virtual challenges/expeditions\n",
					"                display_json(\n",
					"                    f\"api.get_inprogress_virtual_challenges({startdate.isoformat()}, {today.isoformat()})\",\n",
					"                    api.get_inprogress_virtual_challenges(startdate.isoformat(), today.isoformat())\n",
					"                )\n",
					"            elif i == \"G\":\n",
					"                # Get hill score data\n",
					"                display_json(\n",
					"                    f\"api.get_hill_score({startdate.isoformat()}, {today.isoformat()})\",\n",
					"                    api.get_hill_score(startdate.isoformat(), today.isoformat())\n",
					"                )\n",
					"            elif i == \"H\":\n",
					"                # Get endurance score data\n",
					"                display_json(\n",
					"                    f\"api.get_endurance_score({startdate.isoformat()}, {today.isoformat()})\",\n",
					"                    api.get_endurance_score(startdate.isoformat(), today.isoformat())\n",
					"                )\n",
					"            elif i == \"I\":\n",
					"                # Get activities for date\n",
					"                display_json(\n",
					"                    f\"api.get_activities_fordate({today.isoformat()})\",\n",
					"                    api.get_activities_fordate(today.isoformat())\n",
					"                )\n",
					"            elif i == \"J\":\n",
					"                # Get race predictions\n",
					"                display_json(\n",
					"                    f\"api.get_race_predictions()\",\n",
					"                    api.get_race_predictions()\n",
					"                )\n",
					"            elif i == \"K\":\n",
					"                # Get all day stress data for date\n",
					"                display_json(\n",
					"                    f\"api.get_all_day_stress({today.isoformat()})\",\n",
					"                    api.get_all_day_stress(today.isoformat())\n",
					"                )\n",
					"            elif i == \"L\":\n",
					"                # Add body composition\n",
					"                weight = 70.0\n",
					"                percent_fat = 15.4\n",
					"                percent_hydration = 54.8\n",
					"                visceral_fat_mass = 10.8\n",
					"                bone_mass = 2.9\n",
					"                muscle_mass = 55.2\n",
					"                basal_met = 1454.1\n",
					"                active_met = None\n",
					"                physique_rating = None\n",
					"                metabolic_age = 33.0\n",
					"                visceral_fat_rating = None\n",
					"                bmi = 22.2\n",
					"                display_json(\n",
					"                    f\"api.add_body_composition({today.isoformat()}, {weight}, {percent_fat}, {percent_hydration}, {visceral_fat_mass}, {bone_mass}, {muscle_mass}, {basal_met}, {active_met}, {physique_rating}, {metabolic_age}, {visceral_fat_rating}, {bmi})\",\n",
					"                    api.add_body_composition(\n",
					"                        today.isoformat(),\n",
					"                        weight=weight,\n",
					"                        percent_fat=percent_fat,\n",
					"                        percent_hydration=percent_hydration,\n",
					"                        visceral_fat_mass=visceral_fat_mass,\n",
					"                        bone_mass=bone_mass,\n",
					"                        muscle_mass=muscle_mass,\n",
					"                        basal_met=basal_met,\n",
					"                        active_met=active_met,\n",
					"                        physique_rating=physique_rating,\n",
					"                        metabolic_age=metabolic_age,\n",
					"                        visceral_fat_rating=visceral_fat_rating,\n",
					"                        bmi=bmi,\n",
					"                    )\n",
					"                )\n",
					"            elif i == \"M\":\n",
					"                # Set blood pressure values\n",
					"                display_json(\n",
					"                    f\"api.set_blood_pressure(120,80,80,notes=`Testing with example.py`)\",\n",
					"                    api.set_blood_pressure(120,80,80,notes=\"Testing with example.py\")\n",
					"                )\n",
					"            elif i == \"N\":\n",
					"                # Get user profile\n",
					"                display_json(\n",
					"                    \"api.get_user_profile()\",\n",
					"                    api.get_user_profile()\n",
					"                )\n",
					"            elif i == \"O\":\n",
					"                # Reload epoch data for date\n",
					"                display_json(\n",
					"                    f\"api.request_reload({today.isoformat()})\",\n",
					"                    api.request_reload(today.isoformat())\n",
					"                )\n",
					"\n",
					"            # WORKOUTS\n",
					"            elif i == \"P\":\n",
					"                workouts = api.get_workouts()\n",
					"                # Get workout 0-100\n",
					"                display_json(\n",
					"                    \"api.get_workouts()\",\n",
					"                    api.get_workouts()\n",
					"                )\n",
					"\n",
					"                # Get last fetched workout\n",
					"                workout_id = workouts[-1]['workoutId']\n",
					"                workout_name = workouts[-1][\"workoutName\"]\n",
					"                display_json(\n",
					"                    f\"api.get_workout_by_id({workout_id})\",\n",
					"                    api.get_workout_by_id(workout_id))\n",
					"\n",
					"                # Download last fetched workout\n",
					"                print(\n",
					"                    f\"api.download_workout({workout_id})\"\n",
					"                )\n",
					"                workout_data = api.download_workout(\n",
					"                    workout_id\n",
					"                )\n",
					"                \n",
					"                output_file = f\"./{str(workout_name)}.fit\"\n",
					"                with open(output_file, \"wb\") as fb:\n",
					"                    fb.write(workout_data)\n",
					"\n",
					"                print(f\"Workout data downloaded to file {output_file}\")\n",
					"\n",
					"            # elif i == \"Q\":\n",
					"            #     display_json(\n",
					"            #         f\"api.upload_workout({workout_example})\",\n",
					"            #         api.upload_workout(workout_example))\n",
					"\n",
					"            # WOMEN'S HEALTH\n",
					"            elif i == \"S\":\n",
					"                # Get pregnancy summary data\n",
					"                display_json(\n",
					"                    \"api.get_pregnancy_summary()\",\n",
					"                    api.get_pregnancy_summary()\n",
					"                )\n",
					"\n",
					"            # Additional related calls:\n",
					"            # get_menstrual_data_for_date(self, fordate: str): takes a single date and returns the Garmin Menstrual Summary data for that date\n",
					"            # get_menstrual_calendar_data(self, startdate: str, enddate: str) takes two dates and returns summaries of cycles that have days between the two days\n",
					"\n",
					"            elif i == \"T\":\n",
					"                # Add hydration data for today\n",
					"                value_in_ml = 240\n",
					"                raw_date = datetime.date.today()\n",
					"                cdate = str(raw_date)\n",
					"                raw_ts = datetime.datetime.now()\n",
					"                timestamp = datetime.datetime.strftime(raw_ts, '%Y-%m-%dT%H:%M:%S.%f')\n",
					"\n",
					"                display_json(\n",
					"                    f\"api.add_hydration_data(value_in_ml={value_in_ml},cdate='{cdate}',timestamp='{timestamp}')\",\n",
					"                    api.add_hydration_data(value_in_ml=value_in_ml,\n",
					"                                           cdate=cdate,\n",
					"                                           timestamp=timestamp)\n",
					"                )\n",
					"\n",
					"            elif i == \"U\":\n",
					"                # Get fitness age data\n",
					"                display_json(\n",
					"                    f\"api.get_fitnessage_data({today.isoformat()})\",\n",
					"                    api.get_fitnessage_data(today.isoformat())\n",
					"                )\n",
					"\n",
					"            elif i == \"Z\":\n",
					"                # Remove stored login tokens for Garmin Connect portal\n",
					"                tokendir = os.path.expanduser(tokenstore)\n",
					"                print(f\"Removing stored login tokens from: {tokendir}\")\n",
					"                \n",
					"                try:\n",
					"                    for root, dirs, files in os.walk(tokendir, topdown=False):\n",
					"                        for name in files:\n",
					"                            os.remove(os.path.join(root, name))\n",
					"                        for name in dirs:\n",
					"                            os.rmdir(os.path.join(root, name))\n",
					"                    print(f\"Directory {tokendir} removed\")\n",
					"                except FileNotFoundError:\n",
					"                    print(f\"Directory not found: {tokendir}\")\n",
					"                api = None\n",
					"\n",
					"        except (\n",
					"            GarminConnectConnectionError,\n",
					"            GarminConnectAuthenticationError,\n",
					"            GarminConnectTooManyRequestsError,\n",
					"            requests.exceptions.HTTPError,\n",
					"            GarthHTTPError\n",
					"        ) as err:\n",
					"            logger.error(err)\n",
					"        except KeyError:\n",
					"            # Invalid menu option chosen\n",
					"            pass\n",
					"    else:\n",
					"        print(\"Could not login to Garmin Connect, try again later.\")\n",
					"# Function to fetch keys from keyvault\n",
					"def get_api_key_from_keyvault(key_vault_name, secret_name, linked_service_name): \n",
					"    try:\n",
					"        api_key = mssparkutils.credentials.getSecret(key_vault_name,secret_name, linked_service_name)\n",
					"        return api_key\n",
					"    except Exception as e:\n",
					"        msg = f\"Error retrieving API key from Key Vault: {e}\"\n",
					"        print(msg)\n",
					"        #OUTPUTVAR = OUTPUTVAR + msg\n",
					"        return None\n",
					"\n",
					"# Function to write Dartaframe to parquet\n",
					"def write_dataframe_to_parquet(api_call, output, garmin_api_endpoint, enddateparam ,pathacc, pathfolder ): \n",
					"    try:\n",
					"        # pathacc = ABFS_DEST_ACCOUNT #\"abfss://personalprojectsfs@personalprojectsrslake.dfs.core.windows.net/synapse/workspaces/personalprojectsrgsynapse/DataFiles/Garmin/\"\n",
					"        # pathfolder = ABFS_DEST_FOLDER\n",
					"        #df = pd.DataFrame(output)\n",
					"        df = pd.json_normalize(output)\n",
					"        #df.json_normalize(output, max_level=1)\n",
					"        file = \"garmin_\" +garmin_api_endpoint+\"-\" + enddateparam + \".parquet\"\n",
					"        full_path = f\"{pathacc}{pathfolder}{file}\"\n",
					"        df.to_parquet(full_path, engine='pyarrow')\n",
					"        status = f\"SUCCESS: Data written to :\\n{full_path}\"\n",
					"        print(status)\n",
					"        #OUTPUTVAR = OUTPUTVAR + status\n",
					"        #print(status)\n",
					"        logger.error(status)\n",
					"    except Exception as e:\n",
					"        status = f\"Error writing data to :\\n{full_path}\\n {e}\"\n",
					"        print(status)\n",
					"        #OUTPUTVAR = OUTPUTVAR + status\n",
					"        return None\n",
					"\n",
					"# Main program loop\n",
					"while True:\n",
					"    # Display header and login\n",
					"    print(\"\\n*** Garmin Connect API Demo by cyberjunky ***\\n\")\n",
					"\n",
					"    if USERCREDS=='keyvault':\n",
					"        # Get API password from Key Vault. Replace with hard-coded values to avoid the KeyVault request\n",
					"        try:\n",
					"            email = get_api_key_from_keyvault(KEYVAULTNAME, GARMIN_UNAME_KEY, KEYVAULTLINKEDSERVICE)\n",
					"        except Exception as e:\n",
					"            print(\"Garmin_Username retrieval/initialisation failed. Check your Key Vault configuration/python. {e}\")\n",
					"\n",
					"        try:\n",
					"            password = get_api_key_from_keyvault(KEYVAULTNAME, GARMIN_PASSW_KEY, KEYVAULTLINKEDSERVICE)\n",
					"        except Exception as e:\n",
					"            print(\"Garmin_Password retrieval/initialisation failed. Check your Key Vault configuration/python. {e}\")\n",
					"    else: \n",
					"        # when not keyvault assumes plain text\n",
					"        email = \"\"\n",
					"        password = \"\"\n",
					"\n",
					"    # Init API\n",
					"    if not api:\n",
					"        api = init_api(email, password)\n",
					"\n",
					"    if api:\n",
					"        # Display menu\n",
					"        # print_menu()\n",
					"        option = readchar.readkey()\n",
					"        switch(api, option, \"d\")\n",
					"    else:\n",
					"        api = init_api(email, password)\n",
					""
				],
				"execution_count": null
			}
		]
	}
}