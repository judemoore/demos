{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "personalprojectsrgsynapse"
		},
		"personalprojectsrgsynapse-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'personalprojectsrgsynapse-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:personalprojectsrgsynapse.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"SuperfrontSQL_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "superfrontsql.database.windows.net"
		},
		"SuperfrontSQL_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "superfrontdb"
		},
		"SuperfrontSQL_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "superfront"
		},
		"judeskvlinked_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://judeskv.vault.azure.net/"
		},
		"personalprojectsrgsynapse-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://personalprojectsrslake.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Garmin_to_parquet_nightly')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Garmin_Activities",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "07_Garmin_API_Synapse_Pipeline",
								"type": "NotebookReference"
							},
							"parameters": {
								"GARMIN_API_OPTION": {
									"value": "act",
									"type": "string"
								},
								"DAYS_BEFORETODAY": {
									"value": "0",
									"type": "int"
								},
								"DAYS_AGO": {
									"value": "7",
									"type": "int"
								},
								"KEYVAULTNAME": {
									"value": "judeskv",
									"type": "string"
								},
								"GARMIN_UNAME_KEY": {
									"value": "GarminUsername",
									"type": "string"
								},
								"GARMIN_PASSW_KEY": {
									"value": "GarminPassword",
									"type": "string"
								},
								"ABFS_DEST_ACCOUNT": {
									"value": "abfss://personalprojectsfs@personalprojectsrslake.dfs.core.windows.net",
									"type": "string"
								},
								"ABFS_DEST_FOLDER": {
									"value": "/synapse/workspaces/personalprojectsrgsynapse/DataFiles/Garmin/",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "personalsparkp",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": false
							},
							"driverSize": "Small"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"GARMIN_API_OPTION": {
						"type": "String",
						"defaultValue": "act"
					},
					"DAYS_BEFORETODAY": {
						"type": "Integer",
						"defaultValue": 0
					},
					"DAYS_AGO": {
						"type": "Integer",
						"defaultValue": 0
					},
					"KEYVAULTNAME": {
						"type": "String",
						"defaultValue": "judeskv"
					},
					"GARMIN_UNAME_KEY": {
						"type": "String",
						"defaultValue": "GarminUsername"
					},
					"GARMIN_PASSW_KEY": {
						"type": "String",
						"defaultValue": "GarminPassword"
					},
					"ABFS_DEST_ACCOUNT": {
						"type": "String",
						"defaultValue": "abfss://personalprojectsfs@personalprojectsrslake.dfs.core.windows.net"
					},
					"ABFS_DEST_FOLDER": {
						"type": "String",
						"defaultValue": "/synapse/workspaces/personalprojectsrgsynapse/DataFiles/Garmin/"
					},
					"output": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/07_Garmin_API_Synapse_Pipeline')]",
				"[concat(variables('workspaceId'), '/bigDataPools/personalsparkp')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SuperfrontSQL')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('SuperfrontSQL_properties_typeProperties_server')]",
					"database": "[parameters('SuperfrontSQL_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('SuperfrontSQL_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "judeskvlinked",
							"type": "LinkedServiceReference"
						},
						"secretName": "supersqlpassword"
					},
					"alwaysEncryptedSettings": {
						"alwaysEncryptedAkvAuthType": "ManagedIdentity"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/judeskvlinked')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/judeskvlinked')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('judeskvlinked_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/personalprojectsrgsynapse-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('personalprojectsrgsynapse-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/personalprojectsrgsynapse-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('personalprojectsrgsynapse-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Evening1')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 24,
						"startTime": "2024-05-14T22:00:00",
						"timeZone": "GMT Standard Time"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EveningDaily')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2024-05-09T21:00:00",
						"timeZone": "GMT Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								21
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Weekly1')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Garmin_to_parquet_nightly",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 7,
						"startTime": "2024-05-24T22:00:00",
						"timeZone": "GMT Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								22
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Garmin_to_parquet_nightly')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/UserMangedIDCreds')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {
					"resourceId": "/subscriptions/91972177-b241-4547-980b-98433788152e/resourcegroups/personalprojectsrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/personalprojmanageduseridentity"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/QuerySleepParquetTest')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "declare \n@ABFS_DEST_ACCOUNT varchar(255) = (SELECT 'abfss://personalprojectsfs@personalprojectsrslake.dfs.core.windows.net' )\n,@ABFS_DEST_FOLDER varchar(255) = (SELECT '/synapse/workspaces/personalprojectsrgsynapse/DataFiles/Garmin/' )\n,@FILES varchar(255) = (SELECT 'garmin*activities*.parquet' )\n\ndeclare\n @FULLPATH varchar(255) =  (SELECT @ABFS_DEST_ACCOUNT+@ABFS_DEST_FOLDER+@FILES)\ndeclare \n  @SQL varchar(255)  = '\nselect *\nfrom openrowset(\n    bulk ''' + @FULLPATH +''',\n    format = ''parquet'') as rows'\n\nexecute (@SQL);\n\n\n-- select top 10 *\n-- from openrowset(\n--     bulk 'abfss://personalprojectsfs@personalprojectsrslake.dfs.core.windows.net/synapse/workspaces/personalprojectsrgsynapse/DataFiles/Garmin/garmin_get_activities*' ,\n--     format = 'parquet') as rows",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://personalprojectsrslake.dfs.core.windows.net/personalprojectsfs/synapse/workspaces/personalprojectsrgsynapse/DataFiles/Garmin/garmin_get_activities_by_date-2024-08-02.parquet',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/00_test_get_token_sparkutils')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "23b4c959-973a-4a96-b5ce-9cca0cb00ef9"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"from notebookutils import mssparkutils\r\n",
							"#mssparkutils.credentials.help()\r\n",
							"mssparkutils.credentials.getSecret(\"judeskv\",\"GarminUsername\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/01_test_key_vault_connection_Synapse_Spark_')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "7aa1c4f1-93bb-4cf6-8096-bd1f0a40641c"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"# Test connection to the Key Vaul via a Synapse notebook. \r\n",
							"# Follow this to create a linked service to the Key vault on Azure, then apply permission to the App ID from the Synapse Instance https://stackoverflow.com/questions/77846845/access-key-vault-in-azure-synapse-analytical-pipeline-notebook\r\n",
							"from notebookutils import mssparkutils\r\n",
							"mssparkutils.credentials.getSecret('judeskv','GarminUsername')\r\n",
							"# it works ! \r\n",
							"# we get '[REDACTED]' "
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/02_test_key_vault_connection_Python')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "e83a4412-675f-4cd2-b411-b2c6e184cc41"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"# Test connecting to Azure Key Vault in Python\r\n",
							"# If in VS Code, then \"Connect-AzAccount\" within the Terminal Powershell to log into Azure so Key Vault can authenticate the request using Entra ID\r\n",
							"# How authetication works in Azure Key Vault # How authentication works https://learn.microsoft.com/en-us/python/api/overview/azure/identity-readme?view=azure-python#authenticating-a-user-assigned-managed-identity-with-defaultazurecredential\r\n",
							"# Install the package using pip: pip3 install garminconnect azure-identity azure-keyvault-secrets azure-keyvault or\r\n",
							"#%pip install garminconnect azure-identity azure-keyvault-secrets azure-keyvault\r\n",
							"\r\n",
							"from azure.identity import DefaultAzureCredential\r\n",
							"from azure.keyvault.secrets import SecretClient\r\n",
							"\r\n",
							"def get_api_key_from_keyvault(key_vault_name, secret_name, secret_version=None): \r\n",
							"    try:\r\n",
							"        # Initialize Azure Key Vault client\r\n",
							"        #key_vault_name = \"judeskv\"\r\n",
							"        kv_uri = f\"https://{key_vault_name}.vault.azure.net\"\r\n",
							"        credential = DefaultAzureCredential()\r\n",
							"        secret_client = SecretClient(vault_url=kv_uri, credential=credential)\r\n",
							"\r\n",
							"        # Retrieve your API credentials (secret) from Key Vault\r\n",
							"        #secret_name = \"GarminPassword\"\r\n",
							"        api_key = secret_client.get_secret(secret_name).value\r\n",
							"        return api_key\r\n",
							"    except Exception as e:\r\n",
							"        print(f\"Error retrieving API key from Key Vault: {e}\")\r\n",
							"        return None\r\n",
							"    \r\n",
							"# Test and bring back and sow the key vaul secrete (beware!)\r\n",
							"# Replace judeskv with your own key_vault_name and GarminUsername with your own secret_name\r\n",
							"print(get_api_key_from_keyvault(\"judeskv\",\"GarminUsername\"))"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/03_garmin_demo_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "https://pypi.org/project/garminconnect/#description",
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "personalsparkp",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "4",
						"spark.autotune.trackingId": "685a6066-eeaa-489d-9078-13ffb98beda8"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/91972177-b241-4547-980b-98433788152e/resourceGroups/personalprojectsrg/providers/Microsoft.Synapse/workspaces/personalprojectsrgsynapse/bigDataPools/personalsparkp",
						"name": "personalsparkp",
						"type": "Spark",
						"endpoint": "https://personalprojectsrgsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/personalsparkp",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 5
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"#!/usr/bin/env python3\r\n",
							"\"\"\"\r\n",
							"pip3 install garth requests readchar\r\n",
							"\r\n",
							"export EMAIL=\r\n",
							"export PASSWORD=\r\n",
							"\r\n",
							"\"\"\"\r\n",
							"\r\n",
							"!pip install garminconnect \r\n",
							"\r\n",
							"import datetime\r\n",
							"import json\r\n",
							"import logging\r\n",
							"import os\r\n",
							"import sys\r\n",
							"from getpass import getpass\r\n",
							"\r\n",
							"#import readchar\r\n",
							"import requests\r\n",
							"from garth.exc import GarthHTTPError\r\n",
							"\r\n",
							"from garminconnect import (\r\n",
							"    Garmin,\r\n",
							"    GarminConnectAuthenticationError,\r\n",
							"    GarminConnectConnectionError,\r\n",
							"    GarminConnectTooManyRequestsError,\r\n",
							")\r\n",
							"\r\n",
							"# Configure debug logging\r\n",
							"# logging.basicConfig(level=logging.DEBUG)\r\n",
							"logging.basicConfig(level=logging.INFO)\r\n",
							"logger = logging.getLogger(__name__)\r\n",
							"\r\n",
							"# Load environment variables if defined\r\n",
							"email = # os.getenv(\"EMAIL\")\r\n",
							"password =  # os.getenv(\"PASSWORD\")\r\n",
							"\r\n",
							"tokenstore = os.getenv(\"GARMINTOKENS\") or \"~/.garminconnect\"\r\n",
							"tokenstore_base64 = os.getenv(\"GARMINTOKENS_BASE64\") or \"~/.garminconnect_base64\"\r\n",
							"api = None\r\n",
							"\r\n",
							"# Example selections and settings\r\n",
							"today = datetime.date.today()\r\n",
							"startdate = today - datetime.timedelta(days=7)  # Select past week\r\n",
							"start = 0\r\n",
							"limit = 100\r\n",
							"start_badge = 1  # Badge related calls calls start counting at 1\r\n",
							"activitytype = \"\"  # Possible values are: cycling, running, swimming, multi_sport, fitness_equipment, hiking, walking, other\r\n",
							"activityfile = \"MY_ACTIVITY.fit\"  # Supported file types are: .fit .gpx .tcx\r\n",
							"weight = 89.6\r\n",
							"weightunit = 'kg'\r\n",
							"# workout_example = \"\"\"\r\n",
							"# {\r\n",
							"#     'workoutId': \"random_id\",\r\n",
							"#     'ownerId': \"random\",\r\n",
							"#     'workoutName': 'Any workout name',\r\n",
							"#     'description': 'FTP 200, TSS 1, NP 114, IF 0.57',\r\n",
							"#     'sportType': {'sportTypeId': 2, 'sportTypeKey': 'cycling'},\r\n",
							"#     'workoutSegments': [\r\n",
							"#         {\r\n",
							"#             'segmentOrder': 1,\r\n",
							"#             'sportType': {'sportTypeId': 2, 'sportTypeKey': 'cycling'},\r\n",
							"#             'workoutSteps': [\r\n",
							"#                 {'type': 'ExecutableStepDTO', 'stepOrder': 1,\r\n",
							"#                     'stepType': {'stepTypeId': 3, 'stepTypeKey': 'interval'}, 'childStepId': None,\r\n",
							"#                     'endCondition': {'conditionTypeId': 2, 'conditionTypeKey': 'time'}, 'endConditionValue': 60,\r\n",
							"#                     'targetType': {'workoutTargetTypeId': 2, 'workoutTargetTypeKey': 'power.zone'},\r\n",
							"#                     'targetValueOne': 95, 'targetValueTwo': 105},\r\n",
							"#                 {'type': 'ExecutableStepDTO', 'stepOrder': 2,\r\n",
							"#                     'stepType': {'stepTypeId': 3, 'stepTypeKey': 'interval'}, 'childStepId': None,\r\n",
							"#                     'endCondition': {'conditionTypeId': 2, 'conditionTypeKey': 'time'}, 'endConditionValue': 120,\r\n",
							"#                     'targetType': {'workoutTargetTypeId': 2, 'workoutTargetTypeKey': 'power.zone'},\r\n",
							"#                     'targetValueOne': 114, 'targetValueTwo': 126}\r\n",
							"#             ]\r\n",
							"#         }\r\n",
							"#     ]\r\n",
							"# }\r\n",
							"# \"\"\"\r\n",
							"\r\n",
							"menu_options = {\r\n",
							"    \"1\": \"Get full name\",\r\n",
							"    \"2\": \"Get unit system\",\r\n",
							"    \"3\": f\"Get activity data for '{today.isoformat()}'\",\r\n",
							"    \"4\": f\"Get activity data for '{today.isoformat()}' (compatible with garminconnect-ha)\",\r\n",
							"    \"5\": f\"Get body composition data for '{today.isoformat()}' (compatible with garminconnect-ha)\",\r\n",
							"    \"6\": f\"Get body composition data for from '{startdate.isoformat()}' to '{today.isoformat()}' (to be compatible with garminconnect-ha)\",\r\n",
							"    \"7\": f\"Get stats and body composition data for '{today.isoformat()}'\",\r\n",
							"    \"8\": f\"Get steps data for '{today.isoformat()}'\",\r\n",
							"    \"9\": f\"Get heart rate data for '{today.isoformat()}'\",\r\n",
							"    \"0\": f\"Get training readiness data for '{today.isoformat()}'\",\r\n",
							"    \"-\": f\"Get daily step data for '{startdate.isoformat()}' to '{today.isoformat()}'\",\r\n",
							"    \"/\": f\"Get body battery data for '{startdate.isoformat()}' to '{today.isoformat()}'\",\r\n",
							"    \"!\": f\"Get floors data for '{startdate.isoformat()}'\",\r\n",
							"    \"?\": f\"Get blood pressure data for '{startdate.isoformat()}' to '{today.isoformat()}'\",\r\n",
							"    \".\": f\"Get training status data for '{today.isoformat()}'\",\r\n",
							"    \"a\": f\"Get resting heart rate data for {today.isoformat()}'\",\r\n",
							"    \"b\": f\"Get hydration data for '{today.isoformat()}'\",\r\n",
							"    \"c\": f\"Get sleep data for '{today.isoformat()}'\",\r\n",
							"    \"d\": f\"Get stress data for '{today.isoformat()}'\",\r\n",
							"    \"e\": f\"Get respiration data for '{today.isoformat()}'\",\r\n",
							"    \"f\": f\"Get SpO2 data for '{today.isoformat()}'\",\r\n",
							"    \"g\": f\"Get max metric data (like vo2MaxValue and fitnessAge) for '{today.isoformat()}'\",\r\n",
							"    \"h\": \"Get personal record for user\",\r\n",
							"    \"i\": \"Get earned badges for user\",\r\n",
							"    \"j\": f\"Get adhoc challenges data from start '{start}' and limit '{limit}'\",\r\n",
							"    \"k\": f\"Get available badge challenges data from '{start_badge}' and limit '{limit}'\",\r\n",
							"    \"l\": f\"Get badge challenges data from '{start_badge}' and limit '{limit}'\",\r\n",
							"    \"m\": f\"Get non completed badge challenges data from '{start_badge}' and limit '{limit}'\",\r\n",
							"    \"n\": f\"Get activities data from start '{start}' and limit '{limit}'\",\r\n",
							"    \"o\": \"Get last activity\",\r\n",
							"    \"p\": f\"Download activities data by date from '{startdate.isoformat()}' to '{today.isoformat()}'\",\r\n",
							"    \"r\": f\"Get all kinds of activities data from '{start}'\",\r\n",
							"    \"s\": f\"Upload activity data from file '{activityfile}'\",\r\n",
							"    \"t\": \"Get all kinds of Garmin device info\",\r\n",
							"    \"u\": \"Get active goals\",\r\n",
							"    \"v\": \"Get future goals\",\r\n",
							"    \"w\": \"Get past goals\",\r\n",
							"    \"y\": \"Get all Garmin device alarms\",\r\n",
							"    \"x\": f\"Get Heart Rate Variability data (HRV) for '{today.isoformat()}'\",\r\n",
							"    \"z\": f\"Get progress summary from '{startdate.isoformat()}' to '{today.isoformat()}' for all metrics\",\r\n",
							"    \"A\": \"Get gear, the defaults, activity types and statistics\",\r\n",
							"    \"B\": f\"Get weight-ins from '{startdate.isoformat()}' to '{today.isoformat()}'\",\r\n",
							"    \"C\": f\"Get daily weigh-ins for '{today.isoformat()}'\",\r\n",
							"    \"D\": f\"Delete all weigh-ins for '{today.isoformat()}'\",\r\n",
							"    \"E\": f\"Add a weigh-in of {weight}{weightunit} on '{today.isoformat()}'\",\r\n",
							"    \"F\": f\"Get virtual challenges/expeditions from '{startdate.isoformat()}' to '{today.isoformat()}'\",\r\n",
							"    \"G\": f\"Get hill score data from '{startdate.isoformat()}' to '{today.isoformat()}'\",\r\n",
							"    \"H\": f\"Get endurance score data from '{startdate.isoformat()}' to '{today.isoformat()}'\",\r\n",
							"    \"I\": f\"Get activities for date '{today.isoformat()}'\",\r\n",
							"    \"J\": \"Get race predictions\",\r\n",
							"    \"K\": f\"Get all day stress data for '{today.isoformat()}'\",\r\n",
							"    \"L\": f\"Add body composition for '{today.isoformat()}'\",\r\n",
							"    \"M\": \"Set blood pressure '120,80,80,notes='Testing with example.py'\",\r\n",
							"    \"N\": \"Get user profile/settings\",\r\n",
							"    \"O\": f\"Reload epoch data for {today.isoformat()}\",\r\n",
							"    \"P\": \"Get workouts 0-100, get and download last one to .FIT file\",\r\n",
							"    # \"Q\": \"Upload workout from json data\",\r\n",
							"    \"R\": \"Get solar data from your devices\",\r\n",
							"    \"S\": \"Get pregnancy summary data\",\r\n",
							"    \"Z\": \"Remove stored login tokens (logout)\",\r\n",
							"    \"q\": \"Exit\",\r\n",
							"}\r\n",
							"\r\n",
							"\r\n",
							"def display_json(api_call, output):\r\n",
							"    \"\"\"Format API output for better readability.\"\"\"\r\n",
							"\r\n",
							"    dashed = \"-\" * 20\r\n",
							"    header = f\"{dashed} {api_call} {dashed}\"\r\n",
							"    footer = \"-\" * len(header)\r\n",
							"\r\n",
							"    print(header)\r\n",
							"\r\n",
							"    if isinstance(output, (int, str, dict, list)):\r\n",
							"        print(json.dumps(output, indent=4))\r\n",
							"    else:\r\n",
							"        print(output)\r\n",
							"\r\n",
							"    print(footer)\r\n",
							"\r\n",
							"\r\n",
							"def display_text(output):\r\n",
							"    \"\"\"Format API output for better readability.\"\"\"\r\n",
							"\r\n",
							"    dashed = \"-\" * 60\r\n",
							"    header = f\"{dashed}\"\r\n",
							"    footer = \"-\" * len(header)\r\n",
							"\r\n",
							"    print(header)\r\n",
							"    print(json.dumps(output, indent=4))\r\n",
							"    print(footer)\r\n",
							"\r\n",
							"\r\n",
							"def get_credentials():\r\n",
							"    \"\"\"Get user credentials.\"\"\"\r\n",
							"\r\n",
							"    email = input(\"Login e-mail: \")\r\n",
							"    password = getpass(\"Enter password: \")\r\n",
							"\r\n",
							"    return email, password\r\n",
							"\r\n",
							"\r\n",
							"def init_api(email, password):\r\n",
							"    \"\"\"Initialize Garmin API with your credentials.\"\"\"\r\n",
							"\r\n",
							"    try:\r\n",
							"        # Using Oauth1 and OAuth2 token files from directory\r\n",
							"        print(\r\n",
							"            f\"Trying to login to Garmin Connect using token data from directory '{tokenstore}'...\\n\"\r\n",
							"        )\r\n",
							"\r\n",
							"        # Using Oauth1 and Oauth2 tokens from base64 encoded string\r\n",
							"        # print(\r\n",
							"        #     f\"Trying to login to Garmin Connect using token data from file '{tokenstore_base64}'...\\n\"\r\n",
							"        # )\r\n",
							"        # dir_path = os.path.expanduser(tokenstore_base64)\r\n",
							"        # with open(dir_path, \"r\") as token_file:\r\n",
							"        #     tokenstore = token_file.read()\r\n",
							"\r\n",
							"        # garmin = Garmin() # jm\r\n",
							"        # garmin.login(tokenstore) # jm\r\n",
							"        #garmin = Garmin(email=email, password=password, is_cn=False, prompt_mfa=get_mfa)\r\n",
							"        garmin = Garmin(email, password)\r\n",
							"        garmin.login()\r\n",
							"\r\n",
							"    except (FileNotFoundError, GarthHTTPError, GarminConnectAuthenticationError):\r\n",
							"        # Session is expired. You'll need to log in again\r\n",
							"        print(\r\n",
							"            \"Login tokens not present, login with your Garmin Connect credentials to generate them.\\n\"\r\n",
							"            f\"They will be stored in '{tokenstore}' for future use.\\n\"\r\n",
							"        )\r\n",
							"        try:\r\n",
							"            # Ask for credentials if not set as environment variables\r\n",
							"            if not email or not password:\r\n",
							"                email, password = get_credentials()\r\n",
							"\r\n",
							"            #garmin = Garmin(email=email, password=password, is_cn=False, prompt_mfa=get_mfa)\r\n",
							"            garmin = Garmin(email, password)\r\n",
							"            garmin.login()\r\n",
							"            # Save Oauth1 and Oauth2 token files to directory for next login\r\n",
							"            garmin.garth.dump(tokenstore)\r\n",
							"            print(\r\n",
							"                f\"Oauth tokens stored in '{tokenstore}' directory for future use. (first method)\\n\"\r\n",
							"            )\r\n",
							"            # Encode Oauth1 and Oauth2 tokens to base64 string and safe to file for next login (alternative way)\r\n",
							"            token_base64 = garmin.garth.dumps()\r\n",
							"            dir_path = os.path.expanduser(tokenstore_base64)\r\n",
							"            with open(dir_path, \"w\") as token_file:\r\n",
							"                token_file.write(token_base64)\r\n",
							"            print(\r\n",
							"                f\"Oauth tokens encoded as base64 string and saved to '{dir_path}' file for future use. (second method)\\n\"\r\n",
							"            )\r\n",
							"        except (FileNotFoundError, GarthHTTPError, GarminConnectAuthenticationError, requests.exceptions.HTTPError) as err:\r\n",
							"            logger.error(err)\r\n",
							"            return None\r\n",
							"\r\n",
							"    return garmin\r\n",
							"\r\n",
							"\r\n",
							"def get_mfa():\r\n",
							"    \"\"\"Get MFA.\"\"\"\r\n",
							"\r\n",
							"    return input(\"MFA one-time code: \")\r\n",
							"\r\n",
							"\r\n",
							"def print_menu():\r\n",
							"    \"\"\"Print examples menu.\"\"\"\r\n",
							"    for key in menu_options.keys():\r\n",
							"        print(f\"{key} -- {menu_options[key]}\")\r\n",
							"    print(\"Make your selection: \", end=\"\", flush=True)\r\n",
							"\r\n",
							"\r\n",
							"def switch(api, i):\r\n",
							"    \"\"\"Run selected API call.\"\"\"\r\n",
							"\r\n",
							"    # Exit example program\r\n",
							"    if i == \"q\":\r\n",
							"        print(\"Be active, generate some data to fetch next time ;-) Bye!\")\r\n",
							"        sys.exit()\r\n",
							"\r\n",
							"    # Skip requests if login failed\r\n",
							"    if api:\r\n",
							"        try:\r\n",
							"            print(f\"\\n\\nExecuting: {menu_options[i]}\\n\")\r\n",
							"\r\n",
							"            # USER BASICS\r\n",
							"            if i == \"1\":\r\n",
							"                # Get full name from profile\r\n",
							"                display_json(\"api.get_full_name()\", api.get_full_name())\r\n",
							"            elif i == \"2\":\r\n",
							"                # Get unit system from profile\r\n",
							"                display_json(\"api.get_unit_system()\", api.get_unit_system())\r\n",
							"\r\n",
							"            # USER STATISTIC SUMMARIES\r\n",
							"            elif i == \"3\":\r\n",
							"                # Get activity data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_stats('{today.isoformat()}')\",\r\n",
							"                    api.get_stats(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"4\":\r\n",
							"                # Get activity data (to be compatible with garminconnect-ha)\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_user_summary('{today.isoformat()}')\",\r\n",
							"                    api.get_user_summary(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"5\":\r\n",
							"                # Get body composition data for 'YYYY-MM-DD' (to be compatible with garminconnect-ha)\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_body_composition('{today.isoformat()}')\",\r\n",
							"                    api.get_body_composition(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"6\":\r\n",
							"                # Get body composition data for multiple days 'YYYY-MM-DD' (to be compatible with garminconnect-ha)\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_body_composition('{startdate.isoformat()}', '{today.isoformat()}')\",\r\n",
							"                    api.get_body_composition(startdate.isoformat(), today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"7\":\r\n",
							"                # Get stats and body composition data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_stats_and_body('{today.isoformat()}')\",\r\n",
							"                    api.get_stats_and_body(today.isoformat()),\r\n",
							"                )\r\n",
							"\r\n",
							"            # USER STATISTICS LOGGED\r\n",
							"            elif i == \"8\":\r\n",
							"                # Get steps data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_steps_data('{today.isoformat()}')\",\r\n",
							"                    api.get_steps_data(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"9\":\r\n",
							"                # Get heart rate data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_heart_rates('{today.isoformat()}')\",\r\n",
							"                    api.get_heart_rates(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"0\":\r\n",
							"                # Get training readiness data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_training_readiness('{today.isoformat()}')\",\r\n",
							"                    api.get_training_readiness(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"/\":\r\n",
							"                # Get daily body battery data for 'YYYY-MM-DD' to 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_body_battery('{startdate.isoformat()}, {today.isoformat()}')\",\r\n",
							"                    api.get_body_battery(startdate.isoformat(), today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"?\":\r\n",
							"                # Get daily blood pressure data for 'YYYY-MM-DD' to 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_blood_pressure('{startdate.isoformat()}, {today.isoformat()}')\",\r\n",
							"                    api.get_blood_pressure(startdate.isoformat(), today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"-\":\r\n",
							"                # Get daily step data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_daily_steps('{startdate.isoformat()}, {today.isoformat()}')\",\r\n",
							"                    api.get_daily_steps(startdate.isoformat(), today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"!\":\r\n",
							"                # Get daily floors data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_floors('{today.isoformat()}')\",\r\n",
							"                    api.get_floors(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \".\":\r\n",
							"                # Get training status data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_training_status('{today.isoformat()}')\",\r\n",
							"                    api.get_training_status(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"a\":\r\n",
							"                # Get resting heart rate data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_rhr_day('{today.isoformat()}')\",\r\n",
							"                    api.get_rhr_day(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"b\":\r\n",
							"                # Get hydration data 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_hydration_data('{today.isoformat()}')\",\r\n",
							"                    api.get_hydration_data(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"c\":\r\n",
							"                # Get sleep data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_sleep_data('{today.isoformat()}')\",\r\n",
							"                    api.get_sleep_data(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"d\":\r\n",
							"                # Get stress data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_stress_data('{today.isoformat()}')\",\r\n",
							"                    api.get_stress_data(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"e\":\r\n",
							"                # Get respiration data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_respiration_data('{today.isoformat()}')\",\r\n",
							"                    api.get_respiration_data(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"f\":\r\n",
							"                # Get SpO2 data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_spo2_data('{today.isoformat()}')\",\r\n",
							"                    api.get_spo2_data(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"g\":\r\n",
							"                # Get max metric data (like vo2MaxValue and fitnessAge) for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_max_metrics('{today.isoformat()}')\",\r\n",
							"                    api.get_max_metrics(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"h\":\r\n",
							"                # Get personal record for user\r\n",
							"                display_json(\"api.get_personal_record()\", api.get_personal_record())\r\n",
							"            elif i == \"i\":\r\n",
							"                # Get earned badges for user\r\n",
							"                display_json(\"api.get_earned_badges()\", api.get_earned_badges())\r\n",
							"            elif i == \"j\":\r\n",
							"                # Get adhoc challenges data from start and limit\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_adhoc_challenges({start},{limit})\",\r\n",
							"                    api.get_adhoc_challenges(start, limit),\r\n",
							"                )  # 1=start, 100=limit\r\n",
							"            elif i == \"k\":\r\n",
							"                # Get available badge challenges data from start and limit\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_available_badge_challenges({start_badge}, {limit})\",\r\n",
							"                    api.get_available_badge_challenges(start_badge, limit),\r\n",
							"                )  # 1=start, 100=limit\r\n",
							"            elif i == \"l\":\r\n",
							"                # Get badge challenges data from start and limit\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_badge_challenges({start_badge}, {limit})\",\r\n",
							"                    api.get_badge_challenges(start_badge, limit),\r\n",
							"                )  # 1=start, 100=limit\r\n",
							"            elif i == \"m\":\r\n",
							"                # Get non completed badge challenges data from start and limit\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_non_completed_badge_challenges({start_badge}, {limit})\",\r\n",
							"                    api.get_non_completed_badge_challenges(start_badge, limit),\r\n",
							"                )  # 1=start, 100=limit\r\n",
							"\r\n",
							"            # ACTIVITIES\r\n",
							"            elif i == \"n\":\r\n",
							"                # Get activities data from start and limit\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_activities({start}, {limit})\",\r\n",
							"                    api.get_activities(start, limit),\r\n",
							"                )  # 0=start, 1=limit\r\n",
							"            elif i == \"o\":\r\n",
							"                # Get last activity\r\n",
							"                display_json(\"api.get_last_activity()\", api.get_last_activity())\r\n",
							"            elif i == \"p\":\r\n",
							"                # Get activities data from startdate 'YYYY-MM-DD' to enddate 'YYYY-MM-DD', with (optional) activitytype\r\n",
							"                # Possible values are: cycling, running, swimming, multi_sport, fitness_equipment, hiking, walking, other\r\n",
							"                activities = api.get_activities_by_date(\r\n",
							"                    startdate.isoformat(), today.isoformat(), activitytype\r\n",
							"                )\r\n",
							"\r\n",
							"                # Download activities\r\n",
							"                for activity in activities:\r\n",
							"                    activity_id = activity[\"activityId\"]\r\n",
							"                    activity_name = activity[\"activityName\"]\r\n",
							"                    display_text(activity)\r\n",
							"\r\n",
							"                    print(\r\n",
							"                        f\"api.download_activity({activity_id}, dl_fmt=api.ActivityDownloadFormat.GPX)\"\r\n",
							"                    )\r\n",
							"                    gpx_data = api.download_activity(\r\n",
							"                        activity_id, dl_fmt=api.ActivityDownloadFormat.GPX\r\n",
							"                    )\r\n",
							"                    output_file = f\"./{str(activity_name)}.gpx\"\r\n",
							"                    with open(output_file, \"wb\") as fb:\r\n",
							"                        fb.write(gpx_data)\r\n",
							"                    print(f\"Activity data downloaded to file {output_file}\")\r\n",
							"\r\n",
							"                    print(\r\n",
							"                        f\"api.download_activity({activity_id}, dl_fmt=api.ActivityDownloadFormat.TCX)\"\r\n",
							"                    )\r\n",
							"                    tcx_data = api.download_activity(\r\n",
							"                        activity_id, dl_fmt=api.ActivityDownloadFormat.TCX\r\n",
							"                    )\r\n",
							"                    output_file = f\"./{str(activity_name)}.tcx\"\r\n",
							"                    with open(output_file, \"wb\") as fb:\r\n",
							"                        fb.write(tcx_data)\r\n",
							"                    print(f\"Activity data downloaded to file {output_file}\")\r\n",
							"\r\n",
							"                    print(\r\n",
							"                        f\"api.download_activity({activity_id}, dl_fmt=api.ActivityDownloadFormat.ORIGINAL)\"\r\n",
							"                    )\r\n",
							"                    zip_data = api.download_activity(\r\n",
							"                        activity_id, dl_fmt=api.ActivityDownloadFormat.ORIGINAL\r\n",
							"                    )\r\n",
							"                    output_file = f\"./{str(activity_name)}.zip\"\r\n",
							"                    with open(output_file, \"wb\") as fb:\r\n",
							"                        fb.write(zip_data)\r\n",
							"                    print(f\"Activity data downloaded to file {output_file}\")\r\n",
							"\r\n",
							"                    print(\r\n",
							"                        f\"api.download_activity({activity_id}, dl_fmt=api.ActivityDownloadFormat.CSV)\"\r\n",
							"                    )\r\n",
							"                    csv_data = api.download_activity(\r\n",
							"                        activity_id, dl_fmt=api.ActivityDownloadFormat.CSV\r\n",
							"                    )\r\n",
							"                    output_file = f\"./{str(activity_name)}.csv\"\r\n",
							"                    with open(output_file, \"wb\") as fb:\r\n",
							"                        fb.write(csv_data)\r\n",
							"                    print(f\"Activity data downloaded to file {output_file}\")\r\n",
							"\r\n",
							"            elif i == \"r\":\r\n",
							"                # Get activities data from start and limit\r\n",
							"                activities = api.get_activities(start, limit)  # 0=start, 1=limit\r\n",
							"\r\n",
							"                # Get activity splits\r\n",
							"                first_activity_id = activities[0].get(\"activityId\")\r\n",
							"\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_activity_splits({first_activity_id})\",\r\n",
							"                    api.get_activity_splits(first_activity_id),\r\n",
							"                )\r\n",
							"\r\n",
							"                # Get activity split summaries for activity id\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_activity_split_summaries({first_activity_id})\",\r\n",
							"                    api.get_activity_split_summaries(first_activity_id),\r\n",
							"                )\r\n",
							"\r\n",
							"                # Get activity weather data for activity\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_activity_weather({first_activity_id})\",\r\n",
							"                    api.get_activity_weather(first_activity_id),\r\n",
							"                )\r\n",
							"\r\n",
							"                # Get activity hr timezones id\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_activity_hr_in_timezones({first_activity_id})\",\r\n",
							"                    api.get_activity_hr_in_timezones(first_activity_id),\r\n",
							"                )\r\n",
							"\r\n",
							"                # Get activity details for activity id\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_activity_details({first_activity_id})\",\r\n",
							"                    api.get_activity_details(first_activity_id),\r\n",
							"                )\r\n",
							"\r\n",
							"                # Get gear data for activity id\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_activity_gear({first_activity_id})\",\r\n",
							"                    api.get_activity_gear(first_activity_id),\r\n",
							"                )\r\n",
							"\r\n",
							"                # Activity data for activity id\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_activity({first_activity_id})\",\r\n",
							"                    api.get_activity(first_activity_id),\r\n",
							"                )\r\n",
							"\r\n",
							"                # Get exercise sets in case the activity is a strength_training\r\n",
							"                if activities[0][\"activityType\"][\"typeKey\"] == \"strength_training\":\r\n",
							"                    display_json(\r\n",
							"                        f\"api.get_activity_exercise_sets({first_activity_id})\",\r\n",
							"                        api.get_activity_exercise_sets(first_activity_id),\r\n",
							"                    )\r\n",
							"\r\n",
							"            elif i == \"s\":\r\n",
							"                try:\r\n",
							"                    # Upload activity from file\r\n",
							"                    display_json(\r\n",
							"                        f\"api.upload_activity({activityfile})\",\r\n",
							"                        api.upload_activity(activityfile),\r\n",
							"                    )\r\n",
							"                except FileNotFoundError:\r\n",
							"                    print(f\"File to upload not found: {activityfile}\")\r\n",
							"\r\n",
							"            # DEVICES\r\n",
							"            elif i == \"t\":\r\n",
							"                # Get Garmin devices\r\n",
							"                devices = api.get_devices()\r\n",
							"                display_json(\"api.get_devices()\", devices)\r\n",
							"\r\n",
							"                # Get device last used\r\n",
							"                device_last_used = api.get_device_last_used()\r\n",
							"                display_json(\"api.get_device_last_used()\", device_last_used)\r\n",
							"\r\n",
							"                # Get settings per device\r\n",
							"                for device in devices:\r\n",
							"                    device_id = device[\"deviceId\"]\r\n",
							"                    display_json(\r\n",
							"                        f\"api.get_device_settings({device_id})\",\r\n",
							"                        api.get_device_settings(device_id),\r\n",
							"                    )\r\n",
							"\r\n",
							"                # Get primary training device information\r\n",
							"                primary_training_device = api.get_primary_training_device()\r\n",
							"                display_json(\"api.get_primary_training_device()\", primary_training_device)\r\n",
							"\r\n",
							"            elif i == \"R\":\r\n",
							"                # Get solar data from Garmin devices\r\n",
							"                devices = api.get_devices()\r\n",
							"                display_json(\"api.get_devices()\", devices)\r\n",
							"\r\n",
							"                # Get device last used\r\n",
							"                device_last_used = api.get_device_last_used()\r\n",
							"                display_json(\"api.get_device_last_used()\", device_last_used)\r\n",
							"\r\n",
							"                # Get settings per device\r\n",
							"                for device in devices:\r\n",
							"                    device_id = device[\"deviceId\"]\r\n",
							"                    display_json(\r\n",
							"                        f\"api.get_device_solar_data({device_id}, {today.isoformat()})\",\r\n",
							"                        api.get_device_solar_data(device_id, today.isoformat()),\r\n",
							"                    )\r\n",
							"            # GOALS\r\n",
							"            elif i == \"u\":\r\n",
							"                # Get active goals\r\n",
							"                goals = api.get_goals(\"active\")\r\n",
							"                display_json('api.get_goals(\"active\")', goals)\r\n",
							"\r\n",
							"            elif i == \"v\":\r\n",
							"                # Get future goals\r\n",
							"                goals = api.get_goals(\"future\")\r\n",
							"                display_json('api.get_goals(\"future\")', goals)\r\n",
							"\r\n",
							"            elif i == \"w\":\r\n",
							"                # Get past goals\r\n",
							"                goals = api.get_goals(\"past\")\r\n",
							"                display_json('api.get_goals(\"past\")', goals)\r\n",
							"\r\n",
							"            # ALARMS\r\n",
							"            elif i == \"y\":\r\n",
							"                # Get Garmin device alarms\r\n",
							"                alarms = api.get_device_alarms()\r\n",
							"                for alarm in alarms:\r\n",
							"                    alarm_id = alarm[\"alarmId\"]\r\n",
							"                    display_json(f\"api.get_device_alarms({alarm_id})\", alarm)\r\n",
							"\r\n",
							"            elif i == \"x\":\r\n",
							"                # Get Heart Rate Variability (hrv) data\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_hrv_data({today.isoformat()})\",\r\n",
							"                    api.get_hrv_data(today.isoformat()),\r\n",
							"                )\r\n",
							"\r\n",
							"            elif i == \"z\":\r\n",
							"                # Get progress summary\r\n",
							"                for metric in [\r\n",
							"                    \"elevationGain\",\r\n",
							"                    \"duration\",\r\n",
							"                    \"distance\",\r\n",
							"                    \"movingDuration\",\r\n",
							"                ]:\r\n",
							"                    display_json(\r\n",
							"                        f\"api.get_progress_summary_between_dates({today.isoformat()})\",\r\n",
							"                        api.get_progress_summary_between_dates(\r\n",
							"                            startdate.isoformat(), today.isoformat(), metric\r\n",
							"                        ),\r\n",
							"                    )\r\n",
							"            # GEAR\r\n",
							"            elif i == \"A\":\r\n",
							"                last_used_device = api.get_device_last_used()\r\n",
							"                display_json(\"api.get_device_last_used()\", last_used_device)\r\n",
							"                userProfileNumber = last_used_device[\"userProfileNumber\"]\r\n",
							"                gear = api.get_gear(userProfileNumber)\r\n",
							"                display_json(\"api.get_gear()\", gear)\r\n",
							"                display_json(\r\n",
							"                    \"api.get_gear_defaults()\", api.get_gear_defaults(userProfileNumber)\r\n",
							"                )\r\n",
							"                display_json(\"api.get()\", api.get_activity_types())\r\n",
							"                for gear in gear:\r\n",
							"                    uuid = gear[\"uuid\"]\r\n",
							"                    name = gear[\"displayName\"]\r\n",
							"                    display_json(\r\n",
							"                        f\"api.get_gear_stats({uuid}) / {name}\", api.get_gear_stats(uuid)\r\n",
							"                    )\r\n",
							"\r\n",
							"            # WEIGHT-INS\r\n",
							"            elif i == \"B\":\r\n",
							"                # Get weigh-ins data\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_weigh_ins({startdate.isoformat()}, {today.isoformat()})\",\r\n",
							"                    api.get_weigh_ins(startdate.isoformat(), today.isoformat())\r\n",
							"                )\r\n",
							"            elif i == \"C\":\r\n",
							"                # Get daily weigh-ins data\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_daily_weigh_ins({today.isoformat()})\",\r\n",
							"                    api.get_daily_weigh_ins(today.isoformat())\r\n",
							"                )\r\n",
							"            elif i == \"D\":\r\n",
							"                # Delete weigh-ins data for today\r\n",
							"                display_json(\r\n",
							"                    f\"api.delete_weigh_ins({today.isoformat()}, delete_all=True)\",\r\n",
							"                    api.delete_weigh_ins(today.isoformat(), delete_all=True)\r\n",
							"                )\r\n",
							"            elif i == \"E\":\r\n",
							"                # Add a weigh-in\r\n",
							"                weight = 89.6\r\n",
							"                unit = 'kg'\r\n",
							"                display_json(\r\n",
							"                    f\"api.add_weigh_in(weight={weight}, unitKey={unit})\",\r\n",
							"                    api.add_weigh_in(weight=weight, unitKey=unit)\r\n",
							"                )\r\n",
							"\r\n",
							"            # CHALLENGES/EXPEDITIONS\r\n",
							"            elif i == \"F\":\r\n",
							"                # Get virtual challenges/expeditions\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_inprogress_virtual_challenges({startdate.isoformat()}, {today.isoformat()})\",\r\n",
							"                    api.get_inprogress_virtual_challenges(startdate.isoformat(), today.isoformat())\r\n",
							"                )\r\n",
							"            elif i == \"G\":\r\n",
							"                # Get hill score data\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_hill_score({startdate.isoformat()}, {today.isoformat()})\",\r\n",
							"                    api.get_hill_score(startdate.isoformat(), today.isoformat())\r\n",
							"                )\r\n",
							"            elif i == \"H\":\r\n",
							"                # Get endurance score data\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_endurance_score({startdate.isoformat()}, {today.isoformat()})\",\r\n",
							"                    api.get_endurance_score(startdate.isoformat(), today.isoformat())\r\n",
							"                )\r\n",
							"            elif i == \"I\":\r\n",
							"                # Get activities for date\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_activities_fordate({today.isoformat()})\",\r\n",
							"                    api.get_activities_fordate(today.isoformat())\r\n",
							"                )\r\n",
							"            elif i == \"J\":\r\n",
							"                # Get race predictions\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_race_predictions()\",\r\n",
							"                    api.get_race_predictions()\r\n",
							"                )\r\n",
							"            elif i == \"K\":\r\n",
							"                # Get all day stress data for date\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_all_day_stress({today.isoformat()})\",\r\n",
							"                    api.get_all_day_stress(today.isoformat())\r\n",
							"                )\r\n",
							"            elif i == \"L\":\r\n",
							"                # Add body composition\r\n",
							"                weight = 70.0\r\n",
							"                percent_fat = 15.4\r\n",
							"                percent_hydration = 54.8\r\n",
							"                visceral_fat_mass = 10.8\r\n",
							"                bone_mass = 2.9\r\n",
							"                muscle_mass = 55.2\r\n",
							"                basal_met = 1454.1\r\n",
							"                active_met = None\r\n",
							"                physique_rating = None\r\n",
							"                metabolic_age = 33.0\r\n",
							"                visceral_fat_rating = None\r\n",
							"                bmi = 22.2\r\n",
							"                display_json(\r\n",
							"                    f\"api.add_body_composition({today.isoformat()}, {weight}, {percent_fat}, {percent_hydration}, {visceral_fat_mass}, {bone_mass}, {muscle_mass}, {basal_met}, {active_met}, {physique_rating}, {metabolic_age}, {visceral_fat_rating}, {bmi})\",\r\n",
							"                    api.add_body_composition(\r\n",
							"                        today.isoformat(),\r\n",
							"                        weight=weight,\r\n",
							"                        percent_fat=percent_fat,\r\n",
							"                        percent_hydration=percent_hydration,\r\n",
							"                        visceral_fat_mass=visceral_fat_mass,\r\n",
							"                        bone_mass=bone_mass,\r\n",
							"                        muscle_mass=muscle_mass,\r\n",
							"                        basal_met=basal_met,\r\n",
							"                        active_met=active_met,\r\n",
							"                        physique_rating=physique_rating,\r\n",
							"                        metabolic_age=metabolic_age,\r\n",
							"                        visceral_fat_rating=visceral_fat_rating,\r\n",
							"                        bmi=bmi,\r\n",
							"                    )\r\n",
							"                )\r\n",
							"            elif i == \"M\":\r\n",
							"                # Set blood pressure values\r\n",
							"                display_json(\r\n",
							"                    f\"api.set_blood_pressure(120,80,80,notes=`Testing with example.py`)\",\r\n",
							"                    api.set_blood_pressure(120,80,80,notes=\"Testing with example.py\")\r\n",
							"                )\r\n",
							"            elif i == \"N\":\r\n",
							"                # Get user profile\r\n",
							"                display_json(\r\n",
							"                    \"api.get_user_profile()\",\r\n",
							"                    api.get_user_profile()\r\n",
							"                )\r\n",
							"            elif i == \"O\":\r\n",
							"                # Reload epoch data for date\r\n",
							"                display_json(\r\n",
							"                    f\"api.request_reload({today.isoformat()})\",\r\n",
							"                    api.request_reload(today.isoformat())\r\n",
							"                )\r\n",
							"\r\n",
							"            # WORKOUTS\r\n",
							"            elif i == \"P\":\r\n",
							"                workouts = api.get_workouts()\r\n",
							"                # Get workout 0-100\r\n",
							"                display_json(\r\n",
							"                    \"api.get_workouts()\",\r\n",
							"                    api.get_workouts()\r\n",
							"                )\r\n",
							"\r\n",
							"                # Get last fetched workout\r\n",
							"                workout_id = workouts[-1]['workoutId']\r\n",
							"                workout_name = workouts[-1][\"workoutName\"]\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_workout_by_id({workout_id})\",\r\n",
							"                    api.get_workout_by_id(workout_id))\r\n",
							"\r\n",
							"                # Download last fetched workout\r\n",
							"                print(\r\n",
							"                    f\"api.download_workout({workout_id})\"\r\n",
							"                )\r\n",
							"                workout_data = api.download_workout(\r\n",
							"                    workout_id\r\n",
							"                )\r\n",
							"                \r\n",
							"                output_file = f\"./{str(workout_name)}.fit\"\r\n",
							"                with open(output_file, \"wb\") as fb:\r\n",
							"                    fb.write(workout_data)\r\n",
							"\r\n",
							"                print(f\"Workout data downloaded to file {output_file}\")\r\n",
							"\r\n",
							"            # elif i == \"Q\":\r\n",
							"            #     display_json(\r\n",
							"            #         f\"api.upload_workout({workout_example})\",\r\n",
							"            #         api.upload_workout(workout_example))\r\n",
							"\r\n",
							"            # WOMEN'S HEALTH\r\n",
							"            elif i == \"S\":\r\n",
							"                # Get pregnancy summary data\r\n",
							"                display_json(\r\n",
							"                    \"api.get_pregnancy_summary()\",\r\n",
							"                    api.get_pregnancy_summary()\r\n",
							"                )\r\n",
							"\r\n",
							"            # Additional related calls:\r\n",
							"            # get_menstrual_data_for_date(self, fordate: str): takes a single date and returns the Garmin Menstrual Summary data for that date\r\n",
							"            # get_menstrual_calendar_data(self, startdate: str, enddate: str) takes two dates and returns summaries of cycles that have days between the two days\r\n",
							"\r\n",
							"            elif i == \"Z\":\r\n",
							"                # Remove stored login tokens for Garmin Connect portal\r\n",
							"                tokendir = os.path.expanduser(tokenstore)\r\n",
							"                print(f\"Removing stored login tokens from: {tokendir}\")\r\n",
							"                \r\n",
							"                try:\r\n",
							"                    for root, dirs, files in os.walk(tokendir, topdown=False):\r\n",
							"                        for name in files:\r\n",
							"                            os.remove(os.path.join(root, name))\r\n",
							"                        for name in dirs:\r\n",
							"                            os.rmdir(os.path.join(root, name))\r\n",
							"                    print(f\"Directory {tokendir} removed\")\r\n",
							"                except FileNotFoundError:\r\n",
							"                    print(f\"Directory not found: {tokendir}\")\r\n",
							"                api = None\r\n",
							"\r\n",
							"        except (\r\n",
							"            GarminConnectConnectionError,\r\n",
							"            GarminConnectAuthenticationError,\r\n",
							"            GarminConnectTooManyRequestsError,\r\n",
							"            requests.exceptions.HTTPError,\r\n",
							"            GarthHTTPError\r\n",
							"        ) as err:\r\n",
							"            logger.error(err)\r\n",
							"        except KeyError:\r\n",
							"            # Invalid menu option chosen\r\n",
							"            pass\r\n",
							"    else:\r\n",
							"        print(\"Could not login to Garmin Connect, try again later.\")\r\n",
							"\r\n",
							"\r\n",
							"# Main program loop\r\n",
							"while True:\r\n",
							"    # Display header and login\r\n",
							"    print(\"\\n*** Garmin Connect API Demo by cyberjunky ***\\n\")\r\n",
							"\r\n",
							"    # Init API\r\n",
							"    if not api:\r\n",
							"        api = init_api(email, password)\r\n",
							"\r\n",
							"    if api:\r\n",
							"        # Display menu\r\n",
							"        #print_menu() # jm\r\n",
							"        #option = readchar.readkey() # jm\r\n",
							"        option = \"c\"\r\n",
							"        switch(api, option)\r\n",
							"    else:\r\n",
							"        api = init_api(email, password)"
						],
						"outputs": [],
						"execution_count": 6
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/03_test_Garmin_API_Call')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "30e1c909-e50e-4868-9f58-f114fdaa7cac"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"# Python 3 API wrapper for Garmin Connect\r\n",
							"#  az login within the environment Powershell to log into Azure so Key Vault can authenticate the request using Entra ID\r\n",
							"# Install the package using pip: pip3 install garminconnect azure-identity azure-keyvault-secrets azure-keyvault\r\n",
							"# Comment out the KeyVaultRequest line if hard-coding your Garmin credentials\r\n",
							"\r\n",
							"import garminconnect\r\n",
							"from datetime import datetime, timedelta\r\n",
							"\r\n",
							"\r\n",
							"def main():\r\n",
							"    try:\r\n",
							"        # Get API password from Key Vault. Replace with hard-coded values to avoid the KeyVault request\r\n",
							"        # Garmin_Username = \"My Garmin email/login\"\r\n",
							"        Garmin_Username = \"\"\r\n",
							"        # Garmin_Username = \"My Garmin password\"\r\n",
							"        Garmin_Password = \"\"\r\n",
							"\r\n",
							"        if not Garmin_Username:\r\n",
							"            print(\"Garmin_Username retrieval/initialisation failed. Check your Key Vault configuration/python.\")\r\n",
							"            return\r\n",
							"        \r\n",
							"        if not Garmin_Password:\r\n",
							"            print(\"Garmin_Password retrieval/initialisation failed. Check your Key Vault configuration/python.\")\r\n",
							"            return\r\n",
							"\r\n",
							"        # Initialize Garmin Connect client\r\n",
							"        client = garminconnect.Garmin(Garmin_Username, Garmin_Password)\r\n",
							"        client.login()\r\n",
							"\r\n",
							"        # Calculate start and end dates for the last three months\r\n",
							"        today = datetime.today()\r\n",
							"        three_months_ago = today - timedelta(days=90)\r\n",
							"\r\n",
							"        # Example: Get activity data for the last three months\r\n",
							"        activities_data = client.get_activities_by_date(three_months_ago.strftime(\"%Y-%m-%d\"), today.strftime(\"%Y-%m-%d\"))\r\n",
							"        print(f\"Activities data for the last three months: {activities_data}\")\r\n",
							"\r\n",
							"        # # Example: Get body composition data for the last three months\r\n",
							"        # body_composition_data = client.get_body_composition_data(three_months_ago.strftime(\"%Y-%m-%d\"), today.strftime(\"%Y-%m-%d\"))\r\n",
							"        # print(f\"Body composition data for the last three months: {body_composition_data}\")\r\n",
							"\r\n",
							"        # Add more API calls as needed for other statistics and activities\r\n",
							"\r\n",
							"    except Exception as e:\r\n",
							"        print(f\"Error: {e}\")\r\n",
							"\r\n",
							"if __name__ == \"__main__\":\r\n",
							"    main()\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/04_Garmin_API_Call_Key_Vault_Python')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "personalsparkp",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "4",
						"spark.autotune.trackingId": "8611bfd4-7a56-46a0-b8c4-9b5cb23a4733"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/91972177-b241-4547-980b-98433788152e/resourceGroups/personalprojectsrg/providers/Microsoft.Synapse/workspaces/personalprojectsrgsynapse/bigDataPools/personalsparkp",
						"name": "personalsparkp",
						"type": "Spark",
						"endpoint": "https://personalprojectsrgsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/personalsparkp",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"# Test connecting to Azure Key Vault in Python\r\n",
							"# If in VS Code, then \"Connect-AzAccount\" within the Terminal Powershell to log into Azure so Key Vault can authenticate the request using Entra ID\r\n",
							"# How authetication works in Azure Key Vault # How authentication works https://learn.microsoft.com/en-us/python/api/overview/azure/identity-readme?view=azure-python#authenticating-a-user-assigned-managed-identity-with-defaultazurecredential\r\n",
							"# Install the package using pip: pip3 install garminconnect azure-identity azure-keyvault-secrets azure-keyvault or\r\n",
							"!pip install garminconnect azure-identity azure-keyvault-secrets azure-keyvault\r\n",
							"\r\n",
							"\r\n",
							"import garminconnect\r\n",
							"from datetime import datetime, timedelta\r\n",
							"from azure.identity import DefaultAzureCredential\r\n",
							"from azure.keyvault.secrets import SecretClient\r\n",
							"\r\n",
							"def get_api_key_from_keyvault(key_vault_name, secret_name, secret_version=None): \r\n",
							"    try:\r\n",
							"        # Initialize Azure Key Vault client\r\n",
							"        #key_vault_name = \"judeskv\"\r\n",
							"        kv_uri = f\"https://{key_vault_name}.vault.azure.net\"\r\n",
							"        credential = DefaultAzureCredential()\r\n",
							"        secret_client = SecretClient(vault_url=kv_uri, credential=credential)\r\n",
							"\r\n",
							"        # Retrieve your API credentials (secret) from Key Vault\r\n",
							"        #secret_name = \"GarminPassword\"\r\n",
							"        api_key = secret_client.get_secret(secret_name).value\r\n",
							"        return api_key\r\n",
							"    except Exception as e:\r\n",
							"        print(f\"Error retrieving API key from Key Vault: {e}\")\r\n",
							"        return None\r\n",
							"\r\n",
							"def main():\r\n",
							"    try:\r\n",
							"        # Get API password from Key Vault. Replace with hard-coded values to avoid the KeyVault request\r\n",
							"        # Garmin_Username = \"My Garmin email/login\"\r\n",
							"        Garmin_Username = get_api_key_from_keyvault(\"judeskv\", \"GarminUsername\")\r\n",
							"        # Garmin_Username = \"My Garmin password\"\r\n",
							"        Garmin_Password = get_api_key_from_keyvault(\"judeskv\", \"GarminPassword\")\r\n",
							"\r\n",
							"        if not Garmin_Username:\r\n",
							"            print(\"Garmin_Username retrieval/initialisation failed. Check your Key Vault configuration/python.\")\r\n",
							"            return\r\n",
							"        \r\n",
							"        if not Garmin_Password:\r\n",
							"            print(\"Garmin_Password retrieval/initialisation failed. Check your Key Vault configuration/python.\")\r\n",
							"            return\r\n",
							"\r\n",
							"        # Initialize Garmin Connect client\r\n",
							"        client = garminconnect.Garmin(Garmin_Username, Garmin_Password)\r\n",
							"        client.login()\r\n",
							"\r\n",
							"        # Calculate start and end dates for the last three months\r\n",
							"        today = datetime.today()\r\n",
							"        three_months_ago = today - timedelta(days=90)\r\n",
							"\r\n",
							"        # Example: Get activity data for the last three months\r\n",
							"        activities_data = client.get_activities_by_date(three_months_ago.strftime(\"%Y-%m-%d\"), today.strftime(\"%Y-%m-%d\"))\r\n",
							"        print(f\"Activities data for the last three months: {activities_data}\")\r\n",
							"\r\n",
							"\r\n",
							"        # # Example: Get body composition data for the last three months\r\n",
							"        # body_composition_data = client.get_body_composition_data(three_months_ago.strftime(\"%Y-%m-%d\"), today.strftime(\"%Y-%m-%d\"))\r\n",
							"        # print(f\"Body composition data for the last three months: {body_composition_data}\")\r\n",
							"\r\n",
							"        # Example: Get sleep data for the last three months\r\n",
							"        # sleep_data = client.get_sleep_data(three_months_ago.strftime(\"%Y-%m-%d\"), today.strftime(\"%Y-%m-%d\"))\r\n",
							"        # print(f\"Sleep data for the last three months: {sleep_data}\")\r\n",
							"\r\n",
							"        # Add more API calls as needed for other statistics and activities\r\n",
							"\r\n",
							"    except Exception as e:\r\n",
							"        print(f\"Error: {e}\")\r\n",
							"\r\n",
							"if __name__ == \"__main__\":\r\n",
							"    main()\r\n",
							""
						],
						"outputs": [],
						"execution_count": 1
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/04_Garmin_API_Call_Key_Vault_Synapse_Spark')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "personalsparkp",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "1",
						"spark.autotune.trackingId": "79027075-74fe-4c2a-9d11-6d2e0ed844c5"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/91972177-b241-4547-980b-98433788152e/resourceGroups/personalprojectsrg/providers/Microsoft.Synapse/workspaces/personalprojectsrgsynapse/bigDataPools/personalsparkp",
						"name": "personalsparkp",
						"type": "Spark",
						"endpoint": "https://personalprojectsrgsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/personalsparkp",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Test connecting to Azure Key Vault in Python\r\n",
							"# Follow this to create a linked service to the Key vault on Azure, then apply permission to the App ID from the Synapse Instance https://stackoverflow.com/questions/77846845/access-key-vault-in-azure-synapse-analytical-pipeline-notebook\r\n",
							"# Install the package using pip: pip3 install garminconnect azure-identity azure-keyvault-secrets azure-keyvault o"
						],
						"outputs": [],
						"execution_count": 34
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#%pip install garminconnect # notebookutils\r\n",
							"import garminconnect\r\n",
							"from datetime import datetime, timedelta\r\n",
							"from notebookutils import mssparkutils\r\n",
							"import json\r\n",
							"import pandas as pd"
						],
						"outputs": [],
						"execution_count": 44
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Function to fetch keys from keyvault\r\n",
							"def get_api_key_from_keyvault(key_vault_name, secret_name): \r\n",
							"    try:\r\n",
							"        api_key = mssparkutils.credentials.getSecret(key_vault_name,secret_name)\r\n",
							"        return api_key\r\n",
							"    except Exception as e:\r\n",
							"        print(f\"Error retrieving API key from Key Vault: {e}\")\r\n",
							"        return None"
						],
						"outputs": [],
						"execution_count": 36
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Get API password from Key Vault. Replace with hard-coded values to avoid the KeyVault request\r\n",
							"try:\r\n",
							"    Garmin_Username = get_api_key_from_keyvault(\"judeskv\", \"GarminUsername\")\r\n",
							"except Exception as e:\r\n",
							"    print(\"Garmin_Username retrieval/initialisation failed. Check your Key Vault configuration/python. {e}\")\r\n",
							"\r\n",
							"try:\r\n",
							"    Garmin_Password = get_api_key_from_keyvault(\"judeskv\", \"GarminPassword\")\r\n",
							"except Exception as e:\r\n",
							"    print(\"Garmin_Password retrieval/initialisation failed. Check your Key Vault configuration/python. {e}\")"
						],
						"outputs": [],
						"execution_count": 37
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Initialize Garmin Connect client\r\n",
							"try:\r\n",
							"    # Attempt to login\r\n",
							"\r\n",
							"    client = garminconnect.Garmin(Garmin_Username, Garmin_Password)\r\n",
							"    client.login()\r\n",
							"    print(\"Login successful.\")\r\n",
							"except Exception as e:\r\n",
							"        print(f\"Error logging into Garmin API: {e}\")"
						],
						"outputs": [],
						"execution_count": 38
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Calculate start and end dates for the last three months\r\n",
							"to_date = datetime.today()\r\n",
							"from_date = to_date - timedelta(days=500)"
						],
						"outputs": [],
						"execution_count": 39
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Get activity data for the last x days from garmin\r\n",
							"try:\r\n",
							"    activities_data = client.get_activities_by_date(from_date.isoformat(), to_date.isoformat())\r\n",
							"    print(f\"Fetched {len(activities_data)} activities.\")\r\n",
							"except Exception as e:\r\n",
							"    print(f\"Error feteching data from Garmin API: Call was: client.get_activities_by_date({from_date.isoformat()}, {to_date.isoformat()}\")"
						],
						"outputs": [],
						"execution_count": 40
					},
					{
						"cell_type": "code",
						"source": [
							"# Show the retreived data\r\n",
							"print(json.dumps(activities_data, indent = 1))\r\n",
							"# pathway = \"abfss://cdf6e060-d604-4869-9fdb-b4afea0ab27e@onelake.dfs.fabric.microsoft.com/1a5d0aaf-573b-472b-b0b3-48c8afeb4ff2/Files/DI-Connect-Fitness/\"\r\n",
							"# file = \"activities.parquet\"\r\n",
							"# full_path = f\"{pathway}{file}\"\r\n",
							"# activities_df.to_parquet(full_path, engine='pyarrow')\r\n",
							"# dfp = spark.read.parquet(\"Files/DI-Connect-Fitness/activities.parquet\")\r\n",
							"# # dfp now is a Spark DataFrame containing parquet data from \"Files/DI-Connect-Fitness/activities.parquet\".\r\n",
							"# display(dfp)\r\n",
							"\r\n",
							"#dfp.write.mode(\"overwrite\").format(\"delta\").saveAsTable(\"N_G_Table\")\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"# # Example: Get body composition data for the last three months\r\n",
							"# body_composition_data = client.get_body_composition_data(from_date.strftime(\"%Y-%m-%d\"), to_date.strftime(\"%Y-%m-%d\"))\r\n",
							"# print(f\"Body composition data for the last three months: {body_composition_data}\")\r\n",
							"\r\n",
							"# Example: Get sleep data for the last three months\r\n",
							"# sleep_data = client.get_sleep_data(from_date.strftime(\"%Y-%m-%d\"), to_date.strftime(\"%Y-%m-%d\"))\r\n",
							"# print(f\"Sleep data for the last three months: {sleep_data}\")\r\n",
							"\r\n",
							"# Add more API calls as needed for other statistics and activities\r\n",
							""
						],
						"outputs": [],
						"execution_count": 48
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Frame the retreived data\r\n",
							"activities_df = pd.DataFrame(activities_data)\r\n",
							"#print(activities_df.head)\r\n",
							"#print(activities_df.columns)"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/07_Garmin_API_Synapse_Pipeline')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "https://pypi.org/project/garminconnect/#description",
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "personalsparkp",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 1,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "4",
						"spark.autotune.trackingId": "9f9546c9-fe8f-4d30-ad61-5db251cebcba"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/91972177-b241-4547-980b-98433788152e/resourceGroups/personalprojectsrg/providers/Microsoft.Synapse/workspaces/personalprojectsrgsynapse/bigDataPools/personalsparkp",
						"name": "personalsparkp",
						"type": "Spark",
						"endpoint": "https://personalprojectsrgsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/personalsparkp",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"automaticScaleJobs": true
					},
					"sessionKeepAliveTimeout": 5
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"GARMIN_API_OPTION = 'act' # see list below\r\n",
							"DAYS_BEFORETODAY = 0 # end date as offset from today. IE today = 0, yesterday is 1.. \r\n",
							"DAYS_AGO =  0  # start date as offset from today. IE today = 0, yesterday is 1.. \r\n",
							"KEYVAULTNAME = 'judeskv'\r\n",
							"KEYVAULTLINKEDSERVICE = 'judeskvlinked'\r\n",
							"GARMIN_UNAME_KEY = 'GarminUsername' # Key vzult secret\r\n",
							"GARMIN_PASSW_KEY = 'GarminPassword' # Key vzult secret\r\n",
							"ABFS_DEST_ACCOUNT = 'abfss://personalprojectsfs@personalprojectsrslake.dfs.core.windows.net'\r\n",
							"ABFS_DEST_FOLDER = '/synapse/workspaces/personalprojectsrgsynapse/DataFiles/Garmin/'"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": []
						},
						"source": [
							"# Test connecting to Azure Key Vault in Python and gt Garmin data from Garmin API ref: https://pypi.org/project/garminconnect/\r\n",
							"# Follow this to create a linked service to the Key vault on Azure, then apply permission to the App ID from the Synapse Instance https://stackoverflow.com/questions/77846845/access-key-vault-in-azure-synapse-analytical-pipeline-notebook\r\n",
							"# Install the package using pip: pip3 install garminconnect azure-identity azure-keyvault-secrets azure-keyvault \r\n",
							"\r\n",
							"#!/usr/bin/env python3\r\n",
							"!pip install garminconnect \r\n",
							"\r\n",
							"import datetime\r\n",
							"import json\r\n",
							"import logging\r\n",
							"import pandas as pd\r\n",
							"# import os\r\n",
							"# import sys\r\n",
							"# from getpass import getpass\r\n",
							"\r\n",
							"#import readchar\r\n",
							"import requests\r\n",
							"from garth.exc import GarthHTTPError\r\n",
							"\r\n",
							"from garminconnect import (\r\n",
							"    Garmin,\r\n",
							"    GarminConnectAuthenticationError,\r\n",
							"    GarminConnectConnectionError,\r\n",
							"    GarminConnectTooManyRequestsError,\r\n",
							")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Configure debug logging\r\n",
							"# logging.basicConfig(level=logging.DEBUG)\r\n",
							"logging.basicConfig(level=logging.INFO)\r\n",
							"logger = logging.getLogger(__name__)\r\n",
							"\r\n",
							"# # Load environment variables if defined\r\n",
							"# email = # os.getenv(\"EMAIL\")\r\n",
							"# password =  # os.getenv(\"PASSWORD\")\r\n",
							"\r\n",
							"# Example selections and settings\r\n",
							"today = datetime.date.today() \r\n",
							"\r\n",
							"if DAYS_BEFORETODAY > 0:\r\n",
							"    enddate = today - datetime.timedelta(days=DAYS_BEFORETODAY)\r\n",
							"else:\r\n",
							"    enddate = today \r\n",
							"\r\n",
							"if DAYS_AGO > 0:\r\n",
							"    startdate = today - datetime.timedelta(days=DAYS_AGO)  \r\n",
							"else:\r\n",
							"    startdate = today\r\n",
							"\r\n",
							"start = 0\r\n",
							"limit = 300\r\n",
							"start_badge = 1  # Badge related calls calls start counting at 1\r\n",
							"activitytype = \"\"  # Possible values are: cycling, running, swimming, multi_sport, fitness_equipment, hiking, walking, other\r\n",
							"activityfile = \"MY_ACTIVITY.fit\"  # Supported file types are: .fit .gpx .tcx\r\n",
							"weight = 79.9\r\n",
							"weightunit = 'kg'\r\n",
							"# workout_example = \"\"\"\r\n",
							"# {\r\n",
							"#     'workoutId': \"random_id\",\r\n",
							"#     'ownerId': \"random\",\r\n",
							"#     'workoutName': 'Any workout name',\r\n",
							"#     'description': 'FTP 200, TSS 1, NP 114, IF 0.57',\r\n",
							"#     'sportType': {'sportTypeId': 2, 'sportTypeKey': 'cycling'},\r\n",
							"#     'workoutSegments': [\r\n",
							"#         {\r\n",
							"#             'segmentOrder': 1,\r\n",
							"#             'sportType': {'sportTypeId': 2, 'sportTypeKey': 'cycling'},\r\n",
							"#             'workoutSteps': [\r\n",
							"#                 {'type': 'ExecutableStepDTO', 'stepOrder': 1,\r\n",
							"#                     'stepType': {'stepTypeId': 3, 'stepTypeKey': 'interval'}, 'childStepId': None,\r\n",
							"#                     'endCondition': {'conditionTypeId': 2, 'conditionTypeKey': 'time'}, 'endConditionValue': 60,\r\n",
							"#                     'targetType': {'workoutTargetTypeId': 2, 'workoutTargetTypeKey': 'power.zone'},\r\n",
							"#                     'targetValueOne': 95, 'targetValueTwo': 105},\r\n",
							"#                 {'type': 'ExecutableStepDTO', 'stepOrder': 2,\r\n",
							"#                     'stepType': {'stepTypeId': 3, 'stepTypeKey': 'interval'}, 'childStepId': None,\r\n",
							"#                     'endCondition': {'conditionTypeId': 2, 'conditionTypeKey': 'time'}, 'endConditionValue': 120,\r\n",
							"#                     'targetType': {'workoutTargetTypeId': 2, 'workoutTargetTypeKey': 'power.zone'},\r\n",
							"#                     'targetValueOne': 114, 'targetValueTwo': 126}\r\n",
							"#             ]\r\n",
							"#         }\r\n",
							"#     ]\r\n",
							"# }\r\n",
							"# \"\"\"\r\n",
							"\r\n",
							"menu_options = {\r\n",
							"    \"act\":\"Activities between dates\",\r\n",
							"    \"1\": \"Get full name\",\r\n",
							"    \"2\": \"Get unit system\",\r\n",
							"    \"3\": f\"Get activity data for '{today.isoformat()}'\",\r\n",
							"    \"4\": f\"Get activity data for '{today.isoformat()}' (compatible with garminconnect-ha)\",\r\n",
							"    \"5\": f\"Get body composition data for '{today.isoformat()}' (compatible with garminconnect-ha)\",\r\n",
							"    \"6\": f\"Get body composition data for from '{startdate.isoformat()}' to '{today.isoformat()}' (to be compatible with garminconnect-ha)\",\r\n",
							"    \"7\": f\"Get stats and body composition data for '{today.isoformat()}'\",\r\n",
							"    \"8\": f\"Get steps data for '{today.isoformat()}'\",\r\n",
							"    \"9\": f\"Get heart rate data for '{today.isoformat()}'\",\r\n",
							"    \"0\": f\"Get training readiness data for '{today.isoformat()}'\",\r\n",
							"    \"-\": f\"Get daily step data for '{startdate.isoformat()}' to '{today.isoformat()}'\",\r\n",
							"    \"/\": f\"Get body battery data for '{startdate.isoformat()}' to '{today.isoformat()}'\",\r\n",
							"    \"!\": f\"Get floors data for '{startdate.isoformat()}'\",\r\n",
							"    \"?\": f\"Get blood pressure data for '{startdate.isoformat()}' to '{today.isoformat()}'\",\r\n",
							"    \".\": f\"Get training status data for '{today.isoformat()}'\",\r\n",
							"    \"a\": f\"Get resting heart rate data for {today.isoformat()}'\",\r\n",
							"    \"b\": f\"Get hydration data for '{today.isoformat()}'\",\r\n",
							"    \"c\": f\"Get sleep data for '{today.isoformat()}'\",\r\n",
							"    \"d\": f\"Get stress data for '{today.isoformat()}'\",\r\n",
							"    \"e\": f\"Get respiration data for '{today.isoformat()}'\",\r\n",
							"    \"f\": f\"Get SpO2 data for '{today.isoformat()}'\",\r\n",
							"    \"g\": f\"Get max metric data (like vo2MaxValue and fitnessAge) for '{today.isoformat()}'\",\r\n",
							"    \"h\": \"Get personal record for user\",\r\n",
							"    \"i\": \"Get earned badges for user\",\r\n",
							"    \"j\": f\"Get adhoc challenges data from start '{start}' and limit '{limit}'\",\r\n",
							"    \"k\": f\"Get available badge challenges data from '{start_badge}' and limit '{limit}'\",\r\n",
							"    \"l\": f\"Get badge challenges data from '{start_badge}' and limit '{limit}'\",\r\n",
							"    \"m\": f\"Get non completed badge challenges data from '{start_badge}' and limit '{limit}'\",\r\n",
							"    \"n\": f\"Get activities data from start '{start}' and limit '{limit}'\",\r\n",
							"    \"o\": \"Get last activity\",\r\n",
							"    \"p\": f\"Download activities data by date from '{startdate.isoformat()}' to '{today.isoformat()}'\",\r\n",
							"    \"r\": f\"Get all kinds of activities data from '{start}'\",\r\n",
							"    \"s\": f\"Upload activity data from file '{activityfile}'\",\r\n",
							"    \"t\": \"Get all kinds of Garmin device info\",\r\n",
							"    \"u\": \"Get active goals\",\r\n",
							"    \"v\": \"Get future goals\",\r\n",
							"    \"w\": \"Get past goals\",\r\n",
							"    \"y\": \"Get all Garmin device alarms\",\r\n",
							"    \"x\": f\"Get Heart Rate Variability data (HRV) for '{today.isoformat()}'\",\r\n",
							"    \"z\": f\"Get progress summary from '{startdate.isoformat()}' to '{today.isoformat()}' for all metrics\",\r\n",
							"    \"A\": \"Get gear, the defaults, activity types and statistics\",\r\n",
							"    \"B\": f\"Get weight-ins from '{startdate.isoformat()}' to '{today.isoformat()}'\",\r\n",
							"    \"C\": f\"Get daily weigh-ins for '{today.isoformat()}'\",\r\n",
							"    \"D\": f\"Delete all weigh-ins for '{today.isoformat()}'\",\r\n",
							"    \"E\": f\"Add a weigh-in of {weight}{weightunit} on '{today.isoformat()}'\",\r\n",
							"    \"F\": f\"Get virtual challenges/expeditions from '{startdate.isoformat()}' to '{today.isoformat()}'\",\r\n",
							"    \"G\": f\"Get hill score data from '{startdate.isoformat()}' to '{today.isoformat()}'\",\r\n",
							"    \"H\": f\"Get endurance score data from '{startdate.isoformat()}' to '{today.isoformat()}'\",\r\n",
							"    \"I\": f\"Get activities for date '{today.isoformat()}'\",\r\n",
							"    \"J\": \"Get race predictions\",\r\n",
							"    \"K\": f\"Get all day stress data for '{today.isoformat()}'\",\r\n",
							"    \"L\": f\"Add body composition for '{today.isoformat()}'\",\r\n",
							"    \"M\": \"Set blood pressure '120,80,80,notes='Testing with example.py'\",\r\n",
							"    \"N\": \"Get user profile/settings\",\r\n",
							"    \"O\": f\"Reload epoch data for {today.isoformat()}\",\r\n",
							"    \"P\": \"Get workouts 0-100, get and download last one to .FIT file\",\r\n",
							"    # \"Q\": \"Upload workout from json data\",\r\n",
							"    \"R\": \"Get solar data from your devices\",\r\n",
							"    \"S\": \"Get pregnancy summary data\",\r\n",
							"    \"Z\": \"Remove stored login tokens (logout)\",\r\n",
							"    \"q\": \"Exit\",\r\n",
							"}\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"def print_menu():\r\n",
							"    \"\"\"Print examples menu.\"\"\"\r\n",
							"    for key in menu_options.keys():\r\n",
							"        print(f\"{key} -- {menu_options[key]}\")\r\n",
							"\r\n",
							"def display_json(api_call, output):\r\n",
							"    \"\"\"Format API output for better readability.\"\"\"\r\n",
							"\r\n",
							"    dashed = \"-\" * 20\r\n",
							"    header = f\"{dashed} {api_call} {dashed}\"\r\n",
							"    footer = \"-\" * len(header)\r\n",
							"\r\n",
							"    print(header)\r\n",
							"\r\n",
							"    if isinstance(output, (int, str, dict, list)):\r\n",
							"        print(json.dumps(output, indent=4))\r\n",
							"    else:\r\n",
							"        print(output)\r\n",
							"\r\n",
							"    print(footer)\r\n",
							"\r\n",
							"\r\n",
							"def display_text(output):\r\n",
							"    \"\"\"Format API output for better readability.\"\"\"\r\n",
							"\r\n",
							"    dashed = \"-\" * 60\r\n",
							"    header = f\"{dashed}\"\r\n",
							"    footer = \"-\" * len(header)\r\n",
							"\r\n",
							"    print(header)\r\n",
							"    print(json.dumps(output, indent=4))\r\n",
							"    print(footer)\r\n",
							"\r\n",
							"\r\n",
							"def get_credentials():\r\n",
							"    \"\"\"Get user credentials.\"\"\"\r\n",
							"\r\n",
							"    email = input(\"Login e-mail: \")\r\n",
							"    password = getpass(\"Enter password: \")\r\n",
							"\r\n",
							"    return email, password\r\n",
							"\r\n",
							"\r\n",
							"def init_api(email, password):\r\n",
							"    \"\"\"Initialize Garmin API with your credentials.\"\"\"\r\n",
							"\r\n",
							"    try:\r\n",
							"        msg = f\"Trying to login to Garmin Connect...'\\n\"\r\n",
							"        #OUTPUTVAR = OUTPUTVAR + msg\r\n",
							"        print(msg)\r\n",
							"        garmin = Garmin(email=email, password=password, is_cn=False, prompt_mfa=get_mfa)\r\n",
							"        #garmin = Garmin(email, password)\r\n",
							"        garmin.login()\r\n",
							"        if garmin:\r\n",
							"            msg = 'Login successful.'\r\n",
							"            print(msg)\r\n",
							"            #OUTPUTVAR = OUTPUTVAR + msg\r\n",
							"    except (FileNotFoundError, GarthHTTPError, GarminConnectAuthenticationError, requests.exceptions.HTTPError) as err:\r\n",
							"            logger.error(err)\r\n",
							"            msg = 'Login failed.'\r\n",
							"            print(msg)\r\n",
							"            #OUTPUTVAR = OUTPUTVAR + msg\r\n",
							"            return None\r\n",
							"\r\n",
							"    return garmin\r\n",
							"\r\n",
							"\r\n",
							"def get_mfa():\r\n",
							"    \"\"\"Get MFA.\"\"\"\r\n",
							"\r\n",
							"    return input(\"MFA one-time code: \")\r\n",
							"\r\n",
							"\r\n",
							"def print_menu():\r\n",
							"    \"\"\"Print examples menu.\"\"\"\r\n",
							"    for key in menu_options.keys():\r\n",
							"        print(f\"{key} -- {menu_options[key]}\")\r\n",
							"    print(\"Make your selection: \", end=\"\", flush=True)\r\n",
							"\r\n",
							"\r\n",
							"def switch(api, i):\r\n",
							"    \"\"\"Run selected API call.\"\"\"\r\n",
							"\r\n",
							"    # Exit example program\r\n",
							"    if i == \"q\":\r\n",
							"        print(\"Be active, generate some data to fetch next time ;-) Bye!\")\r\n",
							"        sys.exit()\r\n",
							"\r\n",
							"    # Skip requests if login failed\r\n",
							"    if api:\r\n",
							"        try:\r\n",
							"            print(f\"\\n\\nExecuting: {menu_options[i]}\\n\")\r\n",
							"\r\n",
							"            # CUSTOM\r\n",
							"            if i == \"act\":\r\n",
							"                startofdata = startdate\r\n",
							"                endofdatadate = enddate\r\n",
							"                # Get sleep data for 'YYYY-MM-DD'\r\n",
							"                # display_json(\r\n",
							"                #     f\"api.get_activities_by_date('{startofdata.isoformat()},{endofdatadate.isoformat()}')\",\r\n",
							"                #     api.get_activities_by_date(startofdata.isoformat(),endofdatadate.isoformat()),\r\n",
							"                # )\r\n",
							"                (\r\n",
							"                    f\"api.get_activities_by_date('{startofdata.isoformat()},{endofdatadate.isoformat()}')\",\r\n",
							"                    api.get_activities_by_date(startofdata.isoformat(),endofdatadate.isoformat()),\r\n",
							"                    \"get_activities_by_date\",\r\n",
							"                    endofdatadate.isoformat(),\r\n",
							"                    ABFS_DEST_ACCOUNT,\r\n",
							"                    ABFS_DEST_FOLDER\r\n",
							"                )\r\n",
							"\r\n",
							"            # USER BASICS\r\n",
							"            if i == \"1\":\r\n",
							"                # Get full name from profile\r\n",
							"                display_json(\"api.get_full_name()\", api.get_full_name())\r\n",
							"            elif i == \"2\":\r\n",
							"                # Get unit system from profile\r\n",
							"                display_json(\"api.get_unit_system()\", api.get_unit_system())\r\n",
							"\r\n",
							"            # USER STATISTIC SUMMARIES\r\n",
							"            elif i == \"3\":\r\n",
							"                # Get activity data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_stats('{today.isoformat()}')\",\r\n",
							"                    api.get_stats(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"4\":\r\n",
							"                # Get activity data (to be compatible with garminconnect-ha)\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_user_summary('{today.isoformat()}')\",\r\n",
							"                    api.get_user_summary(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"5\":\r\n",
							"                # Get body composition data for 'YYYY-MM-DD' (to be compatible with garminconnect-ha)\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_body_composition('{today.isoformat()}')\",\r\n",
							"                    api.get_body_composition(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"6\":\r\n",
							"                # Get body composition data for multiple days 'YYYY-MM-DD' (to be compatible with garminconnect-ha)\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_body_composition('{startdate.isoformat()}', '{today.isoformat()}')\",\r\n",
							"                    api.get_body_composition(startdate.isoformat(), today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"7\":\r\n",
							"                # Get stats and body composition data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_stats_and_body('{today.isoformat()}')\",\r\n",
							"                    api.get_stats_and_body(today.isoformat()),\r\n",
							"                )\r\n",
							"\r\n",
							"            # USER STATISTICS LOGGED\r\n",
							"            elif i == \"8\":\r\n",
							"                # Get steps data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_steps_data('{today.isoformat()}')\",\r\n",
							"                    api.get_steps_data(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"9\":\r\n",
							"                # Get heart rate data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_heart_rates('{today.isoformat()}')\",\r\n",
							"                    api.get_heart_rates(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"0\":\r\n",
							"                # Get training readiness data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_training_readiness('{today.isoformat()}')\",\r\n",
							"                    api.get_training_readiness(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"/\":\r\n",
							"                # Get daily body battery data for 'YYYY-MM-DD' to 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_body_battery('{startdate.isoformat()}, {today.isoformat()}')\",\r\n",
							"                    api.get_body_battery(startdate.isoformat(), today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"?\":\r\n",
							"                # Get daily blood pressure data for 'YYYY-MM-DD' to 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_blood_pressure('{startdate.isoformat()}, {today.isoformat()}')\",\r\n",
							"                    api.get_blood_pressure(startdate.isoformat(), today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"-\":\r\n",
							"                # Get daily step data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_daily_steps('{startdate.isoformat()}, {today.isoformat()}')\",\r\n",
							"                    api.get_daily_steps(startdate.isoformat(), today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"!\":\r\n",
							"                # Get daily floors data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_floors('{today.isoformat()}')\",\r\n",
							"                    api.get_floors(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \".\":\r\n",
							"                # Get training status data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_training_status('{today.isoformat()}')\",\r\n",
							"                    api.get_training_status(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"a\":\r\n",
							"                # Get resting heart rate data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_rhr_day('{today.isoformat()}')\",\r\n",
							"                    api.get_rhr_day(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"b\":\r\n",
							"                # Get hydration data 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_hydration_data('{today.isoformat()}')\",\r\n",
							"                    api.get_hydration_data(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"c\":\r\n",
							"                endofdatadate = enddate\r\n",
							"                # Get sleep data for 'YYYY-MM-DD'\r\n",
							"                # display_json(\r\n",
							"                #     f\"api.get_sleep_data('{today.isoformat()}')\",\r\n",
							"                #     api.get_sleep_data(today.isoformat()),\r\n",
							"                # )\r\n",
							"                write_dataframe_to_parquet(\r\n",
							"                    f\"api.get_sleep_data('{endofdatadate.isoformat()}')\",\r\n",
							"                    api.get_sleep_data(endofdatadate.isoformat()),\r\n",
							"                    \"get_sleep_data\",\r\n",
							"                    endofdatadate.isoformat(),\r\n",
							"                    ABFS_DEST_ACCOUNT,\r\n",
							"                    ABFS_DEST_FOLDER\r\n",
							"                )\r\n",
							"\r\n",
							"            elif i == \"d\":\r\n",
							"                # Get stress data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_stress_data('{today.isoformat()}')\",\r\n",
							"                    api.get_stress_data(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"e\":\r\n",
							"                # Get respiration data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_respiration_data('{today.isoformat()}')\",\r\n",
							"                    api.get_respiration_data(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"f\":\r\n",
							"                # Get SpO2 data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_spo2_data('{today.isoformat()}')\",\r\n",
							"                    api.get_spo2_data(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"g\":\r\n",
							"                # Get max metric data (like vo2MaxValue and fitnessAge) for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_max_metrics('{today.isoformat()}')\",\r\n",
							"                    api.get_max_metrics(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"h\":\r\n",
							"                # Get personal record for user\r\n",
							"                display_json(\"api.get_personal_record()\", api.get_personal_record())\r\n",
							"            elif i == \"i\":\r\n",
							"                # Get earned badges for user\r\n",
							"                display_json(\"api.get_earned_badges()\", api.get_earned_badges())\r\n",
							"            elif i == \"j\":\r\n",
							"                # Get adhoc challenges data from start and limit\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_adhoc_challenges({start},{limit})\",\r\n",
							"                    api.get_adhoc_challenges(start, limit),\r\n",
							"                )  # 1=start, 100=limit\r\n",
							"            elif i == \"k\":\r\n",
							"                # Get available badge challenges data from start and limit\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_available_badge_challenges({start_badge}, {limit})\",\r\n",
							"                    api.get_available_badge_challenges(start_badge, limit),\r\n",
							"                )  # 1=start, 100=limit\r\n",
							"            elif i == \"l\":\r\n",
							"                # Get badge challenges data from start and limit\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_badge_challenges({start_badge}, {limit})\",\r\n",
							"                    api.get_badge_challenges(start_badge, limit),\r\n",
							"                )  # 1=start, 100=limit\r\n",
							"            elif i == \"m\":\r\n",
							"                # Get non completed badge challenges data from start and limit\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_non_completed_badge_challenges({start_badge}, {limit})\",\r\n",
							"                    api.get_non_completed_badge_challenges(start_badge, limit),\r\n",
							"                )  # 1=start, 100=limit\r\n",
							"\r\n",
							"            # ACTIVITIES\r\n",
							"            elif i == \"n\":\r\n",
							"                # Get activities data from start and limit\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_activities({start}, {limit})\",\r\n",
							"                    api.get_activities(start, limit),\r\n",
							"                )  # 0=start, 1=limit\r\n",
							"            elif i == \"o\":\r\n",
							"                # Get last activity\r\n",
							"                display_json(\"api.get_last_activity()\", api.get_last_activity())\r\n",
							"            elif i == \"p\":\r\n",
							"                # Get activities data from startdate 'YYYY-MM-DD' to enddate 'YYYY-MM-DD', with (optional) activitytype\r\n",
							"                # Possible values are: cycling, running, swimming, multi_sport, fitness_equipment, hiking, walking, other\r\n",
							"                activities = api.get_activities_by_date(\r\n",
							"                    startdate.isoformat(), today.isoformat(), activitytype\r\n",
							"                )\r\n",
							"\r\n",
							"                # Download activities\r\n",
							"                for activity in activities:\r\n",
							"                    activity_id = activity[\"activityId\"]\r\n",
							"                    activity_name = activity[\"activityName\"]\r\n",
							"                    display_text(activity)\r\n",
							"\r\n",
							"                    print(\r\n",
							"                        f\"api.download_activity({activity_id}, dl_fmt=api.ActivityDownloadFormat.GPX)\"\r\n",
							"                    )\r\n",
							"                    gpx_data = api.download_activity(\r\n",
							"                        activity_id, dl_fmt=api.ActivityDownloadFormat.GPX\r\n",
							"                    )\r\n",
							"                    output_file = f\"./{str(activity_name)}.gpx\"\r\n",
							"                    with open(output_file, \"wb\") as fb:\r\n",
							"                        fb.write(gpx_data)\r\n",
							"                    print(f\"Activity data downloaded to file {output_file}\")\r\n",
							"\r\n",
							"                    print(\r\n",
							"                        f\"api.download_activity({activity_id}, dl_fmt=api.ActivityDownloadFormat.TCX)\"\r\n",
							"                    )\r\n",
							"                    tcx_data = api.download_activity(\r\n",
							"                        activity_id, dl_fmt=api.ActivityDownloadFormat.TCX\r\n",
							"                    )\r\n",
							"                    output_file = f\"./{str(activity_name)}.tcx\"\r\n",
							"                    with open(output_file, \"wb\") as fb:\r\n",
							"                        fb.write(tcx_data)\r\n",
							"                    print(f\"Activity data downloaded to file {output_file}\")\r\n",
							"\r\n",
							"                    print(\r\n",
							"                        f\"api.download_activity({activity_id}, dl_fmt=api.ActivityDownloadFormat.ORIGINAL)\"\r\n",
							"                    )\r\n",
							"                    zip_data = api.download_activity(\r\n",
							"                        activity_id, dl_fmt=api.ActivityDownloadFormat.ORIGINAL\r\n",
							"                    )\r\n",
							"                    output_file = f\"./{str(activity_name)}.zip\"\r\n",
							"                    with open(output_file, \"wb\") as fb:\r\n",
							"                        fb.write(zip_data)\r\n",
							"                    print(f\"Activity data downloaded to file {output_file}\")\r\n",
							"\r\n",
							"                    print(\r\n",
							"                        f\"api.download_activity({activity_id}, dl_fmt=api.ActivityDownloadFormat.CSV)\"\r\n",
							"                    )\r\n",
							"                    csv_data = api.download_activity(\r\n",
							"                        activity_id, dl_fmt=api.ActivityDownloadFormat.CSV\r\n",
							"                    )\r\n",
							"                    output_file = f\"./{str(activity_name)}.csv\"\r\n",
							"                    with open(output_file, \"wb\") as fb:\r\n",
							"                        fb.write(csv_data)\r\n",
							"                    print(f\"Activity data downloaded to file {output_file}\")\r\n",
							"\r\n",
							"            elif i == \"r\":\r\n",
							"                # Get activities data from start and limit\r\n",
							"                activities = api.get_activities(start, limit)  # 0=start, 1=limit\r\n",
							"\r\n",
							"                # Get activity splits\r\n",
							"                first_activity_id = activities[0].get(\"activityId\")\r\n",
							"\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_activity_splits({first_activity_id})\",\r\n",
							"                    api.get_activity_splits(first_activity_id),\r\n",
							"                )\r\n",
							"\r\n",
							"                # Get activity split summaries for activity id\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_activity_split_summaries({first_activity_id})\",\r\n",
							"                    api.get_activity_split_summaries(first_activity_id),\r\n",
							"                )\r\n",
							"\r\n",
							"                # Get activity weather data for activity\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_activity_weather({first_activity_id})\",\r\n",
							"                    api.get_activity_weather(first_activity_id),\r\n",
							"                )\r\n",
							"\r\n",
							"                # Get activity hr timezones id\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_activity_hr_in_timezones({first_activity_id})\",\r\n",
							"                    api.get_activity_hr_in_timezones(first_activity_id),\r\n",
							"                )\r\n",
							"\r\n",
							"                # Get activity details for activity id\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_activity_details({first_activity_id})\",\r\n",
							"                    api.get_activity_details(first_activity_id),\r\n",
							"                )\r\n",
							"\r\n",
							"                # Get gear data for activity id\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_activity_gear({first_activity_id})\",\r\n",
							"                    api.get_activity_gear(first_activity_id),\r\n",
							"                )\r\n",
							"\r\n",
							"                # Activity data for activity id\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_activity({first_activity_id})\",\r\n",
							"                    api.get_activity(first_activity_id),\r\n",
							"                )\r\n",
							"\r\n",
							"                # Get exercise sets in case the activity is a strength_training\r\n",
							"                if activities[0][\"activityType\"][\"typeKey\"] == \"strength_training\":\r\n",
							"                    display_json(\r\n",
							"                        f\"api.get_activity_exercise_sets({first_activity_id})\",\r\n",
							"                        api.get_activity_exercise_sets(first_activity_id),\r\n",
							"                    )\r\n",
							"\r\n",
							"            elif i == \"s\":\r\n",
							"                try:\r\n",
							"                    # Upload activity from file\r\n",
							"                    display_json(\r\n",
							"                        f\"api.upload_activity({activityfile})\",\r\n",
							"                        api.upload_activity(activityfile),\r\n",
							"                    )\r\n",
							"                except FileNotFoundError:\r\n",
							"                    print(f\"File to upload not found: {activityfile}\")\r\n",
							"\r\n",
							"            # DEVICES\r\n",
							"            elif i == \"t\":\r\n",
							"                # Get Garmin devices\r\n",
							"                devices = api.get_devices()\r\n",
							"                display_json(\"api.get_devices()\", devices)\r\n",
							"\r\n",
							"                # Get device last used\r\n",
							"                device_last_used = api.get_device_last_used()\r\n",
							"                display_json(\"api.get_device_last_used()\", device_last_used)\r\n",
							"\r\n",
							"                # Get settings per device\r\n",
							"                for device in devices:\r\n",
							"                    device_id = device[\"deviceId\"]\r\n",
							"                    display_json(\r\n",
							"                        f\"api.get_device_settings({device_id})\",\r\n",
							"                        api.get_device_settings(device_id),\r\n",
							"                    )\r\n",
							"\r\n",
							"                # Get primary training device information\r\n",
							"                primary_training_device = api.get_primary_training_device()\r\n",
							"                display_json(\"api.get_primary_training_device()\", primary_training_device)\r\n",
							"\r\n",
							"            elif i == \"R\":\r\n",
							"                # Get solar data from Garmin devices\r\n",
							"                devices = api.get_devices()\r\n",
							"                display_json(\"api.get_devices()\", devices)\r\n",
							"\r\n",
							"                # Get device last used\r\n",
							"                device_last_used = api.get_device_last_used()\r\n",
							"                display_json(\"api.get_device_last_used()\", device_last_used)\r\n",
							"\r\n",
							"                # Get settings per device\r\n",
							"                for device in devices:\r\n",
							"                    device_id = device[\"deviceId\"]\r\n",
							"                    display_json(\r\n",
							"                        f\"api.get_device_solar_data({device_id}, {today.isoformat()})\",\r\n",
							"                        api.get_device_solar_data(device_id, today.isoformat()),\r\n",
							"                    )\r\n",
							"            # GOALS\r\n",
							"            elif i == \"u\":\r\n",
							"                # Get active goals\r\n",
							"                goals = api.get_goals(\"active\")\r\n",
							"                display_json('api.get_goals(\"active\")', goals)\r\n",
							"\r\n",
							"            elif i == \"v\":\r\n",
							"                # Get future goals\r\n",
							"                goals = api.get_goals(\"future\")\r\n",
							"                display_json('api.get_goals(\"future\")', goals)\r\n",
							"\r\n",
							"            elif i == \"w\":\r\n",
							"                # Get past goals\r\n",
							"                goals = api.get_goals(\"past\")\r\n",
							"                display_json('api.get_goals(\"past\")', goals)\r\n",
							"\r\n",
							"            # ALARMS\r\n",
							"            elif i == \"y\":\r\n",
							"                # Get Garmin device alarms\r\n",
							"                alarms = api.get_device_alarms()\r\n",
							"                for alarm in alarms:\r\n",
							"                    alarm_id = alarm[\"alarmId\"]\r\n",
							"                    display_json(f\"api.get_device_alarms({alarm_id})\", alarm)\r\n",
							"\r\n",
							"            elif i == \"x\":\r\n",
							"                # Get Heart Rate Variability (hrv) data\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_hrv_data({today.isoformat()})\",\r\n",
							"                    api.get_hrv_data(today.isoformat()),\r\n",
							"                )\r\n",
							"\r\n",
							"            elif i == \"z\":\r\n",
							"                # Get progress summary\r\n",
							"                for metric in [\r\n",
							"                    \"elevationGain\",\r\n",
							"                    \"duration\",\r\n",
							"                    \"distance\",\r\n",
							"                    \"movingDuration\",\r\n",
							"                ]:\r\n",
							"                    display_json(\r\n",
							"                        f\"api.get_progress_summary_between_dates({today.isoformat()})\",\r\n",
							"                        api.get_progress_summary_between_dates(\r\n",
							"                            startdate.isoformat(), today.isoformat(), metric\r\n",
							"                        ),\r\n",
							"                    )\r\n",
							"            # GEAR\r\n",
							"            elif i == \"A\":\r\n",
							"                last_used_device = api.get_device_last_used()\r\n",
							"                display_json(\"api.get_device_last_used()\", last_used_device)\r\n",
							"                userProfileNumber = last_used_device[\"userProfileNumber\"]\r\n",
							"                gear = api.get_gear(userProfileNumber)\r\n",
							"                display_json(\"api.get_gear()\", gear)\r\n",
							"                display_json(\r\n",
							"                    \"api.get_gear_defaults()\", api.get_gear_defaults(userProfileNumber)\r\n",
							"                )\r\n",
							"                display_json(\"api.get()\", api.get_activity_types())\r\n",
							"                for gear in gear:\r\n",
							"                    uuid = gear[\"uuid\"]\r\n",
							"                    name = gear[\"displayName\"]\r\n",
							"                    display_json(\r\n",
							"                        f\"api.get_gear_stats({uuid}) / {name}\", api.get_gear_stats(uuid)\r\n",
							"                    )\r\n",
							"\r\n",
							"            # WEIGHT-INS\r\n",
							"            elif i == \"B\":\r\n",
							"                # Get weigh-ins data\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_weigh_ins({startdate.isoformat()}, {today.isoformat()})\",\r\n",
							"                    api.get_weigh_ins(startdate.isoformat(), today.isoformat())\r\n",
							"                )\r\n",
							"            elif i == \"C\":\r\n",
							"                # Get daily weigh-ins data\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_daily_weigh_ins({today.isoformat()})\",\r\n",
							"                    api.get_daily_weigh_ins(today.isoformat())\r\n",
							"                )\r\n",
							"            elif i == \"D\":\r\n",
							"                # Delete weigh-ins data for today\r\n",
							"                display_json(\r\n",
							"                    f\"api.delete_weigh_ins({today.isoformat()}, delete_all=True)\",\r\n",
							"                    api.delete_weigh_ins(today.isoformat(), delete_all=True)\r\n",
							"                )\r\n",
							"            elif i == \"E\":\r\n",
							"                # Add a weigh-in\r\n",
							"                weight = 89.6\r\n",
							"                unit = 'kg'\r\n",
							"                display_json(\r\n",
							"                    f\"api.add_weigh_in(weight={weight}, unitKey={unit})\",\r\n",
							"                    api.add_weigh_in(weight=weight, unitKey=unit)\r\n",
							"                )\r\n",
							"\r\n",
							"            # CHALLENGES/EXPEDITIONS\r\n",
							"            elif i == \"F\":\r\n",
							"                # Get virtual challenges/expeditions\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_inprogress_virtual_challenges({startdate.isoformat()}, {today.isoformat()})\",\r\n",
							"                    api.get_inprogress_virtual_challenges(startdate.isoformat(), today.isoformat())\r\n",
							"                )\r\n",
							"            elif i == \"G\":\r\n",
							"                # Get hill score data\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_hill_score({startdate.isoformat()}, {today.isoformat()})\",\r\n",
							"                    api.get_hill_score(startdate.isoformat(), today.isoformat())\r\n",
							"                )\r\n",
							"            elif i == \"H\":\r\n",
							"                # Get endurance score data\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_endurance_score({startdate.isoformat()}, {today.isoformat()})\",\r\n",
							"                    api.get_endurance_score(startdate.isoformat(), today.isoformat())\r\n",
							"                )\r\n",
							"            elif i == \"I\":\r\n",
							"                # Get activities for date\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_activities_fordate({today.isoformat()})\",\r\n",
							"                    api.get_activities_fordate(today.isoformat())\r\n",
							"                )\r\n",
							"            elif i == \"J\":\r\n",
							"                # Get race predictions\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_race_predictions()\",\r\n",
							"                    api.get_race_predictions()\r\n",
							"                )\r\n",
							"            elif i == \"K\":\r\n",
							"                # Get all day stress data for date\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_all_day_stress({today.isoformat()})\",\r\n",
							"                    api.get_all_day_stress(today.isoformat())\r\n",
							"                )\r\n",
							"            elif i == \"L\":\r\n",
							"                # Add body composition\r\n",
							"                weight = 70.0\r\n",
							"                percent_fat = 15.4\r\n",
							"                percent_hydration = 54.8\r\n",
							"                visceral_fat_mass = 10.8\r\n",
							"                bone_mass = 2.9\r\n",
							"                muscle_mass = 55.2\r\n",
							"                basal_met = 1454.1\r\n",
							"                active_met = None\r\n",
							"                physique_rating = None\r\n",
							"                metabolic_age = 33.0\r\n",
							"                visceral_fat_rating = None\r\n",
							"                bmi = 22.2\r\n",
							"                display_json(\r\n",
							"                    f\"api.add_body_composition({today.isoformat()}, {weight}, {percent_fat}, {percent_hydration}, {visceral_fat_mass}, {bone_mass}, {muscle_mass}, {basal_met}, {active_met}, {physique_rating}, {metabolic_age}, {visceral_fat_rating}, {bmi})\",\r\n",
							"                    api.add_body_composition(\r\n",
							"                        today.isoformat(),\r\n",
							"                        weight=weight,\r\n",
							"                        percent_fat=percent_fat,\r\n",
							"                        percent_hydration=percent_hydration,\r\n",
							"                        visceral_fat_mass=visceral_fat_mass,\r\n",
							"                        bone_mass=bone_mass,\r\n",
							"                        muscle_mass=muscle_mass,\r\n",
							"                        basal_met=basal_met,\r\n",
							"                        active_met=active_met,\r\n",
							"                        physique_rating=physique_rating,\r\n",
							"                        metabolic_age=metabolic_age,\r\n",
							"                        visceral_fat_rating=visceral_fat_rating,\r\n",
							"                        bmi=bmi,\r\n",
							"                    )\r\n",
							"                )\r\n",
							"            elif i == \"M\":\r\n",
							"                # Set blood pressure values\r\n",
							"                display_json(\r\n",
							"                    f\"api.set_blood_pressure(120,80,80,notes=`Testing with example.py`)\",\r\n",
							"                    api.set_blood_pressure(120,80,80,notes=\"Testing with example.py\")\r\n",
							"                )\r\n",
							"            elif i == \"N\":\r\n",
							"                # Get user profile\r\n",
							"                display_json(\r\n",
							"                    \"api.get_user_profile()\",\r\n",
							"                    api.get_user_profile()\r\n",
							"                )\r\n",
							"            elif i == \"O\":\r\n",
							"                # Reload epoch data for date\r\n",
							"                display_json(\r\n",
							"                    f\"api.request_reload({today.isoformat()})\",\r\n",
							"                    api.request_reload(today.isoformat())\r\n",
							"                )\r\n",
							"\r\n",
							"            # WORKOUTS\r\n",
							"            elif i == \"P\":\r\n",
							"                workouts = api.get_workouts()\r\n",
							"                # Get workout 0-100\r\n",
							"                display_json(\r\n",
							"                    \"api.get_workouts()\",\r\n",
							"                    api.get_workouts()\r\n",
							"                )\r\n",
							"\r\n",
							"                # Get last fetched workout\r\n",
							"                workout_id = workouts[-1]['workoutId']\r\n",
							"                workout_name = workouts[-1][\"workoutName\"]\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_workout_by_id({workout_id})\",\r\n",
							"                    api.get_workout_by_id(workout_id))\r\n",
							"\r\n",
							"                # Download last fetched workout\r\n",
							"                print(\r\n",
							"                    f\"api.download_workout({workout_id})\"\r\n",
							"                )\r\n",
							"                workout_data = api.download_workout(\r\n",
							"                    workout_id\r\n",
							"                )\r\n",
							"                \r\n",
							"                output_file = f\"./{str(workout_name)}.fit\"\r\n",
							"                with open(output_file, \"wb\") as fb:\r\n",
							"                    fb.write(workout_data)\r\n",
							"\r\n",
							"                print(f\"Workout data downloaded to file {output_file}\")\r\n",
							"\r\n",
							"            # elif i == \"Q\":\r\n",
							"            #     display_json(\r\n",
							"            #         f\"api.upload_workout({workout_example})\",\r\n",
							"            #         api.upload_workout(workout_example))\r\n",
							"\r\n",
							"            # WOMEN'S HEALTH\r\n",
							"            elif i == \"S\":\r\n",
							"                # Get pregnancy summary data\r\n",
							"                display_json(\r\n",
							"                    \"api.get_pregnancy_summary()\",\r\n",
							"                    api.get_pregnancy_summary()\r\n",
							"                )\r\n",
							"\r\n",
							"            # Additional related calls:\r\n",
							"            # get_menstrual_data_for_date(self, fordate: str): takes a single date and returns the Garmin Menstrual Summary data for that date\r\n",
							"            # get_menstrual_calendar_data(self, startdate: str, enddate: str) takes two dates and returns summaries of cycles that have days between the two days\r\n",
							"\r\n",
							"            elif i == \"Z\":\r\n",
							"                # Remove stored login tokens for Garmin Connect portal\r\n",
							"                tokendir = os.path.expanduser(tokenstore)\r\n",
							"                print(f\"Removing stored login tokens from: {tokendir}\")\r\n",
							"                \r\n",
							"                try:\r\n",
							"                    for root, dirs, files in os.walk(tokendir, topdown=False):\r\n",
							"                        for name in files:\r\n",
							"                            os.remove(os.path.join(root, name))\r\n",
							"                        for name in dirs:\r\n",
							"                            os.rmdir(os.path.join(root, name))\r\n",
							"                    print(f\"Directory {tokendir} removed\")\r\n",
							"                except FileNotFoundError:\r\n",
							"                    print(f\"Directory not found: {tokendir}\")\r\n",
							"                api = None\r\n",
							"\r\n",
							"        except (\r\n",
							"            GarminConnectConnectionError,\r\n",
							"            GarminConnectAuthenticationError,\r\n",
							"            GarminConnectTooManyRequestsError,\r\n",
							"            requests.exceptions.HTTPError,\r\n",
							"            GarthHTTPError\r\n",
							"        ) as err:\r\n",
							"            logger.error(err)\r\n",
							"        except KeyError:\r\n",
							"            # Invalid menu option chosen\r\n",
							"            pass\r\n",
							"    else:\r\n",
							"        status=\"Could not login to Garmin Connect, try again later.\"\r\n",
							"        print(status)\r\n",
							"\r\n",
							"# Function to fetch keys from keyvault\r\n",
							"def get_api_key_from_keyvault(key_vault_name, secret_name, linked_service_name): \r\n",
							"    try:\r\n",
							"        api_key = mssparkutils.credentials.getSecret(key_vault_name,secret_name, linked_service_name)\r\n",
							"        return api_key\r\n",
							"    except Exception as e:\r\n",
							"        msg = f\"Error retrieving API key from Key Vault: {e}\"\r\n",
							"        print(msg)\r\n",
							"        #OUTPUTVAR = OUTPUTVAR + msg\r\n",
							"        return None\r\n",
							"\r\n",
							"# Function to write Dartaframe to parquet\r\n",
							"def write_dataframe_to_parquet(api_call, output, garmin_api_endpoint, endofdatadate ,pathacc, pathfolder ): \r\n",
							"    try:\r\n",
							"        # pathacc = ABFS_DEST_ACCOUNT #\"abfss://personalprojectsfs@personalprojectsrslake.dfs.core.windows.net/synapse/workspaces/personalprojectsrgsynapse/DataFiles/Garmin/\"\r\n",
							"        # pathfolder = ABFS_DEST_FOLDER\r\n",
							"        #df = pd.DataFrame(output)\r\n",
							"        df = pd.json_normalize(output)\r\n",
							"\r\n",
							"        max_activityId = df['activityId'].max()\r\n",
							"\r\n",
							"        #print(max_activityId)\r\n",
							"\r\n",
							"        # Write lastest Activityid to parquet file\r\n",
							"        file = \"garmin-\" +garmin_api_endpoint+\"-LatestId.parquet\"\r\n",
							"        full_path = f\"{pathacc}{pathfolder}{file}\"\r\n",
							"        max_activityId.to_parquet(full_path, engine='pyarrow')\r\n",
							"        status = f\"SUCCESS: \\tLatest Id written to :\\n{full_path}\"\r\n",
							"        print(status)     \r\n",
							"    \r\n",
							"        file = \"garmin_\" +garmin_api_endpoint+\"-\" + endofdatadate + \".parquet\"\r\n",
							"        full_path = f\"{pathacc}{pathfolder}{file}\"\r\n",
							"        df.to_parquet(full_path, engine='pyarrow')\r\n",
							"        status = f\"SUCCESS: \\tData written to :\\n{full_path}\"\r\n",
							"        print(status)\r\n",
							"\r\n",
							"        #OUTPUTVAR = OUTPUTVAR + status\r\n",
							"        #print(status)\r\n",
							"        logger.error(status)\r\n",
							"    except Exception as e:\r\n",
							"        status = f\"Error writing data to :\\n{full_path}\\n {e}\"\r\n",
							"        print(status)\r\n",
							"        #OUTPUTVAR = OUTPUTVAR + status\r\n",
							"        return None"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Main program \r\n",
							"print(\"\\n*** Script by Jude Moore May 2024. Original Garmin Connect API code by cyberjunky ***\\n\")\r\n",
							"\r\n",
							"# Get API password from Key Vault. Replace with hard-coded values to avoid the KeyVault request\r\n",
							"try:\r\n",
							"    email = get_api_key_from_keyvault(KEYVAULTNAME, GARMIN_UNAME_KEY, KEYVAULTLINKEDSERVICE)\r\n",
							"except Exception as e:\r\n",
							"    print(\"Garmin_Username retrieval/initialisation failed. Check your Key Vault configuration/python. {e}\")\r\n",
							"\r\n",
							"try:\r\n",
							"    password = get_api_key_from_keyvault(KEYVAULTNAME, GARMIN_PASSW_KEY, KEYVAULTLINKEDSERVICE)\r\n",
							"except Exception as e:\r\n",
							"    print(\"Garmin_Password retrieval/initialisation failed. Check your Key Vault configuration/python. {e}\")\r\n",
							"\r\n",
							"api = init_api(email, password)\r\n",
							"\r\n",
							"if api:\r\n",
							"    # Display menu\r\n",
							"    #print_menu() \r\n",
							"    #option = readchar.readkey() # jm\r\n",
							"    option = GARMIN_API_OPTION\r\n",
							"    switch(api, option)\r\n",
							"    #OUTPUTVAR = f'<html><body><h1>HTML Output</h1><p>{OUTPUTVAR}</p></body></html>' # https://stackoverflow.com/questions/75862049/easily-access-notebook-output-run-in-synapse-pipeline\r\n",
							"    #mssparkutils.notebook.exit(outputval)\r\n",
							"else:\r\n",
							"    status = 'Issue logging in.'\r\n",
							"    print(status)\r\n",
							"    #OUTPUTVAR = OUTPUTVAR + status\r\n",
							"    logger.error(status)"
						],
						"outputs": [],
						"execution_count": 20
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/07_Garmin_API_Synapse_Pipeline_Copy1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "https://pypi.org/project/garminconnect/#description",
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "personalsparkp",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 1,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "4",
						"spark.autotune.trackingId": "40e051d2-de32-4c35-9589-da55d6566911"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/91972177-b241-4547-980b-98433788152e/resourceGroups/personalprojectsrg/providers/Microsoft.Synapse/workspaces/personalprojectsrgsynapse/bigDataPools/personalsparkp",
						"name": "personalsparkp",
						"type": "Spark",
						"endpoint": "https://personalprojectsrgsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/personalsparkp",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 5
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"GARMIN_API_OPTION = 'c' # see list below\r\n",
							"DAYS_BEFORETODAY = 0 # end date as offset from today. IE today = 0, yesterday is 1.. \r\n",
							"DAYS_AGO =  0  # start date as offset from today. IE today = 0, yesterday is 1.. \r\n",
							"KEYVAULTNAME = 'judeskv'\r\n",
							"KEYVAULTLINKEDSERVICE = 'judeskvlinked'\r\n",
							"GARMIN_UNAME_KEY = 'GarminUsername' # Key vzult secret\r\n",
							"GARMIN_PASSW_KEY = 'GarminPassword' # Key vzult secret\r\n",
							"ABFS_DEST_ACCOUNT = 'abfss://personalprojectsfs@personalprojectsrslake.dfs.core.windows.net'\r\n",
							"ABFS_DEST_FOLDER = '/synapse/workspaces/personalprojectsrgsynapse/DataFiles/Garmin/'"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": []
						},
						"source": [
							"# Test connecting to Azure Key Vault in Python and gt Garmin data from Garmin API ref: https://pypi.org/project/garminconnect/\r\n",
							"# Follow this to create a linked service to the Key vault on Azure, then apply permission to the App ID from the Synapse Instance https://stackoverflow.com/questions/77846845/access-key-vault-in-azure-synapse-analytical-pipeline-notebook\r\n",
							"# Install the package using pip: pip3 install garminconnect azure-identity azure-keyvault-secrets azure-keyvault \r\n",
							"\r\n",
							"#!/usr/bin/env python3\r\n",
							"!pip install garminconnect \r\n",
							"\r\n",
							"import datetime\r\n",
							"import json\r\n",
							"import logging\r\n",
							"import pandas as pd\r\n",
							"# import os\r\n",
							"# import sys\r\n",
							"# from getpass import getpass\r\n",
							"\r\n",
							"#import readchar\r\n",
							"import requests\r\n",
							"from garth.exc import GarthHTTPError\r\n",
							"\r\n",
							"from garminconnect import (\r\n",
							"    Garmin,\r\n",
							"    GarminConnectAuthenticationError,\r\n",
							"    GarminConnectConnectionError,\r\n",
							"    GarminConnectTooManyRequestsError,\r\n",
							")"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Configure debug logging\r\n",
							"# logging.basicConfig(level=logging.DEBUG)\r\n",
							"logging.basicConfig(level=logging.INFO)\r\n",
							"logger = logging.getLogger(__name__)\r\n",
							"\r\n",
							"# # Load environment variables if defined\r\n",
							"# email = # os.getenv(\"EMAIL\")\r\n",
							"# password =  # os.getenv(\"PASSWORD\")\r\n",
							"\r\n",
							"# Example selections and settings\r\n",
							"today = datetime.date.today() \r\n",
							"\r\n",
							"if DAYS_BEFORETODAY > 0:\r\n",
							"    enddate = today - datetime.timedelta(days=DAYS_BEFORETODAY)\r\n",
							"else:\r\n",
							"    enddate = today \r\n",
							"\r\n",
							"if DAYS_AGO > 0:\r\n",
							"    startdate = today - datetime.timedelta(days=DAYS_AGO)  \r\n",
							"else:\r\n",
							"    startdate = today\r\n",
							"\r\n",
							"start = 0\r\n",
							"limit = 300\r\n",
							"start_badge = 1  # Badge related calls calls start counting at 1\r\n",
							"activitytype = \"\"  # Possible values are: cycling, running, swimming, multi_sport, fitness_equipment, hiking, walking, other\r\n",
							"activityfile = \"MY_ACTIVITY.fit\"  # Supported file types are: .fit .gpx .tcx\r\n",
							"weight = 79.9\r\n",
							"weightunit = 'kg'\r\n",
							"# workout_example = \"\"\"\r\n",
							"# {\r\n",
							"#     'workoutId': \"random_id\",\r\n",
							"#     'ownerId': \"random\",\r\n",
							"#     'workoutName': 'Any workout name',\r\n",
							"#     'description': 'FTP 200, TSS 1, NP 114, IF 0.57',\r\n",
							"#     'sportType': {'sportTypeId': 2, 'sportTypeKey': 'cycling'},\r\n",
							"#     'workoutSegments': [\r\n",
							"#         {\r\n",
							"#             'segmentOrder': 1,\r\n",
							"#             'sportType': {'sportTypeId': 2, 'sportTypeKey': 'cycling'},\r\n",
							"#             'workoutSteps': [\r\n",
							"#                 {'type': 'ExecutableStepDTO', 'stepOrder': 1,\r\n",
							"#                     'stepType': {'stepTypeId': 3, 'stepTypeKey': 'interval'}, 'childStepId': None,\r\n",
							"#                     'endCondition': {'conditionTypeId': 2, 'conditionTypeKey': 'time'}, 'endConditionValue': 60,\r\n",
							"#                     'targetType': {'workoutTargetTypeId': 2, 'workoutTargetTypeKey': 'power.zone'},\r\n",
							"#                     'targetValueOne': 95, 'targetValueTwo': 105},\r\n",
							"#                 {'type': 'ExecutableStepDTO', 'stepOrder': 2,\r\n",
							"#                     'stepType': {'stepTypeId': 3, 'stepTypeKey': 'interval'}, 'childStepId': None,\r\n",
							"#                     'endCondition': {'conditionTypeId': 2, 'conditionTypeKey': 'time'}, 'endConditionValue': 120,\r\n",
							"#                     'targetType': {'workoutTargetTypeId': 2, 'workoutTargetTypeKey': 'power.zone'},\r\n",
							"#                     'targetValueOne': 114, 'targetValueTwo': 126}\r\n",
							"#             ]\r\n",
							"#         }\r\n",
							"#     ]\r\n",
							"# }\r\n",
							"# \"\"\"\r\n",
							"\r\n",
							"menu_options = {\r\n",
							"    \"act\":\"Activities between dates\",\r\n",
							"    \"1\": \"Get full name\",\r\n",
							"    \"2\": \"Get unit system\",\r\n",
							"    \"3\": f\"Get activity data for '{today.isoformat()}'\",\r\n",
							"    \"4\": f\"Get activity data for '{today.isoformat()}' (compatible with garminconnect-ha)\",\r\n",
							"    \"5\": f\"Get body composition data for '{today.isoformat()}' (compatible with garminconnect-ha)\",\r\n",
							"    \"6\": f\"Get body composition data for from '{startdate.isoformat()}' to '{today.isoformat()}' (to be compatible with garminconnect-ha)\",\r\n",
							"    \"7\": f\"Get stats and body composition data for '{today.isoformat()}'\",\r\n",
							"    \"8\": f\"Get steps data for '{today.isoformat()}'\",\r\n",
							"    \"9\": f\"Get heart rate data for '{today.isoformat()}'\",\r\n",
							"    \"0\": f\"Get training readiness data for '{today.isoformat()}'\",\r\n",
							"    \"-\": f\"Get daily step data for '{startdate.isoformat()}' to '{today.isoformat()}'\",\r\n",
							"    \"/\": f\"Get body battery data for '{startdate.isoformat()}' to '{today.isoformat()}'\",\r\n",
							"    \"!\": f\"Get floors data for '{startdate.isoformat()}'\",\r\n",
							"    \"?\": f\"Get blood pressure data for '{startdate.isoformat()}' to '{today.isoformat()}'\",\r\n",
							"    \".\": f\"Get training status data for '{today.isoformat()}'\",\r\n",
							"    \"a\": f\"Get resting heart rate data for {today.isoformat()}'\",\r\n",
							"    \"b\": f\"Get hydration data for '{today.isoformat()}'\",\r\n",
							"    \"c\": f\"Get sleep data for '{today.isoformat()}'\",\r\n",
							"    \"d\": f\"Get stress data for '{today.isoformat()}'\",\r\n",
							"    \"e\": f\"Get respiration data for '{today.isoformat()}'\",\r\n",
							"    \"f\": f\"Get SpO2 data for '{today.isoformat()}'\",\r\n",
							"    \"g\": f\"Get max metric data (like vo2MaxValue and fitnessAge) for '{today.isoformat()}'\",\r\n",
							"    \"h\": \"Get personal record for user\",\r\n",
							"    \"i\": \"Get earned badges for user\",\r\n",
							"    \"j\": f\"Get adhoc challenges data from start '{start}' and limit '{limit}'\",\r\n",
							"    \"k\": f\"Get available badge challenges data from '{start_badge}' and limit '{limit}'\",\r\n",
							"    \"l\": f\"Get badge challenges data from '{start_badge}' and limit '{limit}'\",\r\n",
							"    \"m\": f\"Get non completed badge challenges data from '{start_badge}' and limit '{limit}'\",\r\n",
							"    \"n\": f\"Get activities data from start '{start}' and limit '{limit}'\",\r\n",
							"    \"o\": \"Get last activity\",\r\n",
							"    \"p\": f\"Download activities data by date from '{startdate.isoformat()}' to '{today.isoformat()}'\",\r\n",
							"    \"r\": f\"Get all kinds of activities data from '{start}'\",\r\n",
							"    \"s\": f\"Upload activity data from file '{activityfile}'\",\r\n",
							"    \"t\": \"Get all kinds of Garmin device info\",\r\n",
							"    \"u\": \"Get active goals\",\r\n",
							"    \"v\": \"Get future goals\",\r\n",
							"    \"w\": \"Get past goals\",\r\n",
							"    \"y\": \"Get all Garmin device alarms\",\r\n",
							"    \"x\": f\"Get Heart Rate Variability data (HRV) for '{today.isoformat()}'\",\r\n",
							"    \"z\": f\"Get progress summary from '{startdate.isoformat()}' to '{today.isoformat()}' for all metrics\",\r\n",
							"    \"A\": \"Get gear, the defaults, activity types and statistics\",\r\n",
							"    \"B\": f\"Get weight-ins from '{startdate.isoformat()}' to '{today.isoformat()}'\",\r\n",
							"    \"C\": f\"Get daily weigh-ins for '{today.isoformat()}'\",\r\n",
							"    \"D\": f\"Delete all weigh-ins for '{today.isoformat()}'\",\r\n",
							"    \"E\": f\"Add a weigh-in of {weight}{weightunit} on '{today.isoformat()}'\",\r\n",
							"    \"F\": f\"Get virtual challenges/expeditions from '{startdate.isoformat()}' to '{today.isoformat()}'\",\r\n",
							"    \"G\": f\"Get hill score data from '{startdate.isoformat()}' to '{today.isoformat()}'\",\r\n",
							"    \"H\": f\"Get endurance score data from '{startdate.isoformat()}' to '{today.isoformat()}'\",\r\n",
							"    \"I\": f\"Get activities for date '{today.isoformat()}'\",\r\n",
							"    \"J\": \"Get race predictions\",\r\n",
							"    \"K\": f\"Get all day stress data for '{today.isoformat()}'\",\r\n",
							"    \"L\": f\"Add body composition for '{today.isoformat()}'\",\r\n",
							"    \"M\": \"Set blood pressure '120,80,80,notes='Testing with example.py'\",\r\n",
							"    \"N\": \"Get user profile/settings\",\r\n",
							"    \"O\": f\"Reload epoch data for {today.isoformat()}\",\r\n",
							"    \"P\": \"Get workouts 0-100, get and download last one to .FIT file\",\r\n",
							"    # \"Q\": \"Upload workout from json data\",\r\n",
							"    \"R\": \"Get solar data from your devices\",\r\n",
							"    \"S\": \"Get pregnancy summary data\",\r\n",
							"    \"Z\": \"Remove stored login tokens (logout)\",\r\n",
							"    \"q\": \"Exit\",\r\n",
							"}\r\n",
							""
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"source": [
							"def print_menu():\r\n",
							"    \"\"\"Print examples menu.\"\"\"\r\n",
							"    for key in menu_options.keys():\r\n",
							"        print(f\"{key} -- {menu_options[key]}\")\r\n",
							"\r\n",
							"def display_json(api_call, output):\r\n",
							"    \"\"\"Format API output for better readability.\"\"\"\r\n",
							"\r\n",
							"    dashed = \"-\" * 20\r\n",
							"    header = f\"{dashed} {api_call} {dashed}\"\r\n",
							"    footer = \"-\" * len(header)\r\n",
							"\r\n",
							"    print(header)\r\n",
							"\r\n",
							"    if isinstance(output, (int, str, dict, list)):\r\n",
							"        print(json.dumps(output, indent=4))\r\n",
							"    else:\r\n",
							"        print(output)\r\n",
							"\r\n",
							"    print(footer)\r\n",
							"\r\n",
							"\r\n",
							"def display_text(output):\r\n",
							"    \"\"\"Format API output for better readability.\"\"\"\r\n",
							"\r\n",
							"    dashed = \"-\" * 60\r\n",
							"    header = f\"{dashed}\"\r\n",
							"    footer = \"-\" * len(header)\r\n",
							"\r\n",
							"    print(header)\r\n",
							"    print(json.dumps(output, indent=4))\r\n",
							"    print(footer)\r\n",
							"\r\n",
							"\r\n",
							"def get_credentials():\r\n",
							"    \"\"\"Get user credentials.\"\"\"\r\n",
							"\r\n",
							"    email = input(\"Login e-mail: \")\r\n",
							"    password = getpass(\"Enter password: \")\r\n",
							"\r\n",
							"    return email, password\r\n",
							"\r\n",
							"\r\n",
							"def init_api(email, password):\r\n",
							"    \"\"\"Initialize Garmin API with your credentials.\"\"\"\r\n",
							"\r\n",
							"    try:\r\n",
							"        msg = f\"Trying to login to Garmin Connect...'\\n\"\r\n",
							"        #OUTPUTVAR = OUTPUTVAR + msg\r\n",
							"        print(msg)\r\n",
							"        garmin = Garmin(email=email, password=password, is_cn=False, prompt_mfa=get_mfa)\r\n",
							"        #garmin = Garmin(email, password)\r\n",
							"        garmin.login()\r\n",
							"        if garmin:\r\n",
							"            msg = 'Login successful.'\r\n",
							"            print(msg)\r\n",
							"            #OUTPUTVAR = OUTPUTVAR + msg\r\n",
							"    except (FileNotFoundError, GarthHTTPError, GarminConnectAuthenticationError, requests.exceptions.HTTPError) as err:\r\n",
							"            logger.error(err)\r\n",
							"            msg = 'Login failed.'\r\n",
							"            print(msg)\r\n",
							"            #OUTPUTVAR = OUTPUTVAR + msg\r\n",
							"            return None\r\n",
							"\r\n",
							"    return garmin\r\n",
							"\r\n",
							"\r\n",
							"def get_mfa():\r\n",
							"    \"\"\"Get MFA.\"\"\"\r\n",
							"\r\n",
							"    return input(\"MFA one-time code: \")\r\n",
							"\r\n",
							"\r\n",
							"def print_menu():\r\n",
							"    \"\"\"Print examples menu.\"\"\"\r\n",
							"    for key in menu_options.keys():\r\n",
							"        print(f\"{key} -- {menu_options[key]}\")\r\n",
							"    print(\"Make your selection: \", end=\"\", flush=True)\r\n",
							"\r\n",
							"\r\n",
							"def switch(api, i):\r\n",
							"    \"\"\"Run selected API call.\"\"\"\r\n",
							"\r\n",
							"    # Exit example program\r\n",
							"    if i == \"q\":\r\n",
							"        print(\"Be active, generate some data to fetch next time ;-) Bye!\")\r\n",
							"        sys.exit()\r\n",
							"\r\n",
							"    # Skip requests if login failed\r\n",
							"    if api:\r\n",
							"        try:\r\n",
							"            print(f\"\\n\\nExecuting: {menu_options[i]}\\n\")\r\n",
							"\r\n",
							"            # CUSTOM\r\n",
							"            if i == \"act\":\r\n",
							"                startofdata = startdate\r\n",
							"                endofdatadate = enddate\r\n",
							"                # Get sleep data for 'YYYY-MM-DD'\r\n",
							"                # display_json(\r\n",
							"                #     f\"api.get_activities_by_date('{startofdata.isoformat()},{endofdatadate.isoformat()}')\",\r\n",
							"                #     api.get_activities_by_date(startofdata.isoformat(),endofdatadate.isoformat()),\r\n",
							"                # )\r\n",
							"                write_dataframe_to_parquet(\r\n",
							"                    f\"api.get_activities_by_date('{startofdata.isoformat()},{endofdatadate.isoformat()}')\",\r\n",
							"                    api.get_activities_by_date(startofdata.isoformat(),endofdatadate.isoformat()),\r\n",
							"                    \"get_activities_by_date\",\r\n",
							"                    endofdatadate.isoformat(),\r\n",
							"                    ABFS_DEST_ACCOUNT,\r\n",
							"                    ABFS_DEST_FOLDER\r\n",
							"                )\r\n",
							"\r\n",
							"            # USER BASICS\r\n",
							"            if i == \"1\":\r\n",
							"                # Get full name from profile\r\n",
							"                display_json(\"api.get_full_name()\", api.get_full_name())\r\n",
							"            elif i == \"2\":\r\n",
							"                # Get unit system from profile\r\n",
							"                display_json(\"api.get_unit_system()\", api.get_unit_system())\r\n",
							"\r\n",
							"            # USER STATISTIC SUMMARIES\r\n",
							"            elif i == \"3\":\r\n",
							"                # Get activity data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_stats('{today.isoformat()}')\",\r\n",
							"                    api.get_stats(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"4\":\r\n",
							"                # Get activity data (to be compatible with garminconnect-ha)\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_user_summary('{today.isoformat()}')\",\r\n",
							"                    api.get_user_summary(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"5\":\r\n",
							"                # Get body composition data for 'YYYY-MM-DD' (to be compatible with garminconnect-ha)\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_body_composition('{today.isoformat()}')\",\r\n",
							"                    api.get_body_composition(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"6\":\r\n",
							"                # Get body composition data for multiple days 'YYYY-MM-DD' (to be compatible with garminconnect-ha)\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_body_composition('{startdate.isoformat()}', '{today.isoformat()}')\",\r\n",
							"                    api.get_body_composition(startdate.isoformat(), today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"7\":\r\n",
							"                # Get stats and body composition data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_stats_and_body('{today.isoformat()}')\",\r\n",
							"                    api.get_stats_and_body(today.isoformat()),\r\n",
							"                )\r\n",
							"\r\n",
							"            # USER STATISTICS LOGGED\r\n",
							"            elif i == \"8\":\r\n",
							"                # Get steps data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_steps_data('{today.isoformat()}')\",\r\n",
							"                    api.get_steps_data(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"9\":\r\n",
							"                # Get heart rate data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_heart_rates('{today.isoformat()}')\",\r\n",
							"                    api.get_heart_rates(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"0\":\r\n",
							"                # Get training readiness data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_training_readiness('{today.isoformat()}')\",\r\n",
							"                    api.get_training_readiness(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"/\":\r\n",
							"                # Get daily body battery data for 'YYYY-MM-DD' to 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_body_battery('{startdate.isoformat()}, {today.isoformat()}')\",\r\n",
							"                    api.get_body_battery(startdate.isoformat(), today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"?\":\r\n",
							"                # Get daily blood pressure data for 'YYYY-MM-DD' to 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_blood_pressure('{startdate.isoformat()}, {today.isoformat()}')\",\r\n",
							"                    api.get_blood_pressure(startdate.isoformat(), today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"-\":\r\n",
							"                # Get daily step data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_daily_steps('{startdate.isoformat()}, {today.isoformat()}')\",\r\n",
							"                    api.get_daily_steps(startdate.isoformat(), today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"!\":\r\n",
							"                # Get daily floors data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_floors('{today.isoformat()}')\",\r\n",
							"                    api.get_floors(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \".\":\r\n",
							"                # Get training status data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_training_status('{today.isoformat()}')\",\r\n",
							"                    api.get_training_status(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"a\":\r\n",
							"                # Get resting heart rate data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_rhr_day('{today.isoformat()}')\",\r\n",
							"                    api.get_rhr_day(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"b\":\r\n",
							"                # Get hydration data 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_hydration_data('{today.isoformat()}')\",\r\n",
							"                    api.get_hydration_data(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"c\":\r\n",
							"                Get sleep data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_sleep_data('{endofdatadate.isoformat()}')\",\r\n",
							"                    api.get_sleep_data(endofdatadate.isoformat()),\r\n",
							"                )\r\n",
							"                # write_dataframe_to_parquet(\r\n",
							"                #     f\"api.get_sleep_data('{endofdatadate.isoformat()}')\",\r\n",
							"                #     api.get_sleep_data(endofdatadate.isoformat()),\r\n",
							"                #     \"get_sleep_data\",\r\n",
							"                #     endofdatadate.isoformat(),\r\n",
							"                #     ABFS_DEST_ACCOUNT,\r\n",
							"                #     ABFS_DEST_FOLDER\r\n",
							"                # )\r\n",
							"\r\n",
							"            elif i == \"d\":\r\n",
							"                # Get stress data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_stress_data('{today.isoformat()}')\",\r\n",
							"                    api.get_stress_data(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"e\":\r\n",
							"                # Get respiration data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_respiration_data('{today.isoformat()}')\",\r\n",
							"                    api.get_respiration_data(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"f\":\r\n",
							"                # Get SpO2 data for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_spo2_data('{today.isoformat()}')\",\r\n",
							"                    api.get_spo2_data(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"g\":\r\n",
							"                # Get max metric data (like vo2MaxValue and fitnessAge) for 'YYYY-MM-DD'\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_max_metrics('{today.isoformat()}')\",\r\n",
							"                    api.get_max_metrics(today.isoformat()),\r\n",
							"                )\r\n",
							"            elif i == \"h\":\r\n",
							"                # Get personal record for user\r\n",
							"                display_json(\"api.get_personal_record()\", api.get_personal_record())\r\n",
							"            elif i == \"i\":\r\n",
							"                # Get earned badges for user\r\n",
							"                display_json(\"api.get_earned_badges()\", api.get_earned_badges())\r\n",
							"            elif i == \"j\":\r\n",
							"                # Get adhoc challenges data from start and limit\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_adhoc_challenges({start},{limit})\",\r\n",
							"                    api.get_adhoc_challenges(start, limit),\r\n",
							"                )  # 1=start, 100=limit\r\n",
							"            elif i == \"k\":\r\n",
							"                # Get available badge challenges data from start and limit\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_available_badge_challenges({start_badge}, {limit})\",\r\n",
							"                    api.get_available_badge_challenges(start_badge, limit),\r\n",
							"                )  # 1=start, 100=limit\r\n",
							"            elif i == \"l\":\r\n",
							"                # Get badge challenges data from start and limit\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_badge_challenges({start_badge}, {limit})\",\r\n",
							"                    api.get_badge_challenges(start_badge, limit),\r\n",
							"                )  # 1=start, 100=limit\r\n",
							"            elif i == \"m\":\r\n",
							"                # Get non completed badge challenges data from start and limit\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_non_completed_badge_challenges({start_badge}, {limit})\",\r\n",
							"                    api.get_non_completed_badge_challenges(start_badge, limit),\r\n",
							"                )  # 1=start, 100=limit\r\n",
							"\r\n",
							"            # ACTIVITIES\r\n",
							"            elif i == \"n\":\r\n",
							"                # Get activities data from start and limit\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_activities({start}, {limit})\",\r\n",
							"                    api.get_activities(start, limit),\r\n",
							"                )  # 0=start, 1=limit\r\n",
							"            elif i == \"o\":\r\n",
							"                # Get last activity\r\n",
							"                display_json(\"api.get_last_activity()\", api.get_last_activity())\r\n",
							"            elif i == \"p\":\r\n",
							"                # Get activities data from startdate 'YYYY-MM-DD' to enddate 'YYYY-MM-DD', with (optional) activitytype\r\n",
							"                # Possible values are: cycling, running, swimming, multi_sport, fitness_equipment, hiking, walking, other\r\n",
							"                activities = api.get_activities_by_date(\r\n",
							"                    startdate.isoformat(), today.isoformat(), activitytype\r\n",
							"                )\r\n",
							"\r\n",
							"                # Download activities\r\n",
							"                for activity in activities:\r\n",
							"                    activity_id = activity[\"activityId\"]\r\n",
							"                    activity_name = activity[\"activityName\"]\r\n",
							"                    display_text(activity)\r\n",
							"\r\n",
							"                    print(\r\n",
							"                        f\"api.download_activity({activity_id}, dl_fmt=api.ActivityDownloadFormat.GPX)\"\r\n",
							"                    )\r\n",
							"                    gpx_data = api.download_activity(\r\n",
							"                        activity_id, dl_fmt=api.ActivityDownloadFormat.GPX\r\n",
							"                    )\r\n",
							"                    output_file = f\"./{str(activity_name)}.gpx\"\r\n",
							"                    with open(output_file, \"wb\") as fb:\r\n",
							"                        fb.write(gpx_data)\r\n",
							"                    print(f\"Activity data downloaded to file {output_file}\")\r\n",
							"\r\n",
							"                    print(\r\n",
							"                        f\"api.download_activity({activity_id}, dl_fmt=api.ActivityDownloadFormat.TCX)\"\r\n",
							"                    )\r\n",
							"                    tcx_data = api.download_activity(\r\n",
							"                        activity_id, dl_fmt=api.ActivityDownloadFormat.TCX\r\n",
							"                    )\r\n",
							"                    output_file = f\"./{str(activity_name)}.tcx\"\r\n",
							"                    with open(output_file, \"wb\") as fb:\r\n",
							"                        fb.write(tcx_data)\r\n",
							"                    print(f\"Activity data downloaded to file {output_file}\")\r\n",
							"\r\n",
							"                    print(\r\n",
							"                        f\"api.download_activity({activity_id}, dl_fmt=api.ActivityDownloadFormat.ORIGINAL)\"\r\n",
							"                    )\r\n",
							"                    zip_data = api.download_activity(\r\n",
							"                        activity_id, dl_fmt=api.ActivityDownloadFormat.ORIGINAL\r\n",
							"                    )\r\n",
							"                    output_file = f\"./{str(activity_name)}.zip\"\r\n",
							"                    with open(output_file, \"wb\") as fb:\r\n",
							"                        fb.write(zip_data)\r\n",
							"                    print(f\"Activity data downloaded to file {output_file}\")\r\n",
							"\r\n",
							"                    print(\r\n",
							"                        f\"api.download_activity({activity_id}, dl_fmt=api.ActivityDownloadFormat.CSV)\"\r\n",
							"                    )\r\n",
							"                    csv_data = api.download_activity(\r\n",
							"                        activity_id, dl_fmt=api.ActivityDownloadFormat.CSV\r\n",
							"                    )\r\n",
							"                    output_file = f\"./{str(activity_name)}.csv\"\r\n",
							"                    with open(output_file, \"wb\") as fb:\r\n",
							"                        fb.write(csv_data)\r\n",
							"                    print(f\"Activity data downloaded to file {output_file}\")\r\n",
							"\r\n",
							"            elif i == \"r\":\r\n",
							"                # Get activities data from start and limit\r\n",
							"                activities = api.get_activities(start, limit)  # 0=start, 1=limit\r\n",
							"\r\n",
							"                # Get activity splits\r\n",
							"                first_activity_id = activities[0].get(\"activityId\")\r\n",
							"\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_activity_splits({first_activity_id})\",\r\n",
							"                    api.get_activity_splits(first_activity_id),\r\n",
							"                )\r\n",
							"\r\n",
							"                # Get activity split summaries for activity id\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_activity_split_summaries({first_activity_id})\",\r\n",
							"                    api.get_activity_split_summaries(first_activity_id),\r\n",
							"                )\r\n",
							"\r\n",
							"                # Get activity weather data for activity\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_activity_weather({first_activity_id})\",\r\n",
							"                    api.get_activity_weather(first_activity_id),\r\n",
							"                )\r\n",
							"\r\n",
							"                # Get activity hr timezones id\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_activity_hr_in_timezones({first_activity_id})\",\r\n",
							"                    api.get_activity_hr_in_timezones(first_activity_id),\r\n",
							"                )\r\n",
							"\r\n",
							"                # Get activity details for activity id\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_activity_details({first_activity_id})\",\r\n",
							"                    api.get_activity_details(first_activity_id),\r\n",
							"                )\r\n",
							"\r\n",
							"                # Get gear data for activity id\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_activity_gear({first_activity_id})\",\r\n",
							"                    api.get_activity_gear(first_activity_id),\r\n",
							"                )\r\n",
							"\r\n",
							"                # Activity data for activity id\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_activity({first_activity_id})\",\r\n",
							"                    api.get_activity(first_activity_id),\r\n",
							"                )\r\n",
							"\r\n",
							"                # Get exercise sets in case the activity is a strength_training\r\n",
							"                if activities[0][\"activityType\"][\"typeKey\"] == \"strength_training\":\r\n",
							"                    display_json(\r\n",
							"                        f\"api.get_activity_exercise_sets({first_activity_id})\",\r\n",
							"                        api.get_activity_exercise_sets(first_activity_id),\r\n",
							"                    )\r\n",
							"\r\n",
							"            elif i == \"s\":\r\n",
							"                try:\r\n",
							"                    # Upload activity from file\r\n",
							"                    display_json(\r\n",
							"                        f\"api.upload_activity({activityfile})\",\r\n",
							"                        api.upload_activity(activityfile),\r\n",
							"                    )\r\n",
							"                except FileNotFoundError:\r\n",
							"                    print(f\"File to upload not found: {activityfile}\")\r\n",
							"\r\n",
							"            # DEVICES\r\n",
							"            elif i == \"t\":\r\n",
							"                # Get Garmin devices\r\n",
							"                devices = api.get_devices()\r\n",
							"                display_json(\"api.get_devices()\", devices)\r\n",
							"\r\n",
							"                # Get device last used\r\n",
							"                device_last_used = api.get_device_last_used()\r\n",
							"                display_json(\"api.get_device_last_used()\", device_last_used)\r\n",
							"\r\n",
							"                # Get settings per device\r\n",
							"                for device in devices:\r\n",
							"                    device_id = device[\"deviceId\"]\r\n",
							"                    display_json(\r\n",
							"                        f\"api.get_device_settings({device_id})\",\r\n",
							"                        api.get_device_settings(device_id),\r\n",
							"                    )\r\n",
							"\r\n",
							"                # Get primary training device information\r\n",
							"                primary_training_device = api.get_primary_training_device()\r\n",
							"                display_json(\"api.get_primary_training_device()\", primary_training_device)\r\n",
							"\r\n",
							"            elif i == \"R\":\r\n",
							"                # Get solar data from Garmin devices\r\n",
							"                devices = api.get_devices()\r\n",
							"                display_json(\"api.get_devices()\", devices)\r\n",
							"\r\n",
							"                # Get device last used\r\n",
							"                device_last_used = api.get_device_last_used()\r\n",
							"                display_json(\"api.get_device_last_used()\", device_last_used)\r\n",
							"\r\n",
							"                # Get settings per device\r\n",
							"                for device in devices:\r\n",
							"                    device_id = device[\"deviceId\"]\r\n",
							"                    display_json(\r\n",
							"                        f\"api.get_device_solar_data({device_id}, {today.isoformat()})\",\r\n",
							"                        api.get_device_solar_data(device_id, today.isoformat()),\r\n",
							"                    )\r\n",
							"            # GOALS\r\n",
							"            elif i == \"u\":\r\n",
							"                # Get active goals\r\n",
							"                goals = api.get_goals(\"active\")\r\n",
							"                display_json('api.get_goals(\"active\")', goals)\r\n",
							"\r\n",
							"            elif i == \"v\":\r\n",
							"                # Get future goals\r\n",
							"                goals = api.get_goals(\"future\")\r\n",
							"                display_json('api.get_goals(\"future\")', goals)\r\n",
							"\r\n",
							"            elif i == \"w\":\r\n",
							"                # Get past goals\r\n",
							"                goals = api.get_goals(\"past\")\r\n",
							"                display_json('api.get_goals(\"past\")', goals)\r\n",
							"\r\n",
							"            # ALARMS\r\n",
							"            elif i == \"y\":\r\n",
							"                # Get Garmin device alarms\r\n",
							"                alarms = api.get_device_alarms()\r\n",
							"                for alarm in alarms:\r\n",
							"                    alarm_id = alarm[\"alarmId\"]\r\n",
							"                    display_json(f\"api.get_device_alarms({alarm_id})\", alarm)\r\n",
							"\r\n",
							"            elif i == \"x\":\r\n",
							"                # Get Heart Rate Variability (hrv) data\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_hrv_data({today.isoformat()})\",\r\n",
							"                    api.get_hrv_data(today.isoformat()),\r\n",
							"                )\r\n",
							"\r\n",
							"            elif i == \"z\":\r\n",
							"                # Get progress summary\r\n",
							"                for metric in [\r\n",
							"                    \"elevationGain\",\r\n",
							"                    \"duration\",\r\n",
							"                    \"distance\",\r\n",
							"                    \"movingDuration\",\r\n",
							"                ]:\r\n",
							"                    display_json(\r\n",
							"                        f\"api.get_progress_summary_between_dates({today.isoformat()})\",\r\n",
							"                        api.get_progress_summary_between_dates(\r\n",
							"                            startdate.isoformat(), today.isoformat(), metric\r\n",
							"                        ),\r\n",
							"                    )\r\n",
							"            # GEAR\r\n",
							"            elif i == \"A\":\r\n",
							"                last_used_device = api.get_device_last_used()\r\n",
							"                display_json(\"api.get_device_last_used()\", last_used_device)\r\n",
							"                userProfileNumber = last_used_device[\"userProfileNumber\"]\r\n",
							"                gear = api.get_gear(userProfileNumber)\r\n",
							"                display_json(\"api.get_gear()\", gear)\r\n",
							"                display_json(\r\n",
							"                    \"api.get_gear_defaults()\", api.get_gear_defaults(userProfileNumber)\r\n",
							"                )\r\n",
							"                display_json(\"api.get()\", api.get_activity_types())\r\n",
							"                for gear in gear:\r\n",
							"                    uuid = gear[\"uuid\"]\r\n",
							"                    name = gear[\"displayName\"]\r\n",
							"                    display_json(\r\n",
							"                        f\"api.get_gear_stats({uuid}) / {name}\", api.get_gear_stats(uuid)\r\n",
							"                    )\r\n",
							"\r\n",
							"            # WEIGHT-INS\r\n",
							"            elif i == \"B\":\r\n",
							"                # Get weigh-ins data\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_weigh_ins({startdate.isoformat()}, {today.isoformat()})\",\r\n",
							"                    api.get_weigh_ins(startdate.isoformat(), today.isoformat())\r\n",
							"                )\r\n",
							"            elif i == \"C\":\r\n",
							"                # Get daily weigh-ins data\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_daily_weigh_ins({today.isoformat()})\",\r\n",
							"                    api.get_daily_weigh_ins(today.isoformat())\r\n",
							"                )\r\n",
							"            elif i == \"D\":\r\n",
							"                # Delete weigh-ins data for today\r\n",
							"                display_json(\r\n",
							"                    f\"api.delete_weigh_ins({today.isoformat()}, delete_all=True)\",\r\n",
							"                    api.delete_weigh_ins(today.isoformat(), delete_all=True)\r\n",
							"                )\r\n",
							"            elif i == \"E\":\r\n",
							"                # Add a weigh-in\r\n",
							"                weight = 89.6\r\n",
							"                unit = 'kg'\r\n",
							"                display_json(\r\n",
							"                    f\"api.add_weigh_in(weight={weight}, unitKey={unit})\",\r\n",
							"                    api.add_weigh_in(weight=weight, unitKey=unit)\r\n",
							"                )\r\n",
							"\r\n",
							"            # CHALLENGES/EXPEDITIONS\r\n",
							"            elif i == \"F\":\r\n",
							"                # Get virtual challenges/expeditions\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_inprogress_virtual_challenges({startdate.isoformat()}, {today.isoformat()})\",\r\n",
							"                    api.get_inprogress_virtual_challenges(startdate.isoformat(), today.isoformat())\r\n",
							"                )\r\n",
							"            elif i == \"G\":\r\n",
							"                # Get hill score data\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_hill_score({startdate.isoformat()}, {today.isoformat()})\",\r\n",
							"                    api.get_hill_score(startdate.isoformat(), today.isoformat())\r\n",
							"                )\r\n",
							"            elif i == \"H\":\r\n",
							"                # Get endurance score data\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_endurance_score({startdate.isoformat()}, {today.isoformat()})\",\r\n",
							"                    api.get_endurance_score(startdate.isoformat(), today.isoformat())\r\n",
							"                )\r\n",
							"            elif i == \"I\":\r\n",
							"                # Get activities for date\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_activities_fordate({today.isoformat()})\",\r\n",
							"                    api.get_activities_fordate(today.isoformat())\r\n",
							"                )\r\n",
							"            elif i == \"J\":\r\n",
							"                # Get race predictions\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_race_predictions()\",\r\n",
							"                    api.get_race_predictions()\r\n",
							"                )\r\n",
							"            elif i == \"K\":\r\n",
							"                # Get all day stress data for date\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_all_day_stress({today.isoformat()})\",\r\n",
							"                    api.get_all_day_stress(today.isoformat())\r\n",
							"                )\r\n",
							"            elif i == \"L\":\r\n",
							"                # Add body composition\r\n",
							"                weight = 70.0\r\n",
							"                percent_fat = 15.4\r\n",
							"                percent_hydration = 54.8\r\n",
							"                visceral_fat_mass = 10.8\r\n",
							"                bone_mass = 2.9\r\n",
							"                muscle_mass = 55.2\r\n",
							"                basal_met = 1454.1\r\n",
							"                active_met = None\r\n",
							"                physique_rating = None\r\n",
							"                metabolic_age = 33.0\r\n",
							"                visceral_fat_rating = None\r\n",
							"                bmi = 22.2\r\n",
							"                display_json(\r\n",
							"                    f\"api.add_body_composition({today.isoformat()}, {weight}, {percent_fat}, {percent_hydration}, {visceral_fat_mass}, {bone_mass}, {muscle_mass}, {basal_met}, {active_met}, {physique_rating}, {metabolic_age}, {visceral_fat_rating}, {bmi})\",\r\n",
							"                    api.add_body_composition(\r\n",
							"                        today.isoformat(),\r\n",
							"                        weight=weight,\r\n",
							"                        percent_fat=percent_fat,\r\n",
							"                        percent_hydration=percent_hydration,\r\n",
							"                        visceral_fat_mass=visceral_fat_mass,\r\n",
							"                        bone_mass=bone_mass,\r\n",
							"                        muscle_mass=muscle_mass,\r\n",
							"                        basal_met=basal_met,\r\n",
							"                        active_met=active_met,\r\n",
							"                        physique_rating=physique_rating,\r\n",
							"                        metabolic_age=metabolic_age,\r\n",
							"                        visceral_fat_rating=visceral_fat_rating,\r\n",
							"                        bmi=bmi,\r\n",
							"                    )\r\n",
							"                )\r\n",
							"            elif i == \"M\":\r\n",
							"                # Set blood pressure values\r\n",
							"                display_json(\r\n",
							"                    f\"api.set_blood_pressure(120,80,80,notes=`Testing with example.py`)\",\r\n",
							"                    api.set_blood_pressure(120,80,80,notes=\"Testing with example.py\")\r\n",
							"                )\r\n",
							"            elif i == \"N\":\r\n",
							"                # Get user profile\r\n",
							"                display_json(\r\n",
							"                    \"api.get_user_profile()\",\r\n",
							"                    api.get_user_profile()\r\n",
							"                )\r\n",
							"            elif i == \"O\":\r\n",
							"                # Reload epoch data for date\r\n",
							"                display_json(\r\n",
							"                    f\"api.request_reload({today.isoformat()})\",\r\n",
							"                    api.request_reload(today.isoformat())\r\n",
							"                )\r\n",
							"\r\n",
							"            # WORKOUTS\r\n",
							"            elif i == \"P\":\r\n",
							"                workouts = api.get_workouts()\r\n",
							"                # Get workout 0-100\r\n",
							"                display_json(\r\n",
							"                    \"api.get_workouts()\",\r\n",
							"                    api.get_workouts()\r\n",
							"                )\r\n",
							"\r\n",
							"                # Get last fetched workout\r\n",
							"                workout_id = workouts[-1]['workoutId']\r\n",
							"                workout_name = workouts[-1][\"workoutName\"]\r\n",
							"                display_json(\r\n",
							"                    f\"api.get_workout_by_id({workout_id})\",\r\n",
							"                    api.get_workout_by_id(workout_id))\r\n",
							"\r\n",
							"                # Download last fetched workout\r\n",
							"                print(\r\n",
							"                    f\"api.download_workout({workout_id})\"\r\n",
							"                )\r\n",
							"                workout_data = api.download_workout(\r\n",
							"                    workout_id\r\n",
							"                )\r\n",
							"                \r\n",
							"                output_file = f\"./{str(workout_name)}.fit\"\r\n",
							"                with open(output_file, \"wb\") as fb:\r\n",
							"                    fb.write(workout_data)\r\n",
							"\r\n",
							"                print(f\"Workout data downloaded to file {output_file}\")\r\n",
							"\r\n",
							"            # elif i == \"Q\":\r\n",
							"            #     display_json(\r\n",
							"            #         f\"api.upload_workout({workout_example})\",\r\n",
							"            #         api.upload_workout(workout_example))\r\n",
							"\r\n",
							"            # WOMEN'S HEALTH\r\n",
							"            elif i == \"S\":\r\n",
							"                # Get pregnancy summary data\r\n",
							"                display_json(\r\n",
							"                    \"api.get_pregnancy_summary()\",\r\n",
							"                    api.get_pregnancy_summary()\r\n",
							"                )\r\n",
							"\r\n",
							"            # Additional related calls:\r\n",
							"            # get_menstrual_data_for_date(self, fordate: str): takes a single date and returns the Garmin Menstrual Summary data for that date\r\n",
							"            # get_menstrual_calendar_data(self, startdate: str, enddate: str) takes two dates and returns summaries of cycles that have days between the two days\r\n",
							"\r\n",
							"            elif i == \"Z\":\r\n",
							"                # Remove stored login tokens for Garmin Connect portal\r\n",
							"                tokendir = os.path.expanduser(tokenstore)\r\n",
							"                print(f\"Removing stored login tokens from: {tokendir}\")\r\n",
							"                \r\n",
							"                try:\r\n",
							"                    for root, dirs, files in os.walk(tokendir, topdown=False):\r\n",
							"                        for name in files:\r\n",
							"                            os.remove(os.path.join(root, name))\r\n",
							"                        for name in dirs:\r\n",
							"                            os.rmdir(os.path.join(root, name))\r\n",
							"                    print(f\"Directory {tokendir} removed\")\r\n",
							"                except FileNotFoundError:\r\n",
							"                    print(f\"Directory not found: {tokendir}\")\r\n",
							"                api = None\r\n",
							"\r\n",
							"        except (\r\n",
							"            GarminConnectConnectionError,\r\n",
							"            GarminConnectAuthenticationError,\r\n",
							"            GarminConnectTooManyRequestsError,\r\n",
							"            requests.exceptions.HTTPError,\r\n",
							"            GarthHTTPError\r\n",
							"        ) as err:\r\n",
							"            logger.error(err)\r\n",
							"        except KeyError:\r\n",
							"            # Invalid menu option chosen\r\n",
							"            pass\r\n",
							"    else:\r\n",
							"        status=\"Could not login to Garmin Connect, try again later.\"\r\n",
							"        print(status)\r\n",
							"\r\n",
							"# Function to fetch keys from keyvault\r\n",
							"def get_api_key_from_keyvault(key_vault_name, secret_name, linked_service_name): \r\n",
							"    try:\r\n",
							"        api_key = mssparkutils.credentials.getSecret(key_vault_name,secret_name, linked_service_name)\r\n",
							"        return api_key\r\n",
							"    except Exception as e:\r\n",
							"        msg = f\"Error retrieving API key from Key Vault: {e}\"\r\n",
							"        print(msg)\r\n",
							"        #OUTPUTVAR = OUTPUTVAR + msg\r\n",
							"        return None\r\n",
							"\r\n",
							"# Function to write Dartaframe to parquet\r\n",
							"def write_dataframe_to_parquet(api_call, output, garmin_api_endpoint, endofdatadate ,pathacc, pathfolder ): \r\n",
							"    try:\r\n",
							"        # pathacc = ABFS_DEST_ACCOUNT #\"abfss://personalprojectsfs@personalprojectsrslake.dfs.core.windows.net/synapse/workspaces/personalprojectsrgsynapse/DataFiles/Garmin/\"\r\n",
							"        # pathfolder = ABFS_DEST_FOLDER\r\n",
							"        #df = pd.DataFrame(output)\r\n",
							"        df = pd.json_normalize(output)\r\n",
							"        #df.json_normalize(output, max_level=1)\r\n",
							"        file = \"garmin_\" +garmin_api_endpoint+\"-\" + endofdatadate + \".parquet\"\r\n",
							"        full_path = f\"{pathacc}{pathfolder}{file}\"\r\n",
							"        df.to_parquet(full_path, engine='pyarrow')\r\n",
							"        status = f\"SUCCESS: Data written to :\\n{full_path}\"\r\n",
							"        print(status)\r\n",
							"        #OUTPUTVAR = OUTPUTVAR + status\r\n",
							"        #print(status)\r\n",
							"        logger.error(status)\r\n",
							"    except Exception as e:\r\n",
							"        status = f\"Error writing data to :\\n{full_path}\\n {e}\"\r\n",
							"        print(status)\r\n",
							"        #OUTPUTVAR = OUTPUTVAR + status\r\n",
							"        return None"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Main program \r\n",
							"print(\"\\n*** Script by Jude Moore May 2024. Original Garmin Connect API code by cyberjunky ***\\n\")\r\n",
							"\r\n",
							"# Get API password from Key Vault. Replace with hard-coded values to avoid the KeyVault request\r\n",
							"try:\r\n",
							"    email = get_api_key_from_keyvault(KEYVAULTNAME, GARMIN_UNAME_KEY, KEYVAULTLINKEDSERVICE)\r\n",
							"except Exception as e:\r\n",
							"    print(\"Garmin_Username retrieval/initialisation failed. Check your Key Vault configuration/python. {e}\")\r\n",
							"\r\n",
							"try:\r\n",
							"    password = get_api_key_from_keyvault(KEYVAULTNAME, GARMIN_PASSW_KEY, KEYVAULTLINKEDSERVICE)\r\n",
							"except Exception as e:\r\n",
							"    print(\"Garmin_Password retrieval/initialisation failed. Check your Key Vault configuration/python. {e}\")\r\n",
							"\r\n",
							"api = init_api(email, password)\r\n",
							"\r\n",
							"if api:\r\n",
							"    # Display menu\r\n",
							"    #print_menu() \r\n",
							"    #option = readchar.readkey() # jm\r\n",
							"    option = GARMIN_API_OPTION\r\n",
							"    switch(api, option)\r\n",
							"    #OUTPUTVAR = f'<html><body><h1>HTML Output</h1><p>{OUTPUTVAR}</p></body></html>' # https://stackoverflow.com/questions/75862049/easily-access-notebook-output-run-in-synapse-pipeline\r\n",
							"    mssparkutils.notebook.exit(outputval)\r\n",
							"else:\r\n",
							"    status = 'Issue logging in.'\r\n",
							"    print(status)\r\n",
							"    #OUTPUTVAR = OUTPUTVAR + status\r\n",
							"    logger.error(status)"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/personalsparkp')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 5
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 16,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.4",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": true,
				"annotations": []
			},
			"dependsOn": [],
			"location": "ukwest"
		}
	]
}